
SMBUS_Master_L4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08004f60  08004f60  00014f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800528c  0800528c  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800528c  0800528c  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800528c  0800528c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800528c  0800528c  0001528c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005290  08005290  00015290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005294  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  20000014  080052a8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080052a8  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008d3d  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ea1  00000000  00000000  00028dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  0002ac68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d1  00000000  00000000  0002b598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025c8f  00000000  00000000  0002bc69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ba8d  00000000  00000000  000518f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4d52  00000000  00000000  0005d385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002324  00000000  00000000  001420d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001443fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f48 	.word	0x08004f48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08004f48 	.word	0x08004f48

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9fb 	bl	80005c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80e 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f89a 	bl	800030c <MX_GPIO_Init>
  MX_I2C1_SMBUS_Init();
 80001d8:	f000 f85c 	bl	8000294 <MX_I2C1_SMBUS_Init>
  MX_SMBus_PMBus_Stack_Init();
 80001dc:	f004 fdf4 	bl	8004dc8 <MX_SMBus_PMBus_Stack_Init>
  /* USER CODE BEGIN 2 */
  HAL_SMBUS_DisableListen_IT(&hsmbus1);
 80001e0:	4802      	ldr	r0, [pc, #8]	; (80001ec <main+0x24>)
 80001e2:	f002 fd46 	bl	8002c72 <HAL_SMBUS_DisableListen_IT>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_SMBus_PMBus_Stack_Process();
 80001e6:	f004 fda9 	bl	8004d3c <MX_SMBus_PMBus_Stack_Process>
 80001ea:	e7fc      	b.n	80001e6 <main+0x1e>
 80001ec:	20000030 	.word	0x20000030

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b096      	sub	sp, #88	; 0x58
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0314 	add.w	r3, r7, #20
 80001fa:	2244      	movs	r2, #68	; 0x44
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f004 fe76 	bl	8004ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	463b      	mov	r3, r7
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000212:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000216:	f000 fe5f 	bl	8000ed8 <HAL_PWREx_ControlVoltageScaling>
 800021a:	4603      	mov	r3, r0
 800021c:	2b00      	cmp	r3, #0
 800021e:	d001      	beq.n	8000224 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000220:	f000 f898 	bl	8000354 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000224:	2310      	movs	r3, #16
 8000226:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000228:	2301      	movs	r3, #1
 800022a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000230:	2360      	movs	r3, #96	; 0x60
 8000232:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000234:	2302      	movs	r3, #2
 8000236:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000238:	2301      	movs	r3, #1
 800023a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800023c:	2301      	movs	r3, #1
 800023e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000240:	2328      	movs	r3, #40	; 0x28
 8000242:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000244:	2307      	movs	r3, #7
 8000246:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000248:	2302      	movs	r3, #2
 800024a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800024c:	2302      	movs	r3, #2
 800024e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0314 	add.w	r3, r7, #20
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fe95 	bl	8000f84 <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000260:	f000 f878 	bl	8000354 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000268:	2303      	movs	r3, #3
 800026a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000278:	463b      	mov	r3, r7
 800027a:	2104      	movs	r1, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f001 fa5d 	bl	800173c <HAL_RCC_ClockConfig>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d001      	beq.n	800028c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000288:	f000 f864 	bl	8000354 <Error_Handler>
  }
}
 800028c:	bf00      	nop
 800028e:	3758      	adds	r7, #88	; 0x58
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_SMBUS_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000298:	4b19      	ldr	r3, [pc, #100]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 800029a:	4a1a      	ldr	r2, [pc, #104]	; (8000304 <MX_I2C1_SMBUS_Init+0x70>)
 800029c:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x10909CEC;
 800029e:	4b18      	ldr	r3, [pc, #96]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002a0:	4a19      	ldr	r2, [pc, #100]	; (8000308 <MX_I2C1_SMBUS_Init+0x74>)
 80002a2:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 2;
 80002aa:	4b15      	ldr	r3, [pc, #84]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002ac:	2202      	movs	r2, #2
 80002ae:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 80002b6:	4b12      	ldr	r3, [pc, #72]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 80002bc:	4b10      	ldr	r3, [pc, #64]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002be:	2200      	movs	r2, #0
 80002c0:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 80002c2:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 80002c8:	4b0d      	ldr	r3, [pc, #52]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 80002ce:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_HOST;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80002e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x000083D0;
 80002e2:	4b07      	ldr	r3, [pc, #28]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002e4:	f248 32d0 	movw	r2, #33744	; 0x83d0
 80002e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 80002ea:	4805      	ldr	r0, [pc, #20]	; (8000300 <MX_I2C1_SMBUS_Init+0x6c>)
 80002ec:	f002 f8ce 	bl	800248c <HAL_SMBUS_Init>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <MX_I2C1_SMBUS_Init+0x66>
  {
    Error_Handler();
 80002f6:	f000 f82d 	bl	8000354 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80002fa:	bf00      	nop
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	20000030 	.word	0x20000030
 8000304:	40005400 	.word	0x40005400
 8000308:	10909cec 	.word	0x10909cec

0800030c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_GPIO_Init+0x44>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	4a0e      	ldr	r2, [pc, #56]	; (8000350 <MX_GPIO_Init+0x44>)
 8000318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800031c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800031e:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <MX_GPIO_Init+0x44>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000326:	607b      	str	r3, [r7, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <MX_GPIO_Init+0x44>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	4a08      	ldr	r2, [pc, #32]	; (8000350 <MX_GPIO_Init+0x44>)
 8000330:	f043 0302 	orr.w	r3, r3, #2
 8000334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000336:	4b06      	ldr	r3, [pc, #24]	; (8000350 <MX_GPIO_Init+0x44>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	f003 0302 	and.w	r3, r3, #2
 800033e:	603b      	str	r3, [r7, #0]
 8000340:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000342:	bf00      	nop
 8000344:	370c      	adds	r7, #12
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000

08000354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000358:	b672      	cpsid	i
}
 800035a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800035c:	e7fe      	b.n	800035c <Error_Handler+0x8>
	...

08000360 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <HAL_MspInit+0x44>)
 8000368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800036a:	4a0e      	ldr	r2, [pc, #56]	; (80003a4 <HAL_MspInit+0x44>)
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6613      	str	r3, [r2, #96]	; 0x60
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <HAL_MspInit+0x44>)
 8000374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000376:	f003 0301 	and.w	r3, r3, #1
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <HAL_MspInit+0x44>)
 8000380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000382:	4a08      	ldr	r2, [pc, #32]	; (80003a4 <HAL_MspInit+0x44>)
 8000384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000388:	6593      	str	r3, [r2, #88]	; 0x58
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <HAL_MspInit+0x44>)
 800038c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800038e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000392:	603b      	str	r3, [r7, #0]
 8000394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000396:	bf00      	nop
 8000398:	370c      	adds	r7, #12
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	40021000 	.word	0x40021000

080003a8 <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b0ac      	sub	sp, #176	; 0xb0
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]
 80003bc:	60da      	str	r2, [r3, #12]
 80003be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003c0:	f107 0314 	add.w	r3, r7, #20
 80003c4:	2288      	movs	r2, #136	; 0x88
 80003c6:	2100      	movs	r1, #0
 80003c8:	4618      	mov	r0, r3
 80003ca:	f004 fd91 	bl	8004ef0 <memset>
  if(hsmbus->Instance==I2C1)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a29      	ldr	r2, [pc, #164]	; (8000478 <HAL_SMBUS_MspInit+0xd0>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d14b      	bne.n	8000470 <HAL_SMBUS_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003d8:	2340      	movs	r3, #64	; 0x40
 80003da:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80003dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003e0:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e2:	f107 0314 	add.w	r3, r7, #20
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 fb94 	bl	8001b14 <HAL_RCCEx_PeriphCLKConfig>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <HAL_SMBUS_MspInit+0x4e>
    {
      Error_Handler();
 80003f2:	f7ff ffaf 	bl	8000354 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f6:	4b21      	ldr	r3, [pc, #132]	; (800047c <HAL_SMBUS_MspInit+0xd4>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	4a20      	ldr	r2, [pc, #128]	; (800047c <HAL_SMBUS_MspInit+0xd4>)
 80003fc:	f043 0302 	orr.w	r3, r3, #2
 8000400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000402:	4b1e      	ldr	r3, [pc, #120]	; (800047c <HAL_SMBUS_MspInit+0xd4>)
 8000404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000406:	f003 0302 	and.w	r3, r3, #2
 800040a:	613b      	str	r3, [r7, #16]
 800040c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800040e:	23c0      	movs	r3, #192	; 0xc0
 8000410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000414:	2312      	movs	r3, #18
 8000416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000420:	2303      	movs	r3, #3
 8000422:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000426:	2304      	movs	r3, #4
 8000428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800042c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000430:	4619      	mov	r1, r3
 8000432:	4813      	ldr	r0, [pc, #76]	; (8000480 <HAL_SMBUS_MspInit+0xd8>)
 8000434:	f000 faa4 	bl	8000980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000438:	4b10      	ldr	r3, [pc, #64]	; (800047c <HAL_SMBUS_MspInit+0xd4>)
 800043a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043c:	4a0f      	ldr	r2, [pc, #60]	; (800047c <HAL_SMBUS_MspInit+0xd4>)
 800043e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000442:	6593      	str	r3, [r2, #88]	; 0x58
 8000444:	4b0d      	ldr	r3, [pc, #52]	; (800047c <HAL_SMBUS_MspInit+0xd4>)
 8000446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000450:	2200      	movs	r2, #0
 8000452:	2100      	movs	r1, #0
 8000454:	201f      	movs	r0, #31
 8000456:	f000 fa4e 	bl	80008f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800045a:	201f      	movs	r0, #31
 800045c:	f000 fa67 	bl	800092e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000460:	2200      	movs	r2, #0
 8000462:	2100      	movs	r1, #0
 8000464:	2020      	movs	r0, #32
 8000466:	f000 fa46 	bl	80008f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800046a:	2020      	movs	r0, #32
 800046c:	f000 fa5f 	bl	800092e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000470:	bf00      	nop
 8000472:	37b0      	adds	r7, #176	; 0xb0
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40005400 	.word	0x40005400
 800047c:	40021000 	.word	0x40021000
 8000480:	48000400 	.word	0x48000400

08000484 <HAL_SMBUS_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspDeInit(SMBUS_HandleTypeDef* hsmbus)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  if(hsmbus->Instance==I2C1)
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a0d      	ldr	r2, [pc, #52]	; (80004c8 <HAL_SMBUS_MspDeInit+0x44>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d113      	bne.n	80004be <HAL_SMBUS_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000496:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <HAL_SMBUS_MspDeInit+0x48>)
 8000498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800049a:	4a0c      	ldr	r2, [pc, #48]	; (80004cc <HAL_SMBUS_MspDeInit+0x48>)
 800049c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80004a0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80004a2:	2140      	movs	r1, #64	; 0x40
 80004a4:	480a      	ldr	r0, [pc, #40]	; (80004d0 <HAL_SMBUS_MspDeInit+0x4c>)
 80004a6:	f000 fc15 	bl	8000cd4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80004aa:	2180      	movs	r1, #128	; 0x80
 80004ac:	4808      	ldr	r0, [pc, #32]	; (80004d0 <HAL_SMBUS_MspDeInit+0x4c>)
 80004ae:	f000 fc11 	bl	8000cd4 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 80004b2:	201f      	movs	r0, #31
 80004b4:	f000 fa49 	bl	800094a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 80004b8:	2020      	movs	r0, #32
 80004ba:	f000 fa46 	bl	800094a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80004be:	bf00      	nop
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	40005400 	.word	0x40005400
 80004cc:	40021000 	.word	0x40021000
 80004d0:	48000400 	.word	0x48000400

080004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <NMI_Handler+0x4>

080004da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004de:	e7fe      	b.n	80004de <HardFault_Handler+0x4>

080004e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <MemManage_Handler+0x4>

080004e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000520:	f000 f8a6 	bl	8000670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_SMBUS_EV_IRQHandler(&hsmbus1);
 800052c:	4802      	ldr	r0, [pc, #8]	; (8000538 <I2C1_EV_IRQHandler+0x10>)
 800052e:	f002 fcb1 	bl	8002e94 <HAL_SMBUS_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	20000030 	.word	0x20000030

0800053c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_SMBUS_ER_IRQHandler(&hsmbus1);
 8000540:	4802      	ldr	r0, [pc, #8]	; (800054c <I2C1_ER_IRQHandler+0x10>)
 8000542:	f002 fd45 	bl	8002fd0 <HAL_SMBUS_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	20000030 	.word	0x20000030

08000550 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <SystemInit+0x20>)
 8000556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <SystemInit+0x20>)
 800055c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000560:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000578:	f7ff ffea 	bl	8000550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800057c:	480c      	ldr	r0, [pc, #48]	; (80005b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800057e:	490d      	ldr	r1, [pc, #52]	; (80005b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000580:	4a0d      	ldr	r2, [pc, #52]	; (80005b8 <LoopForever+0xe>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000584:	e002      	b.n	800058c <LoopCopyDataInit>

08000586 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000586:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000588:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058a:	3304      	adds	r3, #4

0800058c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800058c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800058e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000590:	d3f9      	bcc.n	8000586 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000592:	4a0a      	ldr	r2, [pc, #40]	; (80005bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000594:	4c0a      	ldr	r4, [pc, #40]	; (80005c0 <LoopForever+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000598:	e001      	b.n	800059e <LoopFillZerobss>

0800059a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800059c:	3204      	adds	r2, #4

0800059e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800059e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a0:	d3fb      	bcc.n	800059a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005a2:	f004 fcad 	bl	8004f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005a6:	f7ff fe0f 	bl	80001c8 <main>

080005aa <LoopForever>:

LoopForever:
    b LoopForever
 80005aa:	e7fe      	b.n	80005aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005ac:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80005b8:	08005294 	.word	0x08005294
  ldr r2, =_sbss
 80005bc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80005c0:	200000e0 	.word	0x200000e0

080005c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005c4:	e7fe      	b.n	80005c4 <ADC1_2_IRQHandler>

080005c6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005cc:	2300      	movs	r3, #0
 80005ce:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d0:	2003      	movs	r0, #3
 80005d2:	f000 f985 	bl	80008e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005d6:	200f      	movs	r0, #15
 80005d8:	f000 f80e 	bl	80005f8 <HAL_InitTick>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d002      	beq.n	80005e8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	71fb      	strb	r3, [r7, #7]
 80005e6:	e001      	b.n	80005ec <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005e8:	f7ff feba 	bl	8000360 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005ec:	79fb      	ldrb	r3, [r7, #7]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3708      	adds	r7, #8
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
	...

080005f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000600:	2300      	movs	r3, #0
 8000602:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000604:	4b17      	ldr	r3, [pc, #92]	; (8000664 <HAL_InitTick+0x6c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d023      	beq.n	8000654 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <HAL_InitTick+0x70>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b14      	ldr	r3, [pc, #80]	; (8000664 <HAL_InitTick+0x6c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f99f 	bl	8000966 <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d10f      	bne.n	800064e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d809      	bhi.n	8000648 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f04f 30ff 	mov.w	r0, #4294967295
 800063c:	f000 f95b 	bl	80008f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000640:	4a0a      	ldr	r2, [pc, #40]	; (800066c <HAL_InitTick+0x74>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	e007      	b.n	8000658 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000648:	2301      	movs	r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
 800064c:	e004      	b.n	8000658 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800064e:	2301      	movs	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
 8000652:	e001      	b.n	8000658 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000654:	2301      	movs	r3, #1
 8000656:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000658:	7bfb      	ldrb	r3, [r7, #15]
}
 800065a:	4618      	mov	r0, r3
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000008 	.word	0x20000008
 8000668:	20000000 	.word	0x20000000
 800066c:	20000004 	.word	0x20000004

08000670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000674:	4b06      	ldr	r3, [pc, #24]	; (8000690 <HAL_IncTick+0x20>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	461a      	mov	r2, r3
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <HAL_IncTick+0x24>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	4413      	add	r3, r2
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <HAL_IncTick+0x24>)
 8000682:	6013      	str	r3, [r2, #0]
}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000008 	.word	0x20000008
 8000694:	20000080 	.word	0x20000080

08000698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  return uwTick;
 800069c:	4b03      	ldr	r3, [pc, #12]	; (80006ac <HAL_GetTick+0x14>)
 800069e:	681b      	ldr	r3, [r3, #0]
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000080 	.word	0x20000080

080006b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006b8:	f7ff ffee 	bl	8000698 <HAL_GetTick>
 80006bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006c8:	d005      	beq.n	80006d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006ca:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <HAL_Delay+0x44>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	461a      	mov	r2, r3
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	4413      	add	r3, r2
 80006d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006d6:	bf00      	nop
 80006d8:	f7ff ffde 	bl	8000698 <HAL_GetTick>
 80006dc:	4602      	mov	r2, r0
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	1ad3      	subs	r3, r2, r3
 80006e2:	68fa      	ldr	r2, [r7, #12]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d8f7      	bhi.n	80006d8 <HAL_Delay+0x28>
  {
  }
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000008 	.word	0x20000008

080006f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000708:	4b0c      	ldr	r3, [pc, #48]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800070a:	68db      	ldr	r3, [r3, #12]
 800070c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000714:	4013      	ands	r3, r2
 8000716:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000720:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000728:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072a:	4a04      	ldr	r2, [pc, #16]	; (800073c <__NVIC_SetPriorityGrouping+0x44>)
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	60d3      	str	r3, [r2, #12]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <__NVIC_GetPriorityGrouping+0x18>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	f003 0307 	and.w	r3, r3, #7
}
 800074e:	4618      	mov	r0, r3
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	4603      	mov	r3, r0
 8000764:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	db0b      	blt.n	8000786 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	f003 021f 	and.w	r2, r3, #31
 8000774:	4907      	ldr	r1, [pc, #28]	; (8000794 <__NVIC_EnableIRQ+0x38>)
 8000776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077a:	095b      	lsrs	r3, r3, #5
 800077c:	2001      	movs	r0, #1
 800077e:	fa00 f202 	lsl.w	r2, r0, r2
 8000782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000e100 	.word	0xe000e100

08000798 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	db12      	blt.n	80007d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f003 021f 	and.w	r2, r3, #31
 80007b0:	490a      	ldr	r1, [pc, #40]	; (80007dc <__NVIC_DisableIRQ+0x44>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	095b      	lsrs	r3, r3, #5
 80007b8:	2001      	movs	r0, #1
 80007ba:	fa00 f202 	lsl.w	r2, r0, r2
 80007be:	3320      	adds	r3, #32
 80007c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80007c4:	f3bf 8f4f 	dsb	sy
}
 80007c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80007ca:	f3bf 8f6f 	isb	sy
}
 80007ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	e000e100 	.word	0xe000e100

080007e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db0a      	blt.n	800080a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	490c      	ldr	r1, [pc, #48]	; (800082c <__NVIC_SetPriority+0x4c>)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	0112      	lsls	r2, r2, #4
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	440b      	add	r3, r1
 8000804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000808:	e00a      	b.n	8000820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4908      	ldr	r1, [pc, #32]	; (8000830 <__NVIC_SetPriority+0x50>)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	f003 030f 	and.w	r3, r3, #15
 8000816:	3b04      	subs	r3, #4
 8000818:	0112      	lsls	r2, r2, #4
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	440b      	add	r3, r1
 800081e:	761a      	strb	r2, [r3, #24]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000e100 	.word	0xe000e100
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000834:	b480      	push	{r7}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	f1c3 0307 	rsb	r3, r3, #7
 800084e:	2b04      	cmp	r3, #4
 8000850:	bf28      	it	cs
 8000852:	2304      	movcs	r3, #4
 8000854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3304      	adds	r3, #4
 800085a:	2b06      	cmp	r3, #6
 800085c:	d902      	bls.n	8000864 <NVIC_EncodePriority+0x30>
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3b03      	subs	r3, #3
 8000862:	e000      	b.n	8000866 <NVIC_EncodePriority+0x32>
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	f04f 32ff 	mov.w	r2, #4294967295
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43da      	mvns	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	401a      	ands	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800087c:	f04f 31ff 	mov.w	r1, #4294967295
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fa01 f303 	lsl.w	r3, r1, r3
 8000886:	43d9      	mvns	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	4313      	orrs	r3, r2
         );
}
 800088e:	4618      	mov	r0, r3
 8000890:	3724      	adds	r7, #36	; 0x24
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008ac:	d301      	bcc.n	80008b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00f      	b.n	80008d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <SysTick_Config+0x40>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ba:	210f      	movs	r1, #15
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f7ff ff8e 	bl	80007e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <SysTick_Config+0x40>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <SysTick_Config+0x40>)
 80008cc:	2207      	movs	r2, #7
 80008ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	e000e010 	.word	0xe000e010

080008e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ff05 	bl	80006f8 <__NVIC_SetPriorityGrouping>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b086      	sub	sp, #24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000908:	f7ff ff1a 	bl	8000740 <__NVIC_GetPriorityGrouping>
 800090c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	68b9      	ldr	r1, [r7, #8]
 8000912:	6978      	ldr	r0, [r7, #20]
 8000914:	f7ff ff8e 	bl	8000834 <NVIC_EncodePriority>
 8000918:	4602      	mov	r2, r0
 800091a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff5d 	bl	80007e0 <__NVIC_SetPriority>
}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff0d 	bl	800075c <__NVIC_EnableIRQ>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8000954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff1d 	bl	8000798 <__NVIC_DisableIRQ>
}
 800095e:	bf00      	nop
 8000960:	3708      	adds	r7, #8
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}

08000966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	b082      	sub	sp, #8
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096e:	6878      	ldr	r0, [r7, #4]
 8000970:	f7ff ff94 	bl	800089c <SysTick_Config>
 8000974:	4603      	mov	r3, r0
}
 8000976:	4618      	mov	r0, r3
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
	...

08000980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000980:	b480      	push	{r7}
 8000982:	b087      	sub	sp, #28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800098e:	e17f      	b.n	8000c90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	2101      	movs	r1, #1
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	4013      	ands	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 8171 	beq.w	8000c8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d005      	beq.n	80009c0 <HAL_GPIO_Init+0x40>
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	685b      	ldr	r3, [r3, #4]
 80009b8:	f003 0303 	and.w	r3, r3, #3
 80009bc:	2b02      	cmp	r3, #2
 80009be:	d130      	bne.n	8000a22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	2203      	movs	r2, #3
 80009cc:	fa02 f303 	lsl.w	r3, r2, r3
 80009d0:	43db      	mvns	r3, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4013      	ands	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	68da      	ldr	r2, [r3, #12]
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80009f6:	2201      	movs	r2, #1
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	091b      	lsrs	r3, r3, #4
 8000a0c:	f003 0201 	and.w	r2, r3, #1
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f003 0303 	and.w	r3, r3, #3
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d118      	bne.n	8000a60 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a34:	2201      	movs	r2, #1
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3c:	43db      	mvns	r3, r3
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	4013      	ands	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	685b      	ldr	r3, [r3, #4]
 8000a48:	08db      	lsrs	r3, r3, #3
 8000a4a:	f003 0201 	and.w	r2, r3, #1
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	f003 0303 	and.w	r3, r3, #3
 8000a68:	2b03      	cmp	r3, #3
 8000a6a:	d017      	beq.n	8000a9c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	2203      	movs	r2, #3
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	689a      	ldr	r2, [r3, #8]
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d123      	bne.n	8000af0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	08da      	lsrs	r2, r3, #3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3208      	adds	r2, #8
 8000ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	f003 0307 	and.w	r3, r3, #7
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	220f      	movs	r2, #15
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	691a      	ldr	r2, [r3, #16]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	08da      	lsrs	r2, r3, #3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	3208      	adds	r2, #8
 8000aea:	6939      	ldr	r1, [r7, #16]
 8000aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	2203      	movs	r2, #3
 8000afc:	fa02 f303 	lsl.w	r3, r2, r3
 8000b00:	43db      	mvns	r3, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4013      	ands	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f003 0203 	and.w	r2, r3, #3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	fa02 f303 	lsl.w	r3, r2, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	693a      	ldr	r2, [r7, #16]
 8000b22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	f000 80ac 	beq.w	8000c8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b5f      	ldr	r3, [pc, #380]	; (8000cb0 <HAL_GPIO_Init+0x330>)
 8000b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b36:	4a5e      	ldr	r2, [pc, #376]	; (8000cb0 <HAL_GPIO_Init+0x330>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b3e:	4b5c      	ldr	r3, [pc, #368]	; (8000cb0 <HAL_GPIO_Init+0x330>)
 8000b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b4a:	4a5a      	ldr	r2, [pc, #360]	; (8000cb4 <HAL_GPIO_Init+0x334>)
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	089b      	lsrs	r3, r3, #2
 8000b50:	3302      	adds	r3, #2
 8000b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	f003 0303 	and.w	r3, r3, #3
 8000b5e:	009b      	lsls	r3, r3, #2
 8000b60:	220f      	movs	r2, #15
 8000b62:	fa02 f303 	lsl.w	r3, r2, r3
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b74:	d025      	beq.n	8000bc2 <HAL_GPIO_Init+0x242>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a4f      	ldr	r2, [pc, #316]	; (8000cb8 <HAL_GPIO_Init+0x338>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d01f      	beq.n	8000bbe <HAL_GPIO_Init+0x23e>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a4e      	ldr	r2, [pc, #312]	; (8000cbc <HAL_GPIO_Init+0x33c>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d019      	beq.n	8000bba <HAL_GPIO_Init+0x23a>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4a4d      	ldr	r2, [pc, #308]	; (8000cc0 <HAL_GPIO_Init+0x340>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d013      	beq.n	8000bb6 <HAL_GPIO_Init+0x236>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	4a4c      	ldr	r2, [pc, #304]	; (8000cc4 <HAL_GPIO_Init+0x344>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d00d      	beq.n	8000bb2 <HAL_GPIO_Init+0x232>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a4b      	ldr	r2, [pc, #300]	; (8000cc8 <HAL_GPIO_Init+0x348>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d007      	beq.n	8000bae <HAL_GPIO_Init+0x22e>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4a4a      	ldr	r2, [pc, #296]	; (8000ccc <HAL_GPIO_Init+0x34c>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d101      	bne.n	8000baa <HAL_GPIO_Init+0x22a>
 8000ba6:	2306      	movs	r3, #6
 8000ba8:	e00c      	b.n	8000bc4 <HAL_GPIO_Init+0x244>
 8000baa:	2307      	movs	r3, #7
 8000bac:	e00a      	b.n	8000bc4 <HAL_GPIO_Init+0x244>
 8000bae:	2305      	movs	r3, #5
 8000bb0:	e008      	b.n	8000bc4 <HAL_GPIO_Init+0x244>
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	e006      	b.n	8000bc4 <HAL_GPIO_Init+0x244>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e004      	b.n	8000bc4 <HAL_GPIO_Init+0x244>
 8000bba:	2302      	movs	r3, #2
 8000bbc:	e002      	b.n	8000bc4 <HAL_GPIO_Init+0x244>
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <HAL_GPIO_Init+0x244>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	697a      	ldr	r2, [r7, #20]
 8000bc6:	f002 0203 	and.w	r2, r2, #3
 8000bca:	0092      	lsls	r2, r2, #2
 8000bcc:	4093      	lsls	r3, r2
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bd4:	4937      	ldr	r1, [pc, #220]	; (8000cb4 <HAL_GPIO_Init+0x334>)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	089b      	lsrs	r3, r3, #2
 8000bda:	3302      	adds	r3, #2
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000be2:	4b3b      	ldr	r3, [pc, #236]	; (8000cd0 <HAL_GPIO_Init+0x350>)
 8000be4:	689b      	ldr	r3, [r3, #8]
 8000be6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	43db      	mvns	r3, r3
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d003      	beq.n	8000c06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c06:	4a32      	ldr	r2, [pc, #200]	; (8000cd0 <HAL_GPIO_Init+0x350>)
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c0c:	4b30      	ldr	r3, [pc, #192]	; (8000cd0 <HAL_GPIO_Init+0x350>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d003      	beq.n	8000c30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c30:	4a27      	ldr	r2, [pc, #156]	; (8000cd0 <HAL_GPIO_Init+0x350>)
 8000c32:	693b      	ldr	r3, [r7, #16]
 8000c34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <HAL_GPIO_Init+0x350>)
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c5a:	4a1d      	ldr	r2, [pc, #116]	; (8000cd0 <HAL_GPIO_Init+0x350>)
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <HAL_GPIO_Init+0x350>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <HAL_GPIO_Init+0x350>)
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	f47f ae78 	bne.w	8000990 <HAL_GPIO_Init+0x10>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	bf00      	nop
 8000ca4:	371c      	adds	r7, #28
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	40010000 	.word	0x40010000
 8000cb8:	48000400 	.word	0x48000400
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	48000c00 	.word	0x48000c00
 8000cc4:	48001000 	.word	0x48001000
 8000cc8:	48001400 	.word	0x48001400
 8000ccc:	48001800 	.word	0x48001800
 8000cd0:	40010400 	.word	0x40010400

08000cd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b087      	sub	sp, #28
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000ce2:	e0cd      	b.n	8000e80 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	683a      	ldr	r2, [r7, #0]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f000 80c0 	beq.w	8000e7a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000cfa:	4a68      	ldr	r2, [pc, #416]	; (8000e9c <HAL_GPIO_DeInit+0x1c8>)
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	089b      	lsrs	r3, r3, #2
 8000d00:	3302      	adds	r3, #2
 8000d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d06:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	f003 0303 	and.w	r3, r3, #3
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	220f      	movs	r2, #15
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	68fa      	ldr	r2, [r7, #12]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d22:	d025      	beq.n	8000d70 <HAL_GPIO_DeInit+0x9c>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4a5e      	ldr	r2, [pc, #376]	; (8000ea0 <HAL_GPIO_DeInit+0x1cc>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d01f      	beq.n	8000d6c <HAL_GPIO_DeInit+0x98>
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4a5d      	ldr	r2, [pc, #372]	; (8000ea4 <HAL_GPIO_DeInit+0x1d0>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d019      	beq.n	8000d68 <HAL_GPIO_DeInit+0x94>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a5c      	ldr	r2, [pc, #368]	; (8000ea8 <HAL_GPIO_DeInit+0x1d4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d013      	beq.n	8000d64 <HAL_GPIO_DeInit+0x90>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a5b      	ldr	r2, [pc, #364]	; (8000eac <HAL_GPIO_DeInit+0x1d8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d00d      	beq.n	8000d60 <HAL_GPIO_DeInit+0x8c>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a5a      	ldr	r2, [pc, #360]	; (8000eb0 <HAL_GPIO_DeInit+0x1dc>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d007      	beq.n	8000d5c <HAL_GPIO_DeInit+0x88>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a59      	ldr	r2, [pc, #356]	; (8000eb4 <HAL_GPIO_DeInit+0x1e0>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d101      	bne.n	8000d58 <HAL_GPIO_DeInit+0x84>
 8000d54:	2306      	movs	r3, #6
 8000d56:	e00c      	b.n	8000d72 <HAL_GPIO_DeInit+0x9e>
 8000d58:	2307      	movs	r3, #7
 8000d5a:	e00a      	b.n	8000d72 <HAL_GPIO_DeInit+0x9e>
 8000d5c:	2305      	movs	r3, #5
 8000d5e:	e008      	b.n	8000d72 <HAL_GPIO_DeInit+0x9e>
 8000d60:	2304      	movs	r3, #4
 8000d62:	e006      	b.n	8000d72 <HAL_GPIO_DeInit+0x9e>
 8000d64:	2303      	movs	r3, #3
 8000d66:	e004      	b.n	8000d72 <HAL_GPIO_DeInit+0x9e>
 8000d68:	2302      	movs	r3, #2
 8000d6a:	e002      	b.n	8000d72 <HAL_GPIO_DeInit+0x9e>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e000      	b.n	8000d72 <HAL_GPIO_DeInit+0x9e>
 8000d70:	2300      	movs	r3, #0
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	f002 0203 	and.w	r2, r2, #3
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	4093      	lsls	r3, r2
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d132      	bne.n	8000de8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000d82:	4b4d      	ldr	r3, [pc, #308]	; (8000eb8 <HAL_GPIO_DeInit+0x1e4>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	494b      	ldr	r1, [pc, #300]	; (8000eb8 <HAL_GPIO_DeInit+0x1e4>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8000d90:	4b49      	ldr	r3, [pc, #292]	; (8000eb8 <HAL_GPIO_DeInit+0x1e4>)
 8000d92:	685a      	ldr	r2, [r3, #4]
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	4947      	ldr	r1, [pc, #284]	; (8000eb8 <HAL_GPIO_DeInit+0x1e4>)
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8000d9e:	4b46      	ldr	r3, [pc, #280]	; (8000eb8 <HAL_GPIO_DeInit+0x1e4>)
 8000da0:	68da      	ldr	r2, [r3, #12]
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	4944      	ldr	r1, [pc, #272]	; (8000eb8 <HAL_GPIO_DeInit+0x1e4>)
 8000da8:	4013      	ands	r3, r2
 8000daa:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8000dac:	4b42      	ldr	r3, [pc, #264]	; (8000eb8 <HAL_GPIO_DeInit+0x1e4>)
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	43db      	mvns	r3, r3
 8000db4:	4940      	ldr	r1, [pc, #256]	; (8000eb8 <HAL_GPIO_DeInit+0x1e4>)
 8000db6:	4013      	ands	r3, r2
 8000db8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	220f      	movs	r2, #15
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000dca:	4a34      	ldr	r2, [pc, #208]	; (8000e9c <HAL_GPIO_DeInit+0x1c8>)
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43da      	mvns	r2, r3
 8000dda:	4830      	ldr	r0, [pc, #192]	; (8000e9c <HAL_GPIO_DeInit+0x1c8>)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	089b      	lsrs	r3, r3, #2
 8000de0:	400a      	ands	r2, r1
 8000de2:	3302      	adds	r3, #2
 8000de4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2103      	movs	r1, #3
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	431a      	orrs	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	08d2      	lsrs	r2, r2, #3
 8000e1c:	4019      	ands	r1, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3208      	adds	r2, #8
 8000e22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2103      	movs	r1, #3
 8000e30:	fa01 f303 	lsl.w	r3, r1, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	401a      	ands	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	2101      	movs	r1, #1
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	fa01 f303 	lsl.w	r3, r1, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2103      	movs	r1, #3
 8000e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	401a      	ands	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	401a      	ands	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000e80:	683a      	ldr	r2, [r7, #0]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa22 f303 	lsr.w	r3, r2, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f47f af2b 	bne.w	8000ce4 <HAL_GPIO_DeInit+0x10>
  }
}
 8000e8e:	bf00      	nop
 8000e90:	bf00      	nop
 8000e92:	371c      	adds	r7, #28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	40010000 	.word	0x40010000
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	48000800 	.word	0x48000800
 8000ea8:	48000c00 	.word	0x48000c00
 8000eac:	48001000 	.word	0x48001000
 8000eb0:	48001400 	.word	0x48001400
 8000eb4:	48001800 	.word	0x48001800
 8000eb8:	40010400 	.word	0x40010400

08000ebc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	40007000 	.word	0x40007000

08000ed8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ee6:	d130      	bne.n	8000f4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ee8:	4b23      	ldr	r3, [pc, #140]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ef4:	d038      	beq.n	8000f68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000efe:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f06:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	2232      	movs	r2, #50	; 0x32
 8000f0c:	fb02 f303 	mul.w	r3, r2, r3
 8000f10:	4a1b      	ldr	r2, [pc, #108]	; (8000f80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f12:	fba2 2303 	umull	r2, r3, r2, r3
 8000f16:	0c9b      	lsrs	r3, r3, #18
 8000f18:	3301      	adds	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f1c:	e002      	b.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f26:	695b      	ldr	r3, [r3, #20]
 8000f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f30:	d102      	bne.n	8000f38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d1f2      	bne.n	8000f1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f3a:	695b      	ldr	r3, [r3, #20]
 8000f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f44:	d110      	bne.n	8000f68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e00f      	b.n	8000f6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f56:	d007      	beq.n	8000f68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f60:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40007000 	.word	0x40007000
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	431bde83 	.word	0x431bde83

08000f84 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e3ca      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f96:	4b97      	ldr	r3, [pc, #604]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	f003 030c 	and.w	r3, r3, #12
 8000f9e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fa0:	4b94      	ldr	r3, [pc, #592]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f003 0310 	and.w	r3, r3, #16
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f000 80e4 	beq.w	8001180 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <HAL_RCC_OscConfig+0x4a>
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2b0c      	cmp	r3, #12
 8000fc2:	f040 808b 	bne.w	80010dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	f040 8087 	bne.w	80010dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000fce:	4b89      	ldr	r3, [pc, #548]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x62>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d101      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e3a2      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a1a      	ldr	r2, [r3, #32]
 8000fea:	4b82      	ldr	r3, [pc, #520]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d004      	beq.n	8001000 <HAL_RCC_OscConfig+0x7c>
 8000ff6:	4b7f      	ldr	r3, [pc, #508]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ffe:	e005      	b.n	800100c <HAL_RCC_OscConfig+0x88>
 8001000:	4b7c      	ldr	r3, [pc, #496]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800100c:	4293      	cmp	r3, r2
 800100e:	d223      	bcs.n	8001058 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4618      	mov	r0, r3
 8001016:	f000 fd1d 	bl	8001a54 <RCC_SetFlashLatencyFromMSIRange>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e383      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001024:	4b73      	ldr	r3, [pc, #460]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a72      	ldr	r2, [pc, #456]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 800102a:	f043 0308 	orr.w	r3, r3, #8
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b70      	ldr	r3, [pc, #448]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	496d      	ldr	r1, [pc, #436]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 800103e:	4313      	orrs	r3, r2
 8001040:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001042:	4b6c      	ldr	r3, [pc, #432]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	4968      	ldr	r1, [pc, #416]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001052:	4313      	orrs	r3, r2
 8001054:	604b      	str	r3, [r1, #4]
 8001056:	e025      	b.n	80010a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001058:	4b66      	ldr	r3, [pc, #408]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a65      	ldr	r2, [pc, #404]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 800105e:	f043 0308 	orr.w	r3, r3, #8
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b63      	ldr	r3, [pc, #396]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4960      	ldr	r1, [pc, #384]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001072:	4313      	orrs	r3, r2
 8001074:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001076:	4b5f      	ldr	r3, [pc, #380]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	021b      	lsls	r3, r3, #8
 8001084:	495b      	ldr	r1, [pc, #364]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001086:	4313      	orrs	r3, r2
 8001088:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d109      	bne.n	80010a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4618      	mov	r0, r3
 8001096:	f000 fcdd 	bl	8001a54 <RCC_SetFlashLatencyFromMSIRange>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e343      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80010a4:	f000 fc4a 	bl	800193c <HAL_RCC_GetSysClockFreq>
 80010a8:	4602      	mov	r2, r0
 80010aa:	4b52      	ldr	r3, [pc, #328]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	091b      	lsrs	r3, r3, #4
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	4950      	ldr	r1, [pc, #320]	; (80011f8 <HAL_RCC_OscConfig+0x274>)
 80010b6:	5ccb      	ldrb	r3, [r1, r3]
 80010b8:	f003 031f 	and.w	r3, r3, #31
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	4a4e      	ldr	r2, [pc, #312]	; (80011fc <HAL_RCC_OscConfig+0x278>)
 80010c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80010c4:	4b4e      	ldr	r3, [pc, #312]	; (8001200 <HAL_RCC_OscConfig+0x27c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa95 	bl	80005f8 <HAL_InitTick>
 80010ce:	4603      	mov	r3, r0
 80010d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d052      	beq.n	800117e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	e327      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d032      	beq.n	800114a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80010e4:	4b43      	ldr	r3, [pc, #268]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a42      	ldr	r2, [pc, #264]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80010f0:	f7ff fad2 	bl	8000698 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010f8:	f7ff face 	bl	8000698 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b02      	cmp	r3, #2
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e310      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800110a:	4b3a      	ldr	r3, [pc, #232]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001116:	4b37      	ldr	r3, [pc, #220]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a36      	ldr	r2, [pc, #216]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 800111c:	f043 0308 	orr.w	r3, r3, #8
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a1b      	ldr	r3, [r3, #32]
 800112e:	4931      	ldr	r1, [pc, #196]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001130:	4313      	orrs	r3, r2
 8001132:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001134:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	492c      	ldr	r1, [pc, #176]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001144:	4313      	orrs	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
 8001148:	e01a      	b.n	8001180 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800114a:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a29      	ldr	r2, [pc, #164]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001150:	f023 0301 	bic.w	r3, r3, #1
 8001154:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001156:	f7ff fa9f 	bl	8000698 <HAL_GetTick>
 800115a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800115e:	f7ff fa9b 	bl	8000698 <HAL_GetTick>
 8001162:	4602      	mov	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e2dd      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d1f0      	bne.n	800115e <HAL_RCC_OscConfig+0x1da>
 800117c:	e000      	b.n	8001180 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800117e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d074      	beq.n	8001276 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	2b08      	cmp	r3, #8
 8001190:	d005      	beq.n	800119e <HAL_RCC_OscConfig+0x21a>
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2b0c      	cmp	r3, #12
 8001196:	d10e      	bne.n	80011b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	2b03      	cmp	r3, #3
 800119c:	d10b      	bne.n	80011b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800119e:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d064      	beq.n	8001274 <HAL_RCC_OscConfig+0x2f0>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d160      	bne.n	8001274 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e2ba      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011be:	d106      	bne.n	80011ce <HAL_RCC_OscConfig+0x24a>
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 80011c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	e026      	b.n	800121c <HAL_RCC_OscConfig+0x298>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011d6:	d115      	bne.n	8001204 <HAL_RCC_OscConfig+0x280>
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a05      	ldr	r2, [pc, #20]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 80011de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a02      	ldr	r2, [pc, #8]	; (80011f4 <HAL_RCC_OscConfig+0x270>)
 80011ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ee:	6013      	str	r3, [r2, #0]
 80011f0:	e014      	b.n	800121c <HAL_RCC_OscConfig+0x298>
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	08004f60 	.word	0x08004f60
 80011fc:	20000000 	.word	0x20000000
 8001200:	20000004 	.word	0x20000004
 8001204:	4ba0      	ldr	r3, [pc, #640]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a9f      	ldr	r2, [pc, #636]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 800120a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b9d      	ldr	r3, [pc, #628]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a9c      	ldr	r2, [pc, #624]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d013      	beq.n	800124c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fa38 	bl	8000698 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff fa34 	bl	8000698 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	; 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e276      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800123e:	4b92      	ldr	r3, [pc, #584]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0x2a8>
 800124a:	e014      	b.n	8001276 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124c:	f7ff fa24 	bl	8000698 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fa20 	bl	8000698 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e262      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001266:	4b88      	ldr	r3, [pc, #544]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x2d0>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d060      	beq.n	8001344 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b04      	cmp	r3, #4
 8001286:	d005      	beq.n	8001294 <HAL_RCC_OscConfig+0x310>
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b0c      	cmp	r3, #12
 800128c:	d119      	bne.n	80012c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d116      	bne.n	80012c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001294:	4b7c      	ldr	r3, [pc, #496]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <HAL_RCC_OscConfig+0x328>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e23f      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4b76      	ldr	r3, [pc, #472]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	061b      	lsls	r3, r3, #24
 80012ba:	4973      	ldr	r1, [pc, #460]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012c0:	e040      	b.n	8001344 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d023      	beq.n	8001312 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ca:	4b6f      	ldr	r3, [pc, #444]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6e      	ldr	r2, [pc, #440]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d6:	f7ff f9df 	bl	8000698 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012dc:	e008      	b.n	80012f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012de:	f7ff f9db 	bl	8000698 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d901      	bls.n	80012f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80012ec:	2303      	movs	r3, #3
 80012ee:	e21d      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012f0:	4b65      	ldr	r3, [pc, #404]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d0f0      	beq.n	80012de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fc:	4b62      	ldr	r3, [pc, #392]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	691b      	ldr	r3, [r3, #16]
 8001308:	061b      	lsls	r3, r3, #24
 800130a:	495f      	ldr	r1, [pc, #380]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 800130c:	4313      	orrs	r3, r2
 800130e:	604b      	str	r3, [r1, #4]
 8001310:	e018      	b.n	8001344 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001312:	4b5d      	ldr	r3, [pc, #372]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a5c      	ldr	r2, [pc, #368]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001318:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800131c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800131e:	f7ff f9bb 	bl	8000698 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001326:	f7ff f9b7 	bl	8000698 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e1f9      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001338:	4b53      	ldr	r3, [pc, #332]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b00      	cmp	r3, #0
 800134e:	d03c      	beq.n	80013ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	695b      	ldr	r3, [r3, #20]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01c      	beq.n	8001392 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001358:	4b4b      	ldr	r3, [pc, #300]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 800135a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800135e:	4a4a      	ldr	r2, [pc, #296]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001368:	f7ff f996 	bl	8000698 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001370:	f7ff f992 	bl	8000698 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1d4      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001382:	4b41      	ldr	r3, [pc, #260]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d0ef      	beq.n	8001370 <HAL_RCC_OscConfig+0x3ec>
 8001390:	e01b      	b.n	80013ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001392:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001394:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001398:	4a3b      	ldr	r2, [pc, #236]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 800139a:	f023 0301 	bic.w	r3, r3, #1
 800139e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a2:	f7ff f979 	bl	8000698 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013aa:	f7ff f975 	bl	8000698 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e1b7      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013bc:	4b32      	ldr	r3, [pc, #200]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 80013be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1ef      	bne.n	80013aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f000 80a6 	beq.w	8001524 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80013dc:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 80013de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d10d      	bne.n	8001404 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	4b27      	ldr	r3, [pc, #156]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 80013ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ec:	4a26      	ldr	r2, [pc, #152]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 80013ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f2:	6593      	str	r3, [r2, #88]	; 0x58
 80013f4:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 80013f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001400:	2301      	movs	r3, #1
 8001402:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <HAL_RCC_OscConfig+0x508>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140c:	2b00      	cmp	r3, #0
 800140e:	d118      	bne.n	8001442 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <HAL_RCC_OscConfig+0x508>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a1d      	ldr	r2, [pc, #116]	; (800148c <HAL_RCC_OscConfig+0x508>)
 8001416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800141a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141c:	f7ff f93c 	bl	8000698 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001424:	f7ff f938 	bl	8000698 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e17a      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_RCC_OscConfig+0x508>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d108      	bne.n	800145c <HAL_RCC_OscConfig+0x4d8>
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 800144c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800145a:	e029      	b.n	80014b0 <HAL_RCC_OscConfig+0x52c>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2b05      	cmp	r3, #5
 8001462:	d115      	bne.n	8001490 <HAL_RCC_OscConfig+0x50c>
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 8001476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800147a:	4a03      	ldr	r2, [pc, #12]	; (8001488 <HAL_RCC_OscConfig+0x504>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001484:	e014      	b.n	80014b0 <HAL_RCC_OscConfig+0x52c>
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	40007000 	.word	0x40007000
 8001490:	4b9c      	ldr	r3, [pc, #624]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 8001492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001496:	4a9b      	ldr	r2, [pc, #620]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014a0:	4b98      	ldr	r3, [pc, #608]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80014a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014a6:	4a97      	ldr	r2, [pc, #604]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80014a8:	f023 0304 	bic.w	r3, r3, #4
 80014ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d016      	beq.n	80014e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b8:	f7ff f8ee 	bl	8000698 <HAL_GetTick>
 80014bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014be:	e00a      	b.n	80014d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014c0:	f7ff f8ea 	bl	8000698 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e12a      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80014d6:	4b8b      	ldr	r3, [pc, #556]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80014d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0ed      	beq.n	80014c0 <HAL_RCC_OscConfig+0x53c>
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e6:	f7ff f8d7 	bl	8000698 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80014ec:	e00a      	b.n	8001504 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ee:	f7ff f8d3 	bl	8000698 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e113      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001504:	4b7f      	ldr	r3, [pc, #508]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 8001506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1ed      	bne.n	80014ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001512:	7ffb      	ldrb	r3, [r7, #31]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d105      	bne.n	8001524 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001518:	4b7a      	ldr	r3, [pc, #488]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 800151a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151c:	4a79      	ldr	r2, [pc, #484]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 800151e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001522:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 80fe 	beq.w	800172a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	2b02      	cmp	r3, #2
 8001534:	f040 80d0 	bne.w	80016d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001538:	4b72      	ldr	r3, [pc, #456]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f003 0203 	and.w	r2, r3, #3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001548:	429a      	cmp	r2, r3
 800154a:	d130      	bne.n	80015ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	3b01      	subs	r3, #1
 8001558:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800155a:	429a      	cmp	r2, r3
 800155c:	d127      	bne.n	80015ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001568:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800156a:	429a      	cmp	r2, r3
 800156c:	d11f      	bne.n	80015ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001578:	2a07      	cmp	r2, #7
 800157a:	bf14      	ite	ne
 800157c:	2201      	movne	r2, #1
 800157e:	2200      	moveq	r2, #0
 8001580:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001582:	4293      	cmp	r3, r2
 8001584:	d113      	bne.n	80015ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001590:	085b      	lsrs	r3, r3, #1
 8001592:	3b01      	subs	r3, #1
 8001594:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d109      	bne.n	80015ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	085b      	lsrs	r3, r3, #1
 80015a6:	3b01      	subs	r3, #1
 80015a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d06e      	beq.n	800168c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	2b0c      	cmp	r3, #12
 80015b2:	d069      	beq.n	8001688 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80015b4:	4b53      	ldr	r3, [pc, #332]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80015c0:	4b50      	ldr	r3, [pc, #320]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e0ad      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80015d0:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a4b      	ldr	r2, [pc, #300]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80015d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015dc:	f7ff f85c 	bl	8000698 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff f858 	bl	8000698 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e09a      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015f6:	4b43      	ldr	r3, [pc, #268]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001602:	4b40      	ldr	r3, [pc, #256]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 8001604:	68da      	ldr	r2, [r3, #12]
 8001606:	4b40      	ldr	r3, [pc, #256]	; (8001708 <HAL_RCC_OscConfig+0x784>)
 8001608:	4013      	ands	r3, r2
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001612:	3a01      	subs	r2, #1
 8001614:	0112      	lsls	r2, r2, #4
 8001616:	4311      	orrs	r1, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800161c:	0212      	lsls	r2, r2, #8
 800161e:	4311      	orrs	r1, r2
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001624:	0852      	lsrs	r2, r2, #1
 8001626:	3a01      	subs	r2, #1
 8001628:	0552      	lsls	r2, r2, #21
 800162a:	4311      	orrs	r1, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001630:	0852      	lsrs	r2, r2, #1
 8001632:	3a01      	subs	r2, #1
 8001634:	0652      	lsls	r2, r2, #25
 8001636:	4311      	orrs	r1, r2
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800163c:	0912      	lsrs	r2, r2, #4
 800163e:	0452      	lsls	r2, r2, #17
 8001640:	430a      	orrs	r2, r1
 8001642:	4930      	ldr	r1, [pc, #192]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 8001644:	4313      	orrs	r3, r2
 8001646:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001648:	4b2e      	ldr	r3, [pc, #184]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a2d      	ldr	r2, [pc, #180]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 800164e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001652:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001654:	4b2b      	ldr	r3, [pc, #172]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	4a2a      	ldr	r2, [pc, #168]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 800165a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800165e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001660:	f7ff f81a 	bl	8000698 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff f816 	bl	8000698 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e058      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800167a:	4b22      	ldr	r3, [pc, #136]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001686:	e050      	b.n	800172a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e04f      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800168c:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d148      	bne.n	800172a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001698:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a19      	ldr	r2, [pc, #100]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 800169e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	4a16      	ldr	r2, [pc, #88]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80016aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80016b0:	f7fe fff2 	bl	8000698 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016b8:	f7fe ffee 	bl	8000698 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e030      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0x734>
 80016d6:	e028      	b.n	800172a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2b0c      	cmp	r3, #12
 80016dc:	d023      	beq.n	8001726 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_RCC_OscConfig+0x780>)
 80016e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7fe ffd5 	bl	8000698 <HAL_GetTick>
 80016ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016f0:	e00c      	b.n	800170c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f2:	f7fe ffd1 	bl	8000698 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d905      	bls.n	800170c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e013      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
 8001704:	40021000 	.word	0x40021000
 8001708:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_RCC_OscConfig+0x7b0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1ec      	bne.n	80016f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_RCC_OscConfig+0x7b0>)
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	4905      	ldr	r1, [pc, #20]	; (8001734 <HAL_RCC_OscConfig+0x7b0>)
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x7b4>)
 8001720:	4013      	ands	r3, r2
 8001722:	60cb      	str	r3, [r1, #12]
 8001724:	e001      	b.n	800172a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	3720      	adds	r7, #32
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	feeefffc 	.word	0xfeeefffc

0800173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0e7      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b75      	ldr	r3, [pc, #468]	; (8001928 <HAL_RCC_ClockConfig+0x1ec>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d910      	bls.n	8001780 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b72      	ldr	r3, [pc, #456]	; (8001928 <HAL_RCC_ClockConfig+0x1ec>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f023 0207 	bic.w	r2, r3, #7
 8001766:	4970      	ldr	r1, [pc, #448]	; (8001928 <HAL_RCC_ClockConfig+0x1ec>)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b6e      	ldr	r3, [pc, #440]	; (8001928 <HAL_RCC_ClockConfig+0x1ec>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0cf      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d010      	beq.n	80017ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689a      	ldr	r2, [r3, #8]
 8001790:	4b66      	ldr	r3, [pc, #408]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001798:	429a      	cmp	r2, r3
 800179a:	d908      	bls.n	80017ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b63      	ldr	r3, [pc, #396]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4960      	ldr	r1, [pc, #384]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d04c      	beq.n	8001854 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017c2:	4b5a      	ldr	r3, [pc, #360]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d121      	bne.n	8001812 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0a6      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017da:	4b54      	ldr	r3, [pc, #336]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d115      	bne.n	8001812 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e09a      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017f2:	4b4e      	ldr	r3, [pc, #312]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e08e      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001802:	4b4a      	ldr	r3, [pc, #296]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e086      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001812:	4b46      	ldr	r3, [pc, #280]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 0203 	bic.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4943      	ldr	r1, [pc, #268]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001824:	f7fe ff38 	bl	8000698 <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	e00a      	b.n	8001842 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7fe ff34 	bl	8000698 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e06e      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b3a      	ldr	r3, [pc, #232]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 020c 	and.w	r2, r3, #12
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	429a      	cmp	r2, r3
 8001852:	d1eb      	bne.n	800182c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0302 	and.w	r3, r3, #2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d010      	beq.n	8001882 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	4b31      	ldr	r3, [pc, #196]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800186c:	429a      	cmp	r2, r3
 800186e:	d208      	bcs.n	8001882 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001870:	4b2e      	ldr	r3, [pc, #184]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	492b      	ldr	r1, [pc, #172]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 800187e:	4313      	orrs	r3, r2
 8001880:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <HAL_RCC_ClockConfig+0x1ec>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d210      	bcs.n	80018b2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001890:	4b25      	ldr	r3, [pc, #148]	; (8001928 <HAL_RCC_ClockConfig+0x1ec>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 0207 	bic.w	r2, r3, #7
 8001898:	4923      	ldr	r1, [pc, #140]	; (8001928 <HAL_RCC_ClockConfig+0x1ec>)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a0:	4b21      	ldr	r3, [pc, #132]	; (8001928 <HAL_RCC_ClockConfig+0x1ec>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d001      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e036      	b.n	8001920 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d008      	beq.n	80018d0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018be:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	4918      	ldr	r1, [pc, #96]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d009      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018dc:	4b13      	ldr	r3, [pc, #76]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	4910      	ldr	r1, [pc, #64]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018f0:	f000 f824 	bl	800193c <HAL_RCC_GetSysClockFreq>
 80018f4:	4602      	mov	r2, r0
 80018f6:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	091b      	lsrs	r3, r3, #4
 80018fc:	f003 030f 	and.w	r3, r3, #15
 8001900:	490b      	ldr	r1, [pc, #44]	; (8001930 <HAL_RCC_ClockConfig+0x1f4>)
 8001902:	5ccb      	ldrb	r3, [r1, r3]
 8001904:	f003 031f 	and.w	r3, r3, #31
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
 800190c:	4a09      	ldr	r2, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1f8>)
 800190e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1fc>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe6f 	bl	80005f8 <HAL_InitTick>
 800191a:	4603      	mov	r3, r0
 800191c:	72fb      	strb	r3, [r7, #11]

  return status;
 800191e:	7afb      	ldrb	r3, [r7, #11]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40022000 	.word	0x40022000
 800192c:	40021000 	.word	0x40021000
 8001930:	08004f60 	.word	0x08004f60
 8001934:	20000000 	.word	0x20000000
 8001938:	20000004 	.word	0x20000004

0800193c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800194a:	4b3e      	ldr	r3, [pc, #248]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001954:	4b3b      	ldr	r3, [pc, #236]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_GetSysClockFreq+0x34>
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d121      	bne.n	80019ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d11e      	bne.n	80019ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001970:	4b34      	ldr	r3, [pc, #208]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d107      	bne.n	800198c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800197c:	4b31      	ldr	r3, [pc, #196]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800197e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	e005      	b.n	8001998 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800198c:	4b2d      	ldr	r3, [pc, #180]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x108>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001998:	4a2b      	ldr	r2, [pc, #172]	; (8001a48 <HAL_RCC_GetSysClockFreq+0x10c>)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10d      	bne.n	80019c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ac:	e00a      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d102      	bne.n	80019ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80019b6:	61bb      	str	r3, [r7, #24]
 80019b8:	e004      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d101      	bne.n	80019c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019c0:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x114>)
 80019c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d134      	bne.n	8001a34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d003      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0xac>
 80019e0:	e005      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80019e2:	4b1a      	ldr	r3, [pc, #104]	; (8001a4c <HAL_RCC_GetSysClockFreq+0x110>)
 80019e4:	617b      	str	r3, [r7, #20]
      break;
 80019e6:	e005      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x114>)
 80019ea:	617b      	str	r3, [r7, #20]
      break;
 80019ec:	e002      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	617b      	str	r3, [r7, #20]
      break;
 80019f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019f4:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x108>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	091b      	lsrs	r3, r3, #4
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	3301      	adds	r3, #1
 8001a00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a04:	68db      	ldr	r3, [r3, #12]
 8001a06:	0a1b      	lsrs	r3, r3, #8
 8001a08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a0c:	697a      	ldr	r2, [r7, #20]
 8001a0e:	fb03 f202 	mul.w	r2, r3, r2
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	0e5b      	lsrs	r3, r3, #25
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	3301      	adds	r3, #1
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001a34:	69bb      	ldr	r3, [r7, #24]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3724      	adds	r7, #36	; 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	08004f70 	.word	0x08004f70
 8001a4c:	00f42400 	.word	0x00f42400
 8001a50:	007a1200 	.word	0x007a1200

08001a54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a60:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d003      	beq.n	8001a74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001a6c:	f7ff fa26 	bl	8000ebc <HAL_PWREx_GetVoltageRange>
 8001a70:	6178      	str	r0, [r7, #20]
 8001a72:	e014      	b.n	8001a9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a74:	4b25      	ldr	r3, [pc, #148]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a8c:	f7ff fa16 	bl	8000ebc <HAL_PWREx_GetVoltageRange>
 8001a90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a92:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a96:	4a1d      	ldr	r2, [pc, #116]	; (8001b0c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a9c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aa4:	d10b      	bne.n	8001abe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b80      	cmp	r3, #128	; 0x80
 8001aaa:	d919      	bls.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2ba0      	cmp	r3, #160	; 0xa0
 8001ab0:	d902      	bls.n	8001ab8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	e013      	b.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ab8:	2301      	movs	r3, #1
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	e010      	b.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b80      	cmp	r3, #128	; 0x80
 8001ac2:	d902      	bls.n	8001aca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	613b      	str	r3, [r7, #16]
 8001ac8:	e00a      	b.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b80      	cmp	r3, #128	; 0x80
 8001ace:	d102      	bne.n	8001ad6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	e004      	b.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b70      	cmp	r3, #112	; 0x70
 8001ada:	d101      	bne.n	8001ae0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001adc:	2301      	movs	r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ae0:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 0207 	bic.w	r2, r3, #7
 8001ae8:	4909      	ldr	r1, [pc, #36]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001af0:	4b07      	ldr	r3, [pc, #28]	; (8001b10 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d001      	beq.n	8001b02 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40022000 	.word	0x40022000

08001b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b20:	2300      	movs	r3, #0
 8001b22:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d041      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b34:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001b38:	d02a      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001b3a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001b3e:	d824      	bhi.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001b40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b44:	d008      	beq.n	8001b58 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001b46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b4a:	d81e      	bhi.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d00a      	beq.n	8001b66 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b54:	d010      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001b56:	e018      	b.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001b58:	4b86      	ldr	r3, [pc, #536]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	4a85      	ldr	r2, [pc, #532]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b62:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b64:	e015      	b.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 fabb 	bl	80020e8 <RCCEx_PLLSAI1_Config>
 8001b72:	4603      	mov	r3, r0
 8001b74:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b76:	e00c      	b.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3320      	adds	r3, #32
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fba6 	bl	80022d0 <RCCEx_PLLSAI2_Config>
 8001b84:	4603      	mov	r3, r0
 8001b86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001b88:	e003      	b.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	74fb      	strb	r3, [r7, #19]
      break;
 8001b8e:	e000      	b.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001b90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001b92:	7cfb      	ldrb	r3, [r7, #19]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10b      	bne.n	8001bb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b98:	4b76      	ldr	r3, [pc, #472]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ba6:	4973      	ldr	r1, [pc, #460]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001bae:	e001      	b.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bb0:	7cfb      	ldrb	r3, [r7, #19]
 8001bb2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d041      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001bc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001bc8:	d02a      	beq.n	8001c20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001bca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001bce:	d824      	bhi.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bd4:	d008      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001bda:	d81e      	bhi.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be4:	d010      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001be6:	e018      	b.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001be8:	4b62      	ldr	r3, [pc, #392]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	4a61      	ldr	r2, [pc, #388]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001bee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001bf4:	e015      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f000 fa73 	bl	80020e8 <RCCEx_PLLSAI1_Config>
 8001c02:	4603      	mov	r3, r0
 8001c04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c06:	e00c      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3320      	adds	r3, #32
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fb5e 	bl	80022d0 <RCCEx_PLLSAI2_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001c18:	e003      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	74fb      	strb	r3, [r7, #19]
      break;
 8001c1e:	e000      	b.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001c20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001c22:	7cfb      	ldrb	r3, [r7, #19]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d10b      	bne.n	8001c40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c28:	4b52      	ldr	r3, [pc, #328]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c36:	494f      	ldr	r1, [pc, #316]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001c3e:	e001      	b.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c40:	7cfb      	ldrb	r3, [r7, #19]
 8001c42:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80a0 	beq.w	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c56:	4b47      	ldr	r3, [pc, #284]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001c66:	2300      	movs	r3, #0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00d      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	4a40      	ldr	r2, [pc, #256]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c76:	6593      	str	r3, [r2, #88]	; 0x58
 8001c78:	4b3e      	ldr	r3, [pc, #248]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c84:	2301      	movs	r3, #1
 8001c86:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c88:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a3a      	ldr	r2, [pc, #232]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001c8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c94:	f7fe fd00 	bl	8000698 <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001c9a:	e009      	b.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9c:	f7fe fcfc 	bl	8000698 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d902      	bls.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	74fb      	strb	r3, [r7, #19]
        break;
 8001cae:	e005      	b.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001cb0:	4b31      	ldr	r3, [pc, #196]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0ef      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001cbc:	7cfb      	ldrb	r3, [r7, #19]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d15c      	bne.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001cc2:	4b2c      	ldr	r3, [pc, #176]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ccc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01f      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cda:	697a      	ldr	r2, [r7, #20]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d019      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ce0:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cec:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf2:	4a20      	ldr	r2, [pc, #128]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d02:	4a1c      	ldr	r2, [pc, #112]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d0c:	4a19      	ldr	r2, [pc, #100]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d016      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1e:	f7fe fcbb 	bl	8000698 <HAL_GetTick>
 8001d22:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d24:	e00b      	b.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d26:	f7fe fcb7 	bl	8000698 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d902      	bls.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	74fb      	strb	r3, [r7, #19]
            break;
 8001d3c:	e006      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d0ec      	beq.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001d4c:	7cfb      	ldrb	r3, [r7, #19]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d10c      	bne.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d62:	4904      	ldr	r1, [pc, #16]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d6a:	e009      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d6c:	7cfb      	ldrb	r3, [r7, #19]
 8001d6e:	74bb      	strb	r3, [r7, #18]
 8001d70:	e006      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d7c:	7cfb      	ldrb	r3, [r7, #19]
 8001d7e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d80:	7c7b      	ldrb	r3, [r7, #17]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d86:	4b9e      	ldr	r3, [pc, #632]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	4a9d      	ldr	r2, [pc, #628]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001d8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d90:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d9e:	4b98      	ldr	r3, [pc, #608]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da4:	f023 0203 	bic.w	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dac:	4994      	ldr	r1, [pc, #592]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001dc0:	4b8f      	ldr	r3, [pc, #572]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	f023 020c 	bic.w	r2, r3, #12
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dce:	498c      	ldr	r1, [pc, #560]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001de2:	4b87      	ldr	r3, [pc, #540]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	4983      	ldr	r1, [pc, #524]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0308 	and.w	r3, r3, #8
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e04:	4b7e      	ldr	r3, [pc, #504]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	497b      	ldr	r1, [pc, #492]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0310 	and.w	r3, r3, #16
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e26:	4b76      	ldr	r3, [pc, #472]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e34:	4972      	ldr	r1, [pc, #456]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e48:	4b6d      	ldr	r3, [pc, #436]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	496a      	ldr	r1, [pc, #424]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e6a:	4b65      	ldr	r3, [pc, #404]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	4961      	ldr	r1, [pc, #388]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001e8c:	4b5c      	ldr	r3, [pc, #368]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e9a:	4959      	ldr	r1, [pc, #356]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001eae:	4b54      	ldr	r3, [pc, #336]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ebc:	4950      	ldr	r1, [pc, #320]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001ed0:	4b4b      	ldr	r3, [pc, #300]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ede:	4948      	ldr	r1, [pc, #288]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00a      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ef2:	4b43      	ldr	r3, [pc, #268]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ef4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	493f      	ldr	r1, [pc, #252]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d028      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f14:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f22:	4937      	ldr	r1, [pc, #220]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f32:	d106      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f34:	4b32      	ldr	r3, [pc, #200]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a31      	ldr	r2, [pc, #196]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f3e:	60d3      	str	r3, [r2, #12]
 8001f40:	e011      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3304      	adds	r3, #4
 8001f50:	2101      	movs	r1, #1
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f8c8 	bl	80020e8 <RCCEx_PLLSAI1_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001f5c:	7cfb      	ldrb	r3, [r7, #19]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8001f62:	7cfb      	ldrb	r3, [r7, #19]
 8001f64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d028      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f72:	4b23      	ldr	r3, [pc, #140]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f80:	491f      	ldr	r1, [pc, #124]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f90:	d106      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f92:	4b1b      	ldr	r3, [pc, #108]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	4a1a      	ldr	r2, [pc, #104]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f9c:	60d3      	str	r3, [r2, #12]
 8001f9e:	e011      	b.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2101      	movs	r1, #1
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f000 f899 	bl	80020e8 <RCCEx_PLLSAI1_Config>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001fba:	7cfb      	ldrb	r3, [r7, #19]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8001fc0:	7cfb      	ldrb	r3, [r7, #19]
 8001fc2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d02b      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fee:	d109      	bne.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ff0:	4b03      	ldr	r3, [pc, #12]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a02      	ldr	r2, [pc, #8]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001ffa:	60d3      	str	r3, [r2, #12]
 8001ffc:	e014      	b.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8001ffe:	bf00      	nop
 8002000:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002008:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800200c:	d10c      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3304      	adds	r3, #4
 8002012:	2101      	movs	r1, #1
 8002014:	4618      	mov	r0, r3
 8002016:	f000 f867 	bl	80020e8 <RCCEx_PLLSAI1_Config>
 800201a:	4603      	mov	r3, r0
 800201c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800201e:	7cfb      	ldrb	r3, [r7, #19]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002024:	7cfb      	ldrb	r3, [r7, #19]
 8002026:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d02f      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800203a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002042:	4928      	ldr	r1, [pc, #160]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002044:	4313      	orrs	r3, r2
 8002046:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800204e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002052:	d10d      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3304      	adds	r3, #4
 8002058:	2102      	movs	r1, #2
 800205a:	4618      	mov	r0, r3
 800205c:	f000 f844 	bl	80020e8 <RCCEx_PLLSAI1_Config>
 8002060:	4603      	mov	r3, r0
 8002062:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002064:	7cfb      	ldrb	r3, [r7, #19]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d014      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800206a:	7cfb      	ldrb	r3, [r7, #19]
 800206c:	74bb      	strb	r3, [r7, #18]
 800206e:	e011      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002078:	d10c      	bne.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3320      	adds	r3, #32
 800207e:	2102      	movs	r1, #2
 8002080:	4618      	mov	r0, r3
 8002082:	f000 f925 	bl	80022d0 <RCCEx_PLLSAI2_Config>
 8002086:	4603      	mov	r3, r0
 8002088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800208a:	7cfb      	ldrb	r3, [r7, #19]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002090:	7cfb      	ldrb	r3, [r7, #19]
 8002092:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00a      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020ae:	490d      	ldr	r1, [pc, #52]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d00b      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80020c2:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80020c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020d2:	4904      	ldr	r1, [pc, #16]	; (80020e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80020da:	7cbb      	ldrb	r3, [r7, #18]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000

080020e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020f6:	4b75      	ldr	r3, [pc, #468]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d018      	beq.n	8002134 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002102:	4b72      	ldr	r3, [pc, #456]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f003 0203 	and.w	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	429a      	cmp	r2, r3
 8002110:	d10d      	bne.n	800212e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
       ||
 8002116:	2b00      	cmp	r3, #0
 8002118:	d009      	beq.n	800212e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800211a:	4b6c      	ldr	r3, [pc, #432]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800211c:	68db      	ldr	r3, [r3, #12]
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
       ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d047      	beq.n	80021be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	e044      	b.n	80021be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d018      	beq.n	800216e <RCCEx_PLLSAI1_Config+0x86>
 800213c:	2b03      	cmp	r3, #3
 800213e:	d825      	bhi.n	800218c <RCCEx_PLLSAI1_Config+0xa4>
 8002140:	2b01      	cmp	r3, #1
 8002142:	d002      	beq.n	800214a <RCCEx_PLLSAI1_Config+0x62>
 8002144:	2b02      	cmp	r3, #2
 8002146:	d009      	beq.n	800215c <RCCEx_PLLSAI1_Config+0x74>
 8002148:	e020      	b.n	800218c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800214a:	4b60      	ldr	r3, [pc, #384]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d11d      	bne.n	8002192 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215a:	e01a      	b.n	8002192 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800215c:	4b5b      	ldr	r3, [pc, #364]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002164:	2b00      	cmp	r3, #0
 8002166:	d116      	bne.n	8002196 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800216c:	e013      	b.n	8002196 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800216e:	4b57      	ldr	r3, [pc, #348]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10f      	bne.n	800219a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800217a:	4b54      	ldr	r3, [pc, #336]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800218a:	e006      	b.n	800219a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	73fb      	strb	r3, [r7, #15]
      break;
 8002190:	e004      	b.n	800219c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002192:	bf00      	nop
 8002194:	e002      	b.n	800219c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002196:	bf00      	nop
 8002198:	e000      	b.n	800219c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800219a:	bf00      	nop
    }

    if(status == HAL_OK)
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10d      	bne.n	80021be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80021a2:	4b4a      	ldr	r3, [pc, #296]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6819      	ldr	r1, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	3b01      	subs	r3, #1
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	430b      	orrs	r3, r1
 80021b8:	4944      	ldr	r1, [pc, #272]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80021be:	7bfb      	ldrb	r3, [r7, #15]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d17d      	bne.n	80022c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80021c4:	4b41      	ldr	r3, [pc, #260]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a40      	ldr	r2, [pc, #256]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80021ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021d0:	f7fe fa62 	bl	8000698 <HAL_GetTick>
 80021d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021d6:	e009      	b.n	80021ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021d8:	f7fe fa5e 	bl	8000698 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d902      	bls.n	80021ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	73fb      	strb	r3, [r7, #15]
        break;
 80021ea:	e005      	b.n	80021f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021ec:	4b37      	ldr	r3, [pc, #220]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1ef      	bne.n	80021d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d160      	bne.n	80022c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d111      	bne.n	8002228 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002204:	4b31      	ldr	r3, [pc, #196]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800220c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6892      	ldr	r2, [r2, #8]
 8002214:	0211      	lsls	r1, r2, #8
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	68d2      	ldr	r2, [r2, #12]
 800221a:	0912      	lsrs	r2, r2, #4
 800221c:	0452      	lsls	r2, r2, #17
 800221e:	430a      	orrs	r2, r1
 8002220:	492a      	ldr	r1, [pc, #168]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	610b      	str	r3, [r1, #16]
 8002226:	e027      	b.n	8002278 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d112      	bne.n	8002254 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800222e:	4b27      	ldr	r3, [pc, #156]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002236:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	6892      	ldr	r2, [r2, #8]
 800223e:	0211      	lsls	r1, r2, #8
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6912      	ldr	r2, [r2, #16]
 8002244:	0852      	lsrs	r2, r2, #1
 8002246:	3a01      	subs	r2, #1
 8002248:	0552      	lsls	r2, r2, #21
 800224a:	430a      	orrs	r2, r1
 800224c:	491f      	ldr	r1, [pc, #124]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800224e:	4313      	orrs	r3, r2
 8002250:	610b      	str	r3, [r1, #16]
 8002252:	e011      	b.n	8002278 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002254:	4b1d      	ldr	r3, [pc, #116]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002256:	691b      	ldr	r3, [r3, #16]
 8002258:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800225c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6892      	ldr	r2, [r2, #8]
 8002264:	0211      	lsls	r1, r2, #8
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6952      	ldr	r2, [r2, #20]
 800226a:	0852      	lsrs	r2, r2, #1
 800226c:	3a01      	subs	r2, #1
 800226e:	0652      	lsls	r2, r2, #25
 8002270:	430a      	orrs	r2, r1
 8002272:	4916      	ldr	r1, [pc, #88]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002274:	4313      	orrs	r3, r2
 8002276:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a13      	ldr	r2, [pc, #76]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800227e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002282:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7fe fa08 	bl	8000698 <HAL_GetTick>
 8002288:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800228a:	e009      	b.n	80022a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800228c:	f7fe fa04 	bl	8000698 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d902      	bls.n	80022a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	73fb      	strb	r3, [r7, #15]
          break;
 800229e:	e005      	b.n	80022ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0ef      	beq.n	800228c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80022ac:	7bfb      	ldrb	r3, [r7, #15]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d106      	bne.n	80022c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80022b4:	691a      	ldr	r2, [r3, #16]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	4904      	ldr	r1, [pc, #16]	; (80022cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000

080022d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80022de:	4b6a      	ldr	r3, [pc, #424]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d018      	beq.n	800231c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80022ea:	4b67      	ldr	r3, [pc, #412]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f003 0203 	and.w	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d10d      	bne.n	8002316 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
       ||
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d009      	beq.n	8002316 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002302:	4b61      	ldr	r3, [pc, #388]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	1c5a      	adds	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
       ||
 8002312:	429a      	cmp	r2, r3
 8002314:	d047      	beq.n	80023a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
 800231a:	e044      	b.n	80023a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b03      	cmp	r3, #3
 8002322:	d018      	beq.n	8002356 <RCCEx_PLLSAI2_Config+0x86>
 8002324:	2b03      	cmp	r3, #3
 8002326:	d825      	bhi.n	8002374 <RCCEx_PLLSAI2_Config+0xa4>
 8002328:	2b01      	cmp	r3, #1
 800232a:	d002      	beq.n	8002332 <RCCEx_PLLSAI2_Config+0x62>
 800232c:	2b02      	cmp	r3, #2
 800232e:	d009      	beq.n	8002344 <RCCEx_PLLSAI2_Config+0x74>
 8002330:	e020      	b.n	8002374 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002332:	4b55      	ldr	r3, [pc, #340]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d11d      	bne.n	800237a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002342:	e01a      	b.n	800237a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002344:	4b50      	ldr	r3, [pc, #320]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800234c:	2b00      	cmp	r3, #0
 800234e:	d116      	bne.n	800237e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002354:	e013      	b.n	800237e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002356:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10f      	bne.n	8002382 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002362:	4b49      	ldr	r3, [pc, #292]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002372:	e006      	b.n	8002382 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	73fb      	strb	r3, [r7, #15]
      break;
 8002378:	e004      	b.n	8002384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800237a:	bf00      	nop
 800237c:	e002      	b.n	8002384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800237e:	bf00      	nop
 8002380:	e000      	b.n	8002384 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002382:	bf00      	nop
    }

    if(status == HAL_OK)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10d      	bne.n	80023a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800238a:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6819      	ldr	r1, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	430b      	orrs	r3, r1
 80023a0:	4939      	ldr	r1, [pc, #228]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d167      	bne.n	800247c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80023ac:	4b36      	ldr	r3, [pc, #216]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a35      	ldr	r2, [pc, #212]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023b8:	f7fe f96e 	bl	8000698 <HAL_GetTick>
 80023bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80023be:	e009      	b.n	80023d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80023c0:	f7fe f96a 	bl	8000698 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d902      	bls.n	80023d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	73fb      	strb	r3, [r7, #15]
        break;
 80023d2:	e005      	b.n	80023e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80023d4:	4b2c      	ldr	r3, [pc, #176]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1ef      	bne.n	80023c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80023e0:	7bfb      	ldrb	r3, [r7, #15]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d14a      	bne.n	800247c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d111      	bne.n	8002410 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80023ec:	4b26      	ldr	r3, [pc, #152]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80023f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6892      	ldr	r2, [r2, #8]
 80023fc:	0211      	lsls	r1, r2, #8
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	68d2      	ldr	r2, [r2, #12]
 8002402:	0912      	lsrs	r2, r2, #4
 8002404:	0452      	lsls	r2, r2, #17
 8002406:	430a      	orrs	r2, r1
 8002408:	491f      	ldr	r1, [pc, #124]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	614b      	str	r3, [r1, #20]
 800240e:	e011      	b.n	8002434 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002410:	4b1d      	ldr	r3, [pc, #116]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002418:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6892      	ldr	r2, [r2, #8]
 8002420:	0211      	lsls	r1, r2, #8
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6912      	ldr	r2, [r2, #16]
 8002426:	0852      	lsrs	r2, r2, #1
 8002428:	3a01      	subs	r2, #1
 800242a:	0652      	lsls	r2, r2, #25
 800242c:	430a      	orrs	r2, r1
 800242e:	4916      	ldr	r1, [pc, #88]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002430:	4313      	orrs	r3, r2
 8002432:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002434:	4b14      	ldr	r3, [pc, #80]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a13      	ldr	r2, [pc, #76]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800243a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800243e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002440:	f7fe f92a 	bl	8000698 <HAL_GetTick>
 8002444:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002446:	e009      	b.n	800245c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002448:	f7fe f926 	bl	8000698 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d902      	bls.n	800245c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	73fb      	strb	r3, [r7, #15]
          break;
 800245a:	e005      	b.n	8002468 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ef      	beq.n	8002448 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d106      	bne.n	800247c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	4904      	ldr	r1, [pc, #16]	; (8002488 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002478:	4313      	orrs	r3, r2
 800247a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800247c:	7bfb      	ldrb	r3, [r7, #15]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40021000 	.word	0x40021000

0800248c <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0aa      	b.n	80025f4 <HAL_SMBUS_Init+0x168>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_SMBUS_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fd ff7a 	bl	80003a8 <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024e6:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80024f6:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002500:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002510:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d012      	beq.n	8002540 <HAL_SMBUS_Init+0xb4>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_SMBUS_Init+0xa6>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	e006      	b.n	8002540 <HAL_SMBUS_Init+0xb4>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800253e:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d104      	bne.n	8002552 <HAL_SMBUS_Init+0xc6>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002550:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002560:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002564:	6053      	str	r3, [r2, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	695a      	ldr	r2, [r3, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	ea42 0103 	orr.w	r1, r2, r3
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	430a      	orrs	r2, r1
 800257e:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1a      	ldr	r2, [r3, #32]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800258e:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	ea42 0103 	orr.w	r1, r2, r3
                           hsmbus->Init.AnalogFilter);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 80025a0:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 80025a2:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025ac:	d110      	bne.n	80025d0 <HAL_SMBUS_Init+0x144>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <HAL_SMBUS_Init+0x134>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 80025ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025be:	d107      	bne.n	80025d0 <HAL_SMBUS_Init+0x144>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80025ce:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_SMBUS_DeInit>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_DeInit(SMBUS_HandleTypeDef *hsmbus)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_SMBUS_DeInit+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e01b      	b.n	8002646 <HAL_SMBUS_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the SMBUS Peripheral Clock */
  __HAL_SMBUS_DISABLE(hsmbus);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0201 	bic.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hsmbus->MspDeInitCallback(hsmbus);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_SMBUS_MspDeInit(hsmbus);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7fd ff2d 	bl	8000484 <HAL_SMBUS_MspDeInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState =  HAL_SMBUS_STATE_RESET;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_RESET;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Release Lock */
  __HAL_UNLOCK(hsmbus);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8002644:	2300      	movs	r3, #0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_SMBUS_Master_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref SMBUS_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Master_Transmit_IT(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress,
                                               uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	461a      	mov	r2, r3
 800265c:	460b      	mov	r3, r1
 800265e:	817b      	strh	r3, [r7, #10]
 8002660:	4613      	mov	r3, r2
 8002662:	813b      	strh	r3, [r7, #8]
  uint32_t sizetoxfer;

  /* Check the parameters */
  assert_param(IS_SMBUS_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002668:	2b01      	cmp	r3, #1
 800266a:	f040 80d3 	bne.w	8002814 <HAL_SMBUS_Master_Transmit_IT+0x1c4>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002674:	2b01      	cmp	r3, #1
 8002676:	d101      	bne.n	800267c <HAL_SMBUS_Master_Transmit_IT+0x2c>
 8002678:	2302      	movs	r3, #2
 800267a:	e0cc      	b.n	8002816 <HAL_SMBUS_Master_Transmit_IT+0x1c6>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_MASTER_BUSY_TX;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2212      	movs	r2, #18
 8002688:	649a      	str	r2, [r3, #72]	; 0x48
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Prepare transfer parameters */
    hsmbus->pBuffPtr = pData;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	635a      	str	r2, [r3, #52]	; 0x34
    hsmbus->XferCount = Size;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	893a      	ldrh	r2, [r7, #8]
 800269a:	875a      	strh	r2, [r3, #58]	; 0x3a
    hsmbus->XferOptions = XferOptions;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a3a      	ldr	r2, [r7, #32]
 80026a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* In case of Quick command, remove autoend mode */
    /* Manage the stop generation by software */
    if (hsmbus->pBuffPtr == NULL)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <HAL_SMBUS_Master_Transmit_IT+0x66>
    {
      hsmbus->XferOptions &= ~SMBUS_AUTOEND_MODE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    if (Size > MAX_NBYTE_SIZE)
 80026b6:	893b      	ldrh	r3, [r7, #8]
 80026b8:	2bff      	cmp	r3, #255	; 0xff
 80026ba:	d903      	bls.n	80026c4 <HAL_SMBUS_Master_Transmit_IT+0x74>
    {
      hsmbus->XferSize = MAX_NBYTE_SIZE;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	22ff      	movs	r2, #255	; 0xff
 80026c0:	871a      	strh	r2, [r3, #56]	; 0x38
 80026c2:	e002      	b.n	80026ca <HAL_SMBUS_Master_Transmit_IT+0x7a>
    }
    else
    {
      hsmbus->XferSize = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	893a      	ldrh	r2, [r7, #8]
 80026c8:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    sizetoxfer = hsmbus->XferSize;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80026ce:	617b      	str	r3, [r7, #20]
    if ((sizetoxfer > 0U) && ((XferOptions == SMBUS_FIRST_FRAME) ||
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d02d      	beq.n	8002732 <HAL_SMBUS_Master_Transmit_IT+0xe2>
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00b      	beq.n	80026f4 <HAL_SMBUS_Master_Transmit_IT+0xa4>
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026e2:	d007      	beq.n	80026f4 <HAL_SMBUS_Master_Transmit_IT+0xa4>
                              (XferOptions == SMBUS_FIRST_AND_LAST_FRAME_NO_PEC) ||
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ea:	d003      	beq.n	80026f4 <HAL_SMBUS_Master_Transmit_IT+0xa4>
                              (XferOptions == SMBUS_FIRST_FRAME_WITH_PEC) ||
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80026f2:	d11e      	bne.n	8002732 <HAL_SMBUS_Master_Transmit_IT+0xe2>
                              (XferOptions == SMBUS_FIRST_AND_LAST_FRAME_WITH_PEC)))
    {
      if (hsmbus->pBuffPtr != NULL)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d018      	beq.n	800272e <HAL_SMBUS_Master_Transmit_IT+0xde>
      {
        /* Preload TX register */
        /* Write data to TXDR */
        hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002700:	781a      	ldrb	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	629a      	str	r2, [r3, #40]	; 0x28

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	635a      	str	r2, [r3, #52]	; 0x34

        hsmbus->XferCount--;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	875a      	strh	r2, [r3, #58]	; 0x3a
        hsmbus->XferSize--;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002724:	3b01      	subs	r3, #1
 8002726:	b29a      	uxth	r2, r3
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	871a      	strh	r2, [r3, #56]	; 0x38
 800272c:	e001      	b.n	8002732 <HAL_SMBUS_Master_Transmit_IT+0xe2>
      }
      else
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e071      	b.n	8002816 <HAL_SMBUS_Master_Transmit_IT+0x1c6>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > MAX_NBYTE_SIZE and generate RESTART */
    if ((sizetoxfer < hsmbus->XferCount) && (sizetoxfer == MAX_NBYTE_SIZE))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002736:	b29b      	uxth	r3, r3
 8002738:	461a      	mov	r2, r3
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	4293      	cmp	r3, r2
 800273e:	d211      	bcs.n	8002764 <HAL_SMBUS_Master_Transmit_IT+0x114>
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2bff      	cmp	r3, #255	; 0xff
 8002744:	d10e      	bne.n	8002764 <HAL_SMBUS_Master_Transmit_IT+0x114>
    {
      SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)sizetoxfer,
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	b2da      	uxtb	r2, r3
                           SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE),
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)sizetoxfer,
 8002752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002756:	8979      	ldrh	r1, [r7, #10]
 8002758:	4831      	ldr	r0, [pc, #196]	; (8002820 <HAL_SMBUS_Master_Transmit_IT+0x1d0>)
 800275a:	9000      	str	r0, [sp, #0]
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f001 f9c5 	bl	8003aec <SMBUS_TransferConfig>
 8002762:	e04d      	b.n	8002800 <HAL_SMBUS_Master_Transmit_IT+0x1b0>
    {
      /* If transfer direction not change, do not generate Restart Condition */
      /* Mean Previous state is same as current state */

      /* Store current volatile XferOptions, misra rule */
      tmp = hsmbus->XferOptions;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002768:	613b      	str	r3, [r7, #16]

      if ((hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_TX) && \
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	2b12      	cmp	r3, #18
 8002770:	d11e      	bne.n	80027b0 <HAL_SMBUS_Master_Transmit_IT+0x160>
          (IS_SMBUS_TRANSFER_OTHER_OPTIONS_REQUEST(tmp) == 0))
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2baa      	cmp	r3, #170	; 0xaa
 8002776:	d00b      	beq.n	8002790 <HAL_SMBUS_Master_Transmit_IT+0x140>
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800277e:	d007      	beq.n	8002790 <HAL_SMBUS_Master_Transmit_IT+0x140>
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8002786:	d003      	beq.n	8002790 <HAL_SMBUS_Master_Transmit_IT+0x140>
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800278e:	d101      	bne.n	8002794 <HAL_SMBUS_Master_Transmit_IT+0x144>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_SMBUS_Master_Transmit_IT+0x146>
 8002794:	2300      	movs	r3, #0
      if ((hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_TX) && \
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10a      	bne.n	80027b0 <HAL_SMBUS_Master_Transmit_IT+0x160>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)sizetoxfer, hsmbus->XferOptions,
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a2:	8979      	ldrh	r1, [r7, #10]
 80027a4:	2000      	movs	r0, #0
 80027a6:	9000      	str	r0, [sp, #0]
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f001 f99f 	bl	8003aec <SMBUS_TransferConfig>
 80027ae:	e00c      	b.n	80027ca <HAL_SMBUS_Master_Transmit_IT+0x17a>
      }
      /* Else transfer direction change, so generate Restart with new transfer direction */
      else
      {
        /* Convert OTHER_xxx XferOptions if any */
        SMBUS_ConvertOtherXferOptions(hsmbus);
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f001 f9c9 	bl	8003b48 <SMBUS_ConvertOtherXferOptions>

        /* Handle Transfer */
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)sizetoxfer,
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	b2da      	uxtb	r2, r3
                             hsmbus->XferOptions,
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)sizetoxfer,
 80027be:	8979      	ldrh	r1, [r7, #10]
 80027c0:	4817      	ldr	r0, [pc, #92]	; (8002820 <HAL_SMBUS_Master_Transmit_IT+0x1d0>)
 80027c2:	9000      	str	r0, [sp, #0]
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f001 f991 	bl	8003aec <SMBUS_TransferConfig>
                             SMBUS_GENERATE_START_WRITE);
      }

      /* If PEC mode is enable, size to transmit manage by SW part should be Size-1 byte, corresponding to PEC byte */
      /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
      if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_SMBUS_Master_Transmit_IT+0x1b0>
      {
        if (hsmbus->XferSize > 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00d      	beq.n	80027fc <HAL_SMBUS_Master_Transmit_IT+0x1ac>
        {
          hsmbus->XferSize--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80027e4:	3b01      	subs	r3, #1
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	3b01      	subs	r3, #1
 80027f4:	b29a      	uxth	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	875a      	strh	r2, [r3, #58]	; 0x3a
 80027fa:	e001      	b.n	8002800 <HAL_SMBUS_Master_Transmit_IT+0x1b0>
        }
        else
        {
          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e00a      	b.n	8002816 <HAL_SMBUS_Master_Transmit_IT+0x1c6>
        }
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Note : The SMBUS interrupts must be enabled after unlocking current process
              to avoid the risk of SMBUS interrupt handle execution before current
              process unlock */
    SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_TX);
 8002808:	21f2      	movs	r1, #242	; 0xf2
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 ff9a 	bl	8003744 <SMBUS_Enable_IRQ>

    return HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	e000      	b.n	8002816 <HAL_SMBUS_Master_Transmit_IT+0x1c6>
  }
  else
  {
    return HAL_BUSY;
 8002814:	2302      	movs	r3, #2
  }
}
 8002816:	4618      	mov	r0, r3
 8002818:	3718      	adds	r7, #24
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	80002000 	.word	0x80002000

08002824 <HAL_SMBUS_Master_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref SMBUS_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Master_Receive_IT(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size, uint32_t XferOptions)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	461a      	mov	r2, r3
 8002830:	460b      	mov	r3, r1
 8002832:	817b      	strh	r3, [r7, #10]
 8002834:	4613      	mov	r3, r2
 8002836:	813b      	strh	r3, [r7, #8]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_SMBUS_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283c:	2b01      	cmp	r3, #1
 800283e:	f040 8088 	bne.w	8002952 <HAL_SMBUS_Master_Receive_IT+0x12e>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_SMBUS_Master_Receive_IT+0x2c>
 800284c:	2302      	movs	r3, #2
 800284e:	e081      	b.n	8002954 <HAL_SMBUS_Master_Receive_IT+0x130>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_MASTER_BUSY_RX;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2222      	movs	r2, #34	; 0x22
 800285c:	649a      	str	r2, [r3, #72]	; 0x48
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Prepare transfer parameters */
    hsmbus->pBuffPtr = pData;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	635a      	str	r2, [r3, #52]	; 0x34
    hsmbus->XferCount = Size;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	893a      	ldrh	r2, [r7, #8]
 800286e:	875a      	strh	r2, [r3, #58]	; 0x3a
    hsmbus->XferOptions = XferOptions;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a3a      	ldr	r2, [r7, #32]
 8002874:	63da      	str	r2, [r3, #60]	; 0x3c

    /* In case of Quick command, remove autoend mode */
    /* Manage the stop generation by software */
    if (hsmbus->pBuffPtr == NULL)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	2b00      	cmp	r3, #0
 800287c:	d105      	bne.n	800288a <HAL_SMBUS_Master_Receive_IT+0x66>
    {
      hsmbus->XferOptions &= ~SMBUS_AUTOEND_MODE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    if (Size > MAX_NBYTE_SIZE)
 800288a:	893b      	ldrh	r3, [r7, #8]
 800288c:	2bff      	cmp	r3, #255	; 0xff
 800288e:	d903      	bls.n	8002898 <HAL_SMBUS_Master_Receive_IT+0x74>
    {
      hsmbus->XferSize = MAX_NBYTE_SIZE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	22ff      	movs	r2, #255	; 0xff
 8002894:	871a      	strh	r2, [r3, #56]	; 0x38
 8002896:	e002      	b.n	800289e <HAL_SMBUS_Master_Receive_IT+0x7a>
    }
    else
    {
      hsmbus->XferSize = Size;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	893a      	ldrh	r2, [r7, #8]
 800289c:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > MAX_NBYTE_SIZE and generate RESTART */
    if ((hsmbus->XferSize < hsmbus->XferCount) && (hsmbus->XferSize == MAX_NBYTE_SIZE))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d213      	bcs.n	80028d4 <HAL_SMBUS_Master_Receive_IT+0xb0>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80028b0:	2bff      	cmp	r3, #255	; 0xff
 80028b2:	d10f      	bne.n	80028d4 <HAL_SMBUS_Master_Receive_IT+0xb0>
    {
      SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize,
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80028b8:	b2da      	uxtb	r2, r3
                           SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE),
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize,
 80028c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	4824      	ldr	r0, [pc, #144]	; (800295c <HAL_SMBUS_Master_Receive_IT+0x138>)
 80028ca:	9000      	str	r0, [sp, #0]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f001 f90d 	bl	8003aec <SMBUS_TransferConfig>
 80028d2:	e034      	b.n	800293e <HAL_SMBUS_Master_Receive_IT+0x11a>
    {
      /* If transfer direction not change, do not generate Restart Condition */
      /* Mean Previous state is same as current state */

      /* Store current volatile XferOptions, Misra rule */
      tmp = hsmbus->XferOptions;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d8:	617b      	str	r3, [r7, #20]

      if ((hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_RX) && \
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028de:	2b22      	cmp	r3, #34	; 0x22
 80028e0:	d11f      	bne.n	8002922 <HAL_SMBUS_Master_Receive_IT+0xfe>
          (IS_SMBUS_TRANSFER_OTHER_OPTIONS_REQUEST(tmp) == 0))
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	2baa      	cmp	r3, #170	; 0xaa
 80028e6:	d00b      	beq.n	8002900 <HAL_SMBUS_Master_Receive_IT+0xdc>
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80028ee:	d007      	beq.n	8002900 <HAL_SMBUS_Master_Receive_IT+0xdc>
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 80028f6:	d003      	beq.n	8002900 <HAL_SMBUS_Master_Receive_IT+0xdc>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80028fe:	d101      	bne.n	8002904 <HAL_SMBUS_Master_Receive_IT+0xe0>
 8002900:	2301      	movs	r3, #1
 8002902:	e000      	b.n	8002906 <HAL_SMBUS_Master_Receive_IT+0xe2>
 8002904:	2300      	movs	r3, #0
      if ((hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_RX) && \
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10b      	bne.n	8002922 <HAL_SMBUS_Master_Receive_IT+0xfe>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800290e:	b2da      	uxtb	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002914:	8979      	ldrh	r1, [r7, #10]
 8002916:	2000      	movs	r0, #0
 8002918:	9000      	str	r0, [sp, #0]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f001 f8e6 	bl	8003aec <SMBUS_TransferConfig>
 8002920:	e00d      	b.n	800293e <HAL_SMBUS_Master_Receive_IT+0x11a>
      }
      /* Else transfer direction change, so generate Restart with new transfer direction */
      else
      {
        /* Convert OTHER_xxx XferOptions if any */
        SMBUS_ConvertOtherXferOptions(hsmbus);
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f001 f910 	bl	8003b48 <SMBUS_ConvertOtherXferOptions>

        /* Handle Transfer */
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize,
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800292c:	b2da      	uxtb	r2, r3
                             hsmbus->XferOptions,
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize,
 8002932:	8979      	ldrh	r1, [r7, #10]
 8002934:	4809      	ldr	r0, [pc, #36]	; (800295c <HAL_SMBUS_Master_Receive_IT+0x138>)
 8002936:	9000      	str	r0, [sp, #0]
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f001 f8d7 	bl	8003aec <SMBUS_TransferConfig>
                             SMBUS_GENERATE_START_READ);
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Note : The SMBUS interrupts must be enabled after unlocking current process
              to avoid the risk of SMBUS interrupt handle execution before current
              process unlock */
    SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_RX);
 8002946:	21d4      	movs	r1, #212	; 0xd4
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f000 fefb 	bl	8003744 <SMBUS_Enable_IRQ>

    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e000      	b.n	8002954 <HAL_SMBUS_Master_Receive_IT+0x130>
  }
  else
  {
    return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
  }
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	80002400 	.word	0x80002400

08002960 <HAL_SMBUS_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Master_Abort_IT(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af02      	add	r7, sp, #8
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	460b      	mov	r3, r1
 800296a:	807b      	strh	r3, [r7, #2]
  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002970:	2b01      	cmp	r3, #1
 8002972:	d13f      	bne.n	80029f4 <HAL_SMBUS_Master_Abort_IT+0x94>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800297a:	2b01      	cmp	r3, #1
 800297c:	d101      	bne.n	8002982 <HAL_SMBUS_Master_Abort_IT+0x22>
 800297e:	2302      	movs	r3, #2
 8002980:	e039      	b.n	80029f6 <HAL_SMBUS_Master_Abort_IT+0x96>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Keep the same state as previous */
    /* to perform as well the call of the corresponding end of transfer callback */
    if (hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b12      	cmp	r3, #18
 8002990:	d103      	bne.n	800299a <HAL_SMBUS_Master_Abort_IT+0x3a>
    {
      hsmbus->State = HAL_SMBUS_STATE_MASTER_BUSY_TX;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2212      	movs	r2, #18
 8002996:	649a      	str	r2, [r3, #72]	; 0x48
 8002998:	e009      	b.n	80029ae <HAL_SMBUS_Master_Abort_IT+0x4e>
    }
    else if (hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b22      	cmp	r3, #34	; 0x22
 80029a0:	d103      	bne.n	80029aa <HAL_SMBUS_Master_Abort_IT+0x4a>
    {
      hsmbus->State = HAL_SMBUS_STATE_MASTER_BUSY_RX;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2222      	movs	r2, #34	; 0x22
 80029a6:	649a      	str	r2, [r3, #72]	; 0x48
 80029a8:	e001      	b.n	80029ae <HAL_SMBUS_Master_Abort_IT+0x4e>
    }
    else
    {
      /* Wrong usage of abort function */
      /* This function should be used only in case of abort monitored by master device */
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e023      	b.n	80029f6 <HAL_SMBUS_Master_Abort_IT+0x96>
    }
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set NBYTES to 1 to generate a dummy read on SMBUS peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    SMBUS_TransferConfig(hsmbus, DevAddress, 1, SMBUS_AUTOEND_MODE, SMBUS_NO_STARTSTOP);
 80029b4:	8879      	ldrh	r1, [r7, #2]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029be:	2201      	movs	r2, #1
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f001 f893 	bl	8003aec <SMBUS_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Note : The SMBUS interrupts must be enabled after unlocking current process
              to avoid the risk of SMBUS interrupt handle execution before current
              process unlock */
    if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d2:	2b12      	cmp	r3, #18
 80029d4:	d104      	bne.n	80029e0 <HAL_SMBUS_Master_Abort_IT+0x80>
    {
      SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_TX);
 80029d6:	21f2      	movs	r1, #242	; 0xf2
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 feb3 	bl	8003744 <SMBUS_Enable_IRQ>
 80029de:	e007      	b.n	80029f0 <HAL_SMBUS_Master_Abort_IT+0x90>
    }
    else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e4:	2b22      	cmp	r3, #34	; 0x22
 80029e6:	d103      	bne.n	80029f0 <HAL_SMBUS_Master_Abort_IT+0x90>
    {
      SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_RX);
 80029e8:	21d4      	movs	r1, #212	; 0xd4
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 feaa 	bl	8003744 <SMBUS_Enable_IRQ>
    else
    {
      /* Nothing to do */
    }

    return HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	e000      	b.n	80029f6 <HAL_SMBUS_Master_Abort_IT+0x96>
  }
  else
  {
    return HAL_BUSY;
 80029f4:	2302      	movs	r3, #2
  }
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SMBUS_Slave_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref SMBUS_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Slave_Transmit_IT(SMBUS_HandleTypeDef *hsmbus, uint8_t *pData, uint16_t Size,
                                              uint32_t XferOptions)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b086      	sub	sp, #24
 8002a02:	af02      	add	r7, sp, #8
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_SMBUS_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	f040 808f 	bne.w	8002b3a <HAL_SMBUS_Slave_Transmit_IT+0x13c>
  {
    if ((pData == NULL) || (Size == 0UL))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d002      	beq.n	8002a28 <HAL_SMBUS_Slave_Transmit_IT+0x2a>
 8002a22:	88fb      	ldrh	r3, [r7, #6]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d105      	bne.n	8002a34 <HAL_SMBUS_Slave_Transmit_IT+0x36>
    {
      hsmbus->ErrorCode = HAL_SMBUS_ERROR_INVALID_PARAM;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2e:	64da      	str	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e083      	b.n	8002b3c <HAL_SMBUS_Slave_Transmit_IT+0x13e>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR | SMBUS_IT_TX);
 8002a34:	21fa      	movs	r1, #250	; 0xfa
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 febd 	bl	80037b6 <SMBUS_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d101      	bne.n	8002a4a <HAL_SMBUS_Slave_Transmit_IT+0x4c>
 8002a46:	2302      	movs	r3, #2
 8002a48:	e078      	b.n	8002b3c <HAL_SMBUS_Slave_Transmit_IT+0x13e>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = (HAL_SMBUS_STATE_SLAVE_BUSY_TX | HAL_SMBUS_STATE_LISTEN);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	223a      	movs	r2, #58	; 0x3a
 8002a56:	649a      	str	r2, [r3, #72]	; 0x48
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set SBC bit to manage Acknowledge at each bit */
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a6c:	601a      	str	r2, [r3, #0]

    /* Enable Address Acknowledge */
    hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a7c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hsmbus->pBuffPtr = pData;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	635a      	str	r2, [r3, #52]	; 0x34
    hsmbus->XferCount = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	88fa      	ldrh	r2, [r7, #6]
 8002a88:	875a      	strh	r2, [r3, #58]	; 0x3a
    hsmbus->XferOptions = XferOptions;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Convert OTHER_xxx XferOptions if any */
    SMBUS_ConvertOtherXferOptions(hsmbus);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f001 f859 	bl	8003b48 <SMBUS_ConvertOtherXferOptions>

    if (Size > MAX_NBYTE_SIZE)
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	2bff      	cmp	r3, #255	; 0xff
 8002a9a:	d903      	bls.n	8002aa4 <HAL_SMBUS_Slave_Transmit_IT+0xa6>
    {
      hsmbus->XferSize = MAX_NBYTE_SIZE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	22ff      	movs	r2, #255	; 0xff
 8002aa0:	871a      	strh	r2, [r3, #56]	; 0x38
 8002aa2:	e002      	b.n	8002aaa <HAL_SMBUS_Slave_Transmit_IT+0xac>
    }
    else
    {
      hsmbus->XferSize = Size;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	88fa      	ldrh	r2, [r7, #6]
 8002aa8:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    /* Set NBYTES to write and reload if size > MAX_NBYTE_SIZE and generate RESTART */
    if ((hsmbus->XferSize < hsmbus->XferCount) && (hsmbus->XferSize == MAX_NBYTE_SIZE))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d213      	bcs.n	8002ae0 <HAL_SMBUS_Slave_Transmit_IT+0xe2>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002abc:	2bff      	cmp	r3, #255	; 0xff
 8002abe:	d10f      	bne.n	8002ae0 <HAL_SMBUS_Slave_Transmit_IT+0xe2>
    {
      SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize,
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002ac4:	b2da      	uxtb	r2, r3
                           SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE),
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize,
 8002ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	9100      	str	r1, [sp, #0]
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f001 f807 	bl	8003aec <SMBUS_TransferConfig>
 8002ade:	e01e      	b.n	8002b1e <HAL_SMBUS_Slave_Transmit_IT+0x120>
                           SMBUS_NO_STARTSTOP);
    }
    else
    {
      /* Set NBYTE to transmit */
      SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	2100      	movs	r1, #0
 8002aec:	9100      	str	r1, [sp, #0]
 8002aee:	2100      	movs	r1, #0
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fffb 	bl	8003aec <SMBUS_TransferConfig>
                           SMBUS_NO_STARTSTOP);

      /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
      /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
      if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00c      	beq.n	8002b1e <HAL_SMBUS_Slave_Transmit_IT+0x120>
      {
        hsmbus->XferSize--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	871a      	strh	r2, [r3, #56]	; 0x38
        hsmbus->XferCount--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	875a      	strh	r2, [r3, #58]	; 0x3a
      }
    }

    /* Clear ADDR flag after prepare the transfer parameters */
    /* This action will generate an acknowledge to the HOST */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	2208      	movs	r2, #8
 8002b24:	61da      	str	r2, [r3, #28]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Note : The SMBUS interrupts must be enabled after unlocking current process
              to avoid the risk of SMBUS interrupt handle execution before current
              process unlock */
    /* REnable ADDR interrupt */
    SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_TX | SMBUS_IT_ADDR);
 8002b2e:	21fa      	movs	r1, #250	; 0xfa
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 fe07 	bl	8003744 <SMBUS_Enable_IRQ>

    return HAL_OK;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e000      	b.n	8002b3c <HAL_SMBUS_Slave_Transmit_IT+0x13e>
  }
  else
  {
    return HAL_BUSY;
 8002b3a:	2302      	movs	r3, #2
  }
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_SMBUS_Slave_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref SMBUS_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Slave_Receive_IT(SMBUS_HandleTypeDef *hsmbus, uint8_t *pData, uint16_t Size,
                                             uint32_t XferOptions)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	4613      	mov	r3, r2
 8002b52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_SMBUS_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d173      	bne.n	8002c48 <HAL_SMBUS_Slave_Receive_IT+0x104>
  {
    if ((pData == NULL) || (Size == 0UL))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_SMBUS_Slave_Receive_IT+0x28>
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_SMBUS_Slave_Receive_IT+0x34>
    {
      hsmbus->ErrorCode = HAL_SMBUS_ERROR_INVALID_PARAM;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b72:	64da      	str	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e068      	b.n	8002c4a <HAL_SMBUS_Slave_Receive_IT+0x106>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR | SMBUS_IT_RX);
 8002b78:	21fc      	movs	r1, #252	; 0xfc
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fe1b 	bl	80037b6 <SMBUS_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_SMBUS_Slave_Receive_IT+0x4a>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e05d      	b.n	8002c4a <HAL_SMBUS_Slave_Receive_IT+0x106>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = (HAL_SMBUS_STATE_SLAVE_BUSY_RX | HAL_SMBUS_STATE_LISTEN);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	224a      	movs	r2, #74	; 0x4a
 8002b9a:	649a      	str	r2, [r3, #72]	; 0x48
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set SBC bit to manage Acknowledge at each bit */
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002bb0:	601a      	str	r2, [r3, #0]

    /* Enable Address Acknowledge */
    hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bc0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hsmbus->pBuffPtr = pData;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	635a      	str	r2, [r3, #52]	; 0x34
    hsmbus->XferSize = Size;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	88fa      	ldrh	r2, [r7, #6]
 8002bcc:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount = Size;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	88fa      	ldrh	r2, [r7, #6]
 8002bd2:	875a      	strh	r2, [r3, #58]	; 0x3a
    hsmbus->XferOptions = XferOptions;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Convert OTHER_xxx XferOptions if any */
    SMBUS_ConvertOtherXferOptions(hsmbus);
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 ffb4 	bl	8003b48 <SMBUS_ConvertOtherXferOptions>
    /* Set NBYTE to receive */
    /* If XferSize equal "1", or XferSize equal "2" with PEC requested (mean 1 data byte + 1 PEC byte */
    /* no need to set RELOAD bit mode, a ACK will be automatically generated in that case */
    /* else need to set RELOAD bit mode to generate an automatic ACK at each byte Received */
    /* This RELOAD bit will be reset for last BYTE to be receive in SMBUS_Slave_ISR */
    if (((SMBUS_GET_PEC_MODE(hsmbus) != 0UL) && (hsmbus->XferSize == 2U)) || (hsmbus->XferSize == 1U))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_SMBUS_Slave_Receive_IT+0xb2>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d003      	beq.n	8002bfe <HAL_SMBUS_Slave_Receive_IT+0xba>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d10b      	bne.n	8002c16 <HAL_SMBUS_Slave_Receive_IT+0xd2>
    {
      SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c08:	2100      	movs	r1, #0
 8002c0a:	9100      	str	r1, [sp, #0]
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 ff6c 	bl	8003aec <SMBUS_TransferConfig>
 8002c14:	e00a      	b.n	8002c2c <HAL_SMBUS_Slave_Receive_IT+0xe8>
                           SMBUS_NO_STARTSTOP);
    }
    else
    {
      SMBUS_TransferConfig(hsmbus, 0, 1, hsmbus->XferOptions | SMBUS_RELOAD_MODE, SMBUS_NO_STARTSTOP);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c1e:	2200      	movs	r2, #0
 8002c20:	9200      	str	r2, [sp, #0]
 8002c22:	2201      	movs	r2, #1
 8002c24:	2100      	movs	r1, #0
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 ff60 	bl	8003aec <SMBUS_TransferConfig>
    }

    /* Clear ADDR flag after prepare the transfer parameters */
    /* This action will generate an acknowledge to the HOST */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2208      	movs	r2, #8
 8002c32:	61da      	str	r2, [r3, #28]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Note : The SMBUS interrupts must be enabled after unlocking current process
              to avoid the risk of SMBUS interrupt handle execution before current
              process unlock */
    /* REnable ADDR interrupt */
    SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_ADDR);
 8002c3c:	21fc      	movs	r1, #252	; 0xfc
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fd80 	bl	8003744 <SMBUS_Enable_IRQ>

    return HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	e000      	b.n	8002c4a <HAL_SMBUS_Slave_Receive_IT+0x106>
  }
  else
  {
    return HAL_BUSY;
 8002c48:	2302      	movs	r3, #2
  }
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <HAL_SMBUS_EnableListen_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableListen_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  hsmbus->State = HAL_SMBUS_STATE_LISTEN;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2208      	movs	r2, #8
 8002c5e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Enable the Address Match interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ADDR);
 8002c60:	2138      	movs	r1, #56	; 0x38
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fd6e 	bl	8003744 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3708      	adds	r7, #8
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <HAL_SMBUS_DisableListen_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_DisableListen_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hsmbus->State == HAL_SMBUS_STATE_LISTEN)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d108      	bne.n	8002c94 <HAL_SMBUS_DisableListen_IT+0x22>
  {
    hsmbus->State = HAL_SMBUS_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable the Address Match interrupt */
    SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
 8002c88:	2138      	movs	r1, #56	; 0x38
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fd93 	bl	80037b6 <SMBUS_Disable_IRQ>

    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	e000      	b.n	8002c96 <HAL_SMBUS_DisableListen_IT+0x24>
  }
  else
  {
    return HAL_BUSY;
 8002c94:	2302      	movs	r3, #2
  }
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SMBUS_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_IsDeviceReady(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress, uint32_t Trials,
                                          uint32_t Timeout)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b088      	sub	sp, #32
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	60f8      	str	r0, [r7, #12]
 8002ca6:	607a      	str	r2, [r7, #4]
 8002ca8:	603b      	str	r3, [r7, #0]
 8002caa:	460b      	mov	r3, r1
 8002cac:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t SMBUS_Trials = 0UL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	f040 80e7 	bne.w	8002e8a <HAL_SMBUS_IsDeviceReady+0x1ec>
  {
    if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_BUSY) != RESET)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cca:	d101      	bne.n	8002cd0 <HAL_SMBUS_IsDeviceReady+0x32>
    {
      return HAL_BUSY;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e0dd      	b.n	8002e8c <HAL_SMBUS_IsDeviceReady+0x1ee>
    }

    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <HAL_SMBUS_IsDeviceReady+0x40>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e0d6      	b.n	8002e8c <HAL_SMBUS_IsDeviceReady+0x1ee>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	649a      	str	r2, [r3, #72]	; 0x48
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	64da      	str	r2, [r3, #76]	; 0x4c

    do
    {
      /* Generate Start */
      hsmbus->Instance->CR2 = SMBUS_GENERATE_START(hsmbus->Init.AddressingMode, DevAddress);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d107      	bne.n	8002d0a <HAL_SMBUS_IsDeviceReady+0x6c>
 8002cfa:	897b      	ldrh	r3, [r7, #10]
 8002cfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d08:	e004      	b.n	8002d14 <HAL_SMBUS_IsDeviceReady+0x76>
 8002d0a:	897b      	ldrh	r3, [r7, #10]
 8002d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d10:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8002d1a:	f7fd fcbd 	bl	8000698 <HAL_GetTick>
 8002d1e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	bf0c      	ite	eq
 8002d2e:	2301      	moveq	r3, #1
 8002d30:	2300      	movne	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_AF);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b10      	cmp	r3, #16
 8002d42:	bf0c      	ite	eq
 8002d44:	2301      	moveq	r3, #1
 8002d46:	2300      	movne	r3, #0
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002d4c:	e033      	b.n	8002db6 <HAL_SMBUS_IsDeviceReady+0x118>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d54:	d019      	beq.n	8002d8a <HAL_SMBUS_IsDeviceReady+0xec>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002d56:	f7fd fc9f 	bl	8000698 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	683a      	ldr	r2, [r7, #0]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d302      	bcc.n	8002d6c <HAL_SMBUS_IsDeviceReady+0xce>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10e      	bne.n	8002d8a <HAL_SMBUS_IsDeviceReady+0xec>
          {
            /* Device is ready */
            hsmbus->State = HAL_SMBUS_STATE_READY;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	649a      	str	r2, [r3, #72]	; 0x48

            /* Update SMBUS error code */
            hsmbus->ErrorCode |= HAL_SMBUS_ERROR_HALTIMEOUT;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d76:	f043 0210 	orr.w	r2, r3, #16
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Process Unlocked */
            __HAL_UNLOCK(hsmbus);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e080      	b.n	8002e8c <HAL_SMBUS_IsDeviceReady+0x1ee>
          }
        }

        tmp1 = __HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	f003 0320 	and.w	r3, r3, #32
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_AF);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	2b10      	cmp	r3, #16
 8002dac:	bf0c      	ite	eq
 8002dae:	2301      	moveq	r3, #1
 8002db0:	2300      	movne	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002db6:	7ffb      	ldrb	r3, [r7, #31]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_SMBUS_IsDeviceReady+0x124>
 8002dbc:	7fbb      	ldrb	r3, [r7, #30]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0c5      	beq.n	8002d4e <HAL_SMBUS_IsDeviceReady+0xb0>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_AF) == RESET)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	f003 0310 	and.w	r3, r3, #16
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d017      	beq.n	8002e00 <HAL_SMBUS_IsDeviceReady+0x162>
      {
        /* Wait until STOPF flag is reset */
        if (SMBUS_WaitOnFlagUntilTimeout(hsmbus, SMBUS_FLAG_STOPF, RESET, Timeout) != HAL_OK)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2120      	movs	r1, #32
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 fe1f 	bl	8003a1a <SMBUS_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_SMBUS_IsDeviceReady+0x148>
        {
          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e052      	b.n	8002e8c <HAL_SMBUS_IsDeviceReady+0x1ee>
        }

        /* Clear STOP Flag */
        __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2220      	movs	r2, #32
 8002dec:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hsmbus->State = HAL_SMBUS_STATE_READY;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2201      	movs	r2, #1
 8002df2:	649a      	str	r2, [r3, #72]	; 0x48

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	e045      	b.n	8002e8c <HAL_SMBUS_IsDeviceReady+0x1ee>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (SMBUS_WaitOnFlagUntilTimeout(hsmbus, SMBUS_FLAG_STOPF, RESET, Timeout) != HAL_OK)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	2200      	movs	r2, #0
 8002e04:	2120      	movs	r1, #32
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 fe07 	bl	8003a1a <SMBUS_WaitOnFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_SMBUS_IsDeviceReady+0x178>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e03a      	b.n	8002e8c <HAL_SMBUS_IsDeviceReady+0x1ee>
        }

        /* Clear NACK Flag */
        __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2210      	movs	r2, #16
 8002e1c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2220      	movs	r2, #32
 8002e24:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (SMBUS_Trials == Trials)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d116      	bne.n	8002e5c <HAL_SMBUS_IsDeviceReady+0x1be>
      {
        /* Generate Stop */
        hsmbus->Instance->CR2 |= I2C_CR2_STOP;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e3c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (SMBUS_WaitOnFlagUntilTimeout(hsmbus, SMBUS_FLAG_STOPF, RESET, Timeout) != HAL_OK)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2120      	movs	r1, #32
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fde8 	bl	8003a1a <SMBUS_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_SMBUS_IsDeviceReady+0x1b6>
        {
          return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e01b      	b.n	8002e8c <HAL_SMBUS_IsDeviceReady+0x1ee>
        }

        /* Clear STOP Flag */
        __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      SMBUS_Trials++;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	617b      	str	r3, [r7, #20]
    } while (SMBUS_Trials < Trials);
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	f63f af43 	bhi.w	8002cf2 <HAL_SMBUS_IsDeviceReady+0x54>

    hsmbus->State = HAL_SMBUS_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	649a      	str	r2, [r3, #72]	; 0x48

    /* Update SMBUS error code */
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_HALTIMEOUT;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	f043 0210 	orr.w	r2, r3, #16
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e000      	b.n	8002e8c <HAL_SMBUS_IsDeviceReady+0x1ee>
  }
  else
  {
    return HAL_BUSY;
 8002e8a:	2302      	movs	r3, #2
  }
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_SMBUS_EV_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_EV_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Use a local variable to store the current ISR flags */
  /* This action will avoid a wrong treatment due to ISR flags change during interrupt handler */
  uint32_t tmpisrvalue = READ_REG(hsmbus->Instance->ISR);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr1value = READ_REG(hsmbus->Instance->CR1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60bb      	str	r3, [r7, #8]

  /* SMBUS in mode Transmitter ---------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f003 0372 	and.w	r3, r3, #114	; 0x72
 8002eb2:	2b72      	cmp	r3, #114	; 0x72
 8002eb4:	d12d      	bne.n	8002f12 <HAL_SMBUS_EV_IRQHandler+0x7e>
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d113      	bne.n	8002ee8 <HAL_SMBUS_EV_IRQHandler+0x54>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_SMBUS_EV_IRQHandler+0x54>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d109      	bne.n	8002ee8 <HAL_SMBUS_EV_IRQHandler+0x54>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <HAL_SMBUS_EV_IRQHandler+0x54>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d014      	beq.n	8002f12 <HAL_SMBUS_EV_IRQHandler+0x7e>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eec:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8002ef0:	2b32      	cmp	r3, #50	; 0x32
 8002ef2:	d104      	bne.n	8002efe <HAL_SMBUS_EV_IRQHandler+0x6a>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8002ef4:	68f9      	ldr	r1, [r7, #12]
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 fa48 	bl	800338c <SMBUS_Slave_ISR>
 8002efc:	e009      	b.n	8002f12 <HAL_SMBUS_EV_IRQHandler+0x7e>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_TX) == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f02:	f003 0312 	and.w	r3, r3, #18
 8002f06:	2b12      	cmp	r3, #18
 8002f08:	d103      	bne.n	8002f12 <HAL_SMBUS_EV_IRQHandler+0x7e>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 8002f0a:	68f9      	ldr	r1, [r7, #12]
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f000 f86b 	bl	8002fe8 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Receiver ----------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f003 0374 	and.w	r3, r3, #116	; 0x74
 8002f18:	2b74      	cmp	r3, #116	; 0x74
 8002f1a:	d12d      	bne.n	8002f78 <HAL_SMBUS_EV_IRQHandler+0xe4>
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d113      	bne.n	8002f4e <HAL_SMBUS_EV_IRQHandler+0xba>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10e      	bne.n	8002f4e <HAL_SMBUS_EV_IRQHandler+0xba>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f003 0340 	and.w	r3, r3, #64	; 0x40
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <HAL_SMBUS_EV_IRQHandler+0xba>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d104      	bne.n	8002f4e <HAL_SMBUS_EV_IRQHandler+0xba>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0310 	and.w	r3, r3, #16
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d014      	beq.n	8002f78 <HAL_SMBUS_EV_IRQHandler+0xe4>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f52:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8002f56:	2b42      	cmp	r3, #66	; 0x42
 8002f58:	d104      	bne.n	8002f64 <HAL_SMBUS_EV_IRQHandler+0xd0>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8002f5a:	68f9      	ldr	r1, [r7, #12]
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 fa15 	bl	800338c <SMBUS_Slave_ISR>
 8002f62:	e009      	b.n	8002f78 <HAL_SMBUS_EV_IRQHandler+0xe4>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_RX) == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f68:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8002f6c:	2b22      	cmp	r3, #34	; 0x22
 8002f6e:	d103      	bne.n	8002f78 <HAL_SMBUS_EV_IRQHandler+0xe4>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 8002f70:	68f9      	ldr	r1, [r7, #12]
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 f838 	bl	8002fe8 <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Listener Only --------------------------------------------------*/
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 0308 	and.w	r3, r3, #8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_SMBUS_EV_IRQHandler+0x102>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f003 0320 	and.w	r3, r3, #32
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d104      	bne.n	8002f96 <HAL_SMBUS_EV_IRQHandler+0x102>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	f003 0310 	and.w	r3, r3, #16
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d018      	beq.n	8002fc8 <HAL_SMBUS_EV_IRQHandler+0x134>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f003 0308 	and.w	r3, r3, #8
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_SMBUS_EV_IRQHandler+0x120>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <HAL_SMBUS_EV_IRQHandler+0x120>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 0310 	and.w	r3, r3, #16
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d009      	beq.n	8002fc8 <HAL_SMBUS_EV_IRQHandler+0x134>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d103      	bne.n	8002fc8 <HAL_SMBUS_EV_IRQHandler+0x134>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8002fc0:	68f9      	ldr	r1, [r7, #12]
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 f9e2 	bl	800338c <SMBUS_Slave_ISR>
    }
  }
}
 8002fc8:	bf00      	nop
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_SMBUS_ER_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_ER_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  SMBUS_ITErrorHandler(hsmbus);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 fc69 	bl	80038b0 <SMBUS_ITErrorHandler>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <SMBUS_Master_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Master_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af02      	add	r7, sp, #8
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint16_t DevAddress;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <SMBUS_Master_ISR+0x18>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e1c1      	b.n	8003384 <SMBUS_Master_ISR+0x39c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	2b00      	cmp	r3, #0
 8003010:	d014      	beq.n	800303c <SMBUS_Master_ISR+0x54>
  {
    /* Clear NACK Flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2210      	movs	r2, #16
 8003018:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	f043 0204 	orr.w	r2, r3, #4
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Flush TX register */
    SMBUS_Flush_TXDR(hsmbus);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fd3b 	bl	8003aa2 <SMBUS_Flush_TXDR>

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f001 fb53 	bl	80046e0 <HAL_SMBUS_ErrorCallback>
 800303a:	e19e      	b.n	800337a <SMBUS_Master_ISR+0x392>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d079      	beq.n	800313a <SMBUS_Master_ISR+0x152>
  {
    /* Check and treat errors if errors occurs during STOP process */
    SMBUS_ITErrorHandler(hsmbus);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fc32 	bl	80038b0 <SMBUS_ITErrorHandler>

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003050:	2b12      	cmp	r3, #18
 8003052:	d12d      	bne.n	80030b0 <SMBUS_Master_ISR+0xc8>
    {
      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8003054:	21f2      	movs	r1, #242	; 0xf2
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fbad 	bl	80037b6 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2220      	movs	r2, #32
 8003062:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6859      	ldr	r1, [r3, #4]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4b8f      	ldr	r3, [pc, #572]	; (80032ac <SMBUS_Master_ISR+0x2c4>)
 8003070:	400b      	ands	r3, r1
 8003072:	6053      	str	r3, [r2, #4]

      /* Flush remaining data in Fifo register in case of error occurs before TXEmpty */
      /* Disable the selected SMBUS peripheral */
      __HAL_SMBUS_DISABLE(hsmbus);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Re-enable the selected SMBUS peripheral */
      __HAL_SMBUS_ENABLE(hsmbus);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fe35 	bl	8003d18 <HAL_SMBUS_MasterTxCpltCallback>
 80030ae:	e164      	b.n	800337a <SMBUS_Master_ISR+0x392>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
    else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b4:	2b22      	cmp	r3, #34	; 0x22
 80030b6:	f040 8160 	bne.w	800337a <SMBUS_Master_ISR+0x392>
    {
      /* Store Last receive data if any */
      if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d01c      	beq.n	80030fe <SMBUS_Master_ISR+0x116>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00c      	beq.n	80030fe <SMBUS_Master_ISR+0x116>
        {
          hsmbus->XferSize--;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	3b01      	subs	r3, #1
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 80030fe:	21d4      	movs	r1, #212	; 0xd4
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fb58 	bl	80037b6 <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2220      	movs	r2, #32
 800310c:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	4b64      	ldr	r3, [pc, #400]	; (80032ac <SMBUS_Master_ISR+0x2c4>)
 800311a:	400b      	ands	r3, r1
 800311c:	6053      	str	r3, [r2, #4]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterRxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fe6c 	bl	8003e10 <HAL_SMBUS_MasterRxCpltCallback>
 8003138:	e11f      	b.n	800337a <SMBUS_Master_ISR+0x392>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d019      	beq.n	8003178 <SMBUS_Master_ISR+0x190>
  {
    /* Read data from RXDR */
    *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314e:	b2d2      	uxtb	r2, r2
 8003150:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003160:	3b01      	subs	r3, #1
 8003162:	b29a      	uxth	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800316c:	b29b      	uxth	r3, r3
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	875a      	strh	r2, [r3, #58]	; 0x3a
 8003176:	e100      	b.n	800337a <SMBUS_Master_ISR+0x392>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d018      	beq.n	80031b4 <SMBUS_Master_ISR+0x1cc>
  {
    /* Write data to TXDR */
    hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003186:	781a      	ldrb	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	1c5a      	adds	r2, r3, #1
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	875a      	strh	r2, [r3, #58]	; 0x3a
 80031b2:	e0e2      	b.n	800337a <SMBUS_Master_ISR+0x392>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	f000 808f 	beq.w	80032de <SMBUS_Master_ISR+0x2f6>
  {
    if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d046      	beq.n	8003258 <SMBUS_Master_ISR+0x270>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d142      	bne.n	8003258 <SMBUS_Master_ISR+0x270>
    {
      DevAddress = (uint16_t)(hsmbus->Instance->CR2 & I2C_CR2_SADD);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031de:	81fb      	strh	r3, [r7, #14]

      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2bff      	cmp	r3, #255	; 0xff
 80031e8:	d910      	bls.n	800320c <SMBUS_Master_ISR+0x224>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
                             (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
 80031f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031f6:	89f9      	ldrh	r1, [r7, #14]
 80031f8:	2200      	movs	r2, #0
 80031fa:	9200      	str	r2, [sp, #0]
 80031fc:	22ff      	movs	r2, #255	; 0xff
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fc74 	bl	8003aec <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        hsmbus->XferSize = MAX_NBYTE_SIZE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	22ff      	movs	r2, #255	; 0xff
 8003208:	871a      	strh	r2, [r3, #56]	; 0x38
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800320a:	e0b5      	b.n	8003378 <SMBUS_Master_ISR+0x390>
      }
      else
      {
        hsmbus->XferSize = hsmbus->XferCount;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003210:	b29a      	uxth	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	871a      	strh	r2, [r3, #56]	; 0x38
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800321a:	b2da      	uxtb	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	89f9      	ldrh	r1, [r7, #14]
 8003222:	2000      	movs	r0, #0
 8003224:	9000      	str	r0, [sp, #0]
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fc60 	bl	8003aec <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
        /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
        if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	f000 809e 	beq.w	8003378 <SMBUS_Master_ISR+0x390>
        {
          hsmbus->XferSize--;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	875a      	strh	r2, [r3, #58]	; 0x3a
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8003256:	e08f      	b.n	8003378 <SMBUS_Master_ISR+0x390>
        }
      }
    }
    else if ((hsmbus->XferCount == 0U) && (hsmbus->XferSize == 0U))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	f040 808b 	bne.w	800337a <SMBUS_Master_ISR+0x392>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003268:	2b00      	cmp	r3, #0
 800326a:	f040 8086 	bne.w	800337a <SMBUS_Master_ISR+0x392>
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003278:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800327c:	d07d      	beq.n	800337a <SMBUS_Master_ISR+0x392>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003282:	2b12      	cmp	r3, #18
 8003284:	d114      	bne.n	80032b0 <SMBUS_Master_ISR+0x2c8>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8003286:	21f2      	movs	r1, #242	; 0xf2
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 fa94 	bl	80037b6 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 fd37 	bl	8003d18 <HAL_SMBUS_MasterTxCpltCallback>
 80032aa:	e066      	b.n	800337a <SMBUS_Master_ISR+0x392>
 80032ac:	fe00e800 	.word	0xfe00e800
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b4:	2b22      	cmp	r3, #34	; 0x22
 80032b6:	d160      	bne.n	800337a <SMBUS_Master_ISR+0x392>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 80032b8:	21d4      	movs	r1, #212	; 0xd4
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fa7b 	bl	80037b6 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fd9a 	bl	8003e10 <HAL_SMBUS_MasterRxCpltCallback>
 80032dc:	e04d      	b.n	800337a <SMBUS_Master_ISR+0x392>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TC) != RESET)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d048      	beq.n	800337a <SMBUS_Master_ISR+0x392>
  {
    if (hsmbus->XferCount == 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d143      	bne.n	800337a <SMBUS_Master_ISR+0x392>
    {
      /* Specific use case for Quick command */
      if (hsmbus->pBuffPtr == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d108      	bne.n	800330c <SMBUS_Master_ISR+0x324>
      {
        /* Generate a Stop command */
        hsmbus->Instance->CR2 |= I2C_CR2_STOP;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	e036      	b.n	800337a <SMBUS_Master_ISR+0x392>
      }
      /* Call TxCpltCallback() if no stop mode is set */
      else if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003316:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800331a:	d02e      	beq.n	800337a <SMBUS_Master_ISR+0x392>
      {
        /* No Generate Stop, to permit restart mode */
        /* The stop will be done at the end of transfer, when SMBUS_AUTOEND_MODE enable */

        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003320:	2b12      	cmp	r3, #18
 8003322:	d112      	bne.n	800334a <SMBUS_Master_ISR+0x362>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 8003324:	21f2      	movs	r1, #242	; 0xf2
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fa45 	bl	80037b6 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fce8 	bl	8003d18 <HAL_SMBUS_MasterTxCpltCallback>
 8003348:	e017      	b.n	800337a <SMBUS_Master_ISR+0x392>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334e:	2b22      	cmp	r3, #34	; 0x22
 8003350:	d113      	bne.n	800337a <SMBUS_Master_ISR+0x392>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8003352:	21d4      	movs	r1, #212	; 0xd4
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f000 fa2e 	bl	80037b6 <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fd4d 	bl	8003e10 <HAL_SMBUS_MasterRxCpltCallback>
 8003376:	e000      	b.n	800337a <SMBUS_Master_ISR+0x392>
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8003378:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3710      	adds	r7, #16
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <SMBUS_Slave_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Slave_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af02      	add	r7, sp, #8
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection;
  uint16_t SlaveAddrCode;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <SMBUS_Slave_ISR+0x18>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e1c8      	b.n	8003736 <SMBUS_Slave_ISR+0x3aa>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f003 0310 	and.w	r3, r3, #16
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d039      	beq.n	800342a <SMBUS_Slave_ISR+0x9e>
  {
    /* Check that SMBUS transfer finished */
    /* if yes, normal usecase, a NACK is sent by the HOST when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hsmbus->XferCount == 0U)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d10b      	bne.n	80033d8 <SMBUS_Slave_ISR+0x4c>
    {
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2210      	movs	r2, #16
 80033c6:	61da      	str	r2, [r3, #28]

      /* Flush TX register */
      SMBUS_Flush_TXDR(hsmbus);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f000 fb6a 	bl	8003aa2 <SMBUS_Flush_TXDR>

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d6:	e149      	b.n	800366c <SMBUS_Slave_ISR+0x2e0>
    }
    else
    {
      /* if no, error usecase, a Non-Acknowledge of last Data is generated by the HOST*/
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2210      	movs	r2, #16
 80033de:	61da      	str	r2, [r3, #28]

      /* Set HAL State to "Idle" State, mean to LISTEN state */
      /* So reset Slave Busy state */
      hsmbus->PreviousState = hsmbus->State;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ec:	f023 0232 	bic.w	r2, r3, #50	; 0x32
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	649a      	str	r2, [r3, #72]	; 0x48
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f8:	f023 0242 	bic.w	r2, r3, #66	; 0x42
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	649a      	str	r2, [r3, #72]	; 0x48

      /* Disable RX/TX Interrupts, keep only ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 8003400:	21f6      	movs	r1, #246	; 0xf6
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f9d7 	bl	80037b6 <SMBUS_Disable_IRQ>

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340c:	f043 0204 	orr.w	r2, r3, #4
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Flush TX register */
      SMBUS_Flush_TXDR(hsmbus);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fb44 	bl	8003aa2 <SMBUS_Flush_TXDR>

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ErrorCallback(hsmbus);
#else
      HAL_SMBUS_ErrorCallback(hsmbus);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f001 f95c 	bl	80046e0 <HAL_SMBUS_ErrorCallback>
 8003428:	e120      	b.n	800366c <SMBUS_Slave_ISR+0x2e0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_ADDR) != RESET)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b00      	cmp	r3, #0
 8003432:	d022      	beq.n	800347a <SMBUS_Slave_ISR+0xee>
  {
    TransferDirection = (uint8_t)(SMBUS_GET_DIR(hsmbus));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	0c1b      	lsrs	r3, r3, #16
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
    SlaveAddrCode = (uint16_t)(SMBUS_GET_ADDR_MATCH(hsmbus));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	0c5b      	lsrs	r3, r3, #17
 800344c:	b29b      	uxth	r3, r3
 800344e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003452:	81bb      	strh	r3, [r7, #12]

    /* Disable ADDR interrupt to prevent multiple ADDRInterrupt*/
    /* Other ADDRInterrupt will be treat in next Listen usecase */
    __HAL_SMBUS_DISABLE_IT(hsmbus, SMBUS_IT_ADDRI);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0208 	bic.w	r2, r2, #8
 8003462:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Call Slave Addr callback */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
#else
    HAL_SMBUS_AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
 800346c:	89ba      	ldrh	r2, [r7, #12]
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	4619      	mov	r1, r3
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 fed2 	bl	800421c <HAL_SMBUS_AddrCallback>
 8003478:	e0f8      	b.n	800366c <SMBUS_Slave_ISR+0x2e0>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d105      	bne.n	8003490 <SMBUS_Slave_ISR+0x104>
           (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	f003 0380 	and.w	r3, r3, #128	; 0x80
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80b0 	beq.w	80035f0 <SMBUS_Slave_ISR+0x264>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003494:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8003498:	2b42      	cmp	r3, #66	; 0x42
 800349a:	d15e      	bne.n	800355a <SMBUS_Slave_ISR+0x1ce>
    {
      /* Read data from RXDR */
      *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a6:	b2d2      	uxtb	r2, r2
 80034a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ae:	1c5a      	adds	r2, r3, #1
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferSize--;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	871a      	strh	r2, [r3, #56]	; 0x38
      hsmbus->XferCount--;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	875a      	strh	r2, [r3, #58]	; 0x3a

      if (hsmbus->XferCount == 1U)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d10f      	bne.n	80034f8 <SMBUS_Slave_ISR+0x16c>
      {
        /* Receive last Byte, can be PEC byte in case of PEC BYTE enabled */
        /* or only the last Byte of Transfer */
        /* So reset the RELOAD bit mode */
        hsmbus->XferOptions &= ~SMBUS_RELOAD_MODE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034dc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	63da      	str	r2, [r3, #60]	; 0x3c
        SMBUS_TransferConfig(hsmbus, 0, 1, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e8:	2200      	movs	r2, #0
 80034ea:	9200      	str	r2, [sp, #0]
 80034ec:	2201      	movs	r2, #1
 80034ee:	2100      	movs	r1, #0
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 fafb 	bl	8003aec <SMBUS_TransferConfig>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80034f6:	e0b8      	b.n	800366a <SMBUS_Slave_ISR+0x2de>
      }
      else if (hsmbus->XferCount == 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d115      	bne.n	800352e <SMBUS_Slave_ISR+0x1a2>
      {
        /* Last Byte is received, disable Interrupt */
        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8003502:	21d4      	movs	r1, #212	; 0xd4
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 f956 	bl	80037b6 <SMBUS_Disable_IRQ>

        /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_RX, keep only HAL_SMBUS_STATE_LISTEN */
        hsmbus->PreviousState = hsmbus->State;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003516:	f023 0242 	bic.w	r2, r3, #66	; 0x42
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	649a      	str	r2, [r3, #72]	; 0x48

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
        hsmbus->SlaveRxCpltCallback(hsmbus);
#else
        HAL_SMBUS_SlaveRxCpltCallback(hsmbus);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 fd18 	bl	8003f5c <HAL_SMBUS_SlaveRxCpltCallback>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800352c:	e09d      	b.n	800366a <SMBUS_Slave_ISR+0x2de>
      }
      else
      {
        /* Set Reload for next Bytes */
        SMBUS_TransferConfig(hsmbus, 0, 1,
                             SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE),
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        SMBUS_TransferConfig(hsmbus, 0, 1,
 8003536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800353a:	2200      	movs	r2, #0
 800353c:	9200      	str	r2, [sp, #0]
 800353e:	2201      	movs	r2, #1
 8003540:	2100      	movs	r1, #0
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fad2 	bl	8003aec <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);

        /* Ack last Byte Read */
        hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003556:	605a      	str	r2, [r3, #4]
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8003558:	e087      	b.n	800366a <SMBUS_Slave_ISR+0x2de>
      }
    }
    else if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355e:	f003 0332 	and.w	r3, r3, #50	; 0x32
 8003562:	2b32      	cmp	r3, #50	; 0x32
 8003564:	f040 8081 	bne.w	800366a <SMBUS_Slave_ISR+0x2de>
    {
      if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d07b      	beq.n	800366a <SMBUS_Slave_ISR+0x2de>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003576:	2b00      	cmp	r3, #0
 8003578:	d177      	bne.n	800366a <SMBUS_Slave_ISR+0x2de>
      {
        if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800357e:	b29b      	uxth	r3, r3
 8003580:	2bff      	cmp	r3, #255	; 0xff
 8003582:	d910      	bls.n	80035a6 <SMBUS_Slave_ISR+0x21a>
        {
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
                               (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
 800358c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003590:	2200      	movs	r2, #0
 8003592:	9200      	str	r2, [sp, #0]
 8003594:	22ff      	movs	r2, #255	; 0xff
 8003596:	2100      	movs	r1, #0
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 faa7 	bl	8003aec <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          hsmbus->XferSize = MAX_NBYTE_SIZE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	22ff      	movs	r2, #255	; 0xff
 80035a2:	871a      	strh	r2, [r3, #56]	; 0x38
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80035a4:	e061      	b.n	800366a <SMBUS_Slave_ISR+0x2de>
        }
        else
        {
          hsmbus->XferSize = hsmbus->XferCount;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	871a      	strh	r2, [r3, #56]	; 0x38
          SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ba:	2100      	movs	r1, #0
 80035bc:	9100      	str	r1, [sp, #0]
 80035be:	2100      	movs	r1, #0
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 fa93 	bl	8003aec <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
          /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
          if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d04a      	beq.n	800366a <SMBUS_Slave_ISR+0x2de>
          {
            hsmbus->XferSize--;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80035d8:	3b01      	subs	r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	871a      	strh	r2, [r3, #56]	; 0x38
            hsmbus->XferCount--;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	875a      	strh	r2, [r3, #58]	; 0x3a
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80035ee:	e03c      	b.n	800366a <SMBUS_Slave_ISR+0x2de>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d038      	beq.n	800366c <SMBUS_Slave_ISR+0x2e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hsmbus->XferCount > 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d017      	beq.n	8003634 <SMBUS_Slave_ISR+0x2a8>
    {
      /* Write data to TXDR */
      hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003608:	781a      	ldrb	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferCount--;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	875a      	strh	r2, [r3, #58]	; 0x3a
      hsmbus->XferSize--;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    if (hsmbus->XferCount == 0U)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	d116      	bne.n	800366c <SMBUS_Slave_ISR+0x2e0>
    {
      /* Last Byte is Transmitted */
      /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_TX, keep only HAL_SMBUS_STATE_LISTEN */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800363e:	21f2      	movs	r1, #242	; 0xf2
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 f8b8 	bl	80037b6 <SMBUS_Disable_IRQ>
      hsmbus->PreviousState = hsmbus->State;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003652:	f023 0232 	bic.w	r2, r3, #50	; 0x32
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->SlaveTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_SlaveTxCpltCallback(hsmbus);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fc56 	bl	8003f14 <HAL_SMBUS_SlaveTxCpltCallback>
 8003668:	e000      	b.n	800366c <SMBUS_Slave_ISR+0x2e0>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800366a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d05a      	beq.n	800372c <SMBUS_Slave_ISR+0x3a0>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b08      	cmp	r3, #8
 8003680:	d154      	bne.n	800372c <SMBUS_Slave_ISR+0x3a0>
    {
      /* Store Last receive data if any */
      if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d11c      	bne.n	80036ca <SMBUS_Slave_ISR+0x33e>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00c      	beq.n	80036ca <SMBUS_Slave_ISR+0x33e>
        {
          hsmbus->XferSize--;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable RX and TX Interrupts */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 80036ca:	21f6      	movs	r1, #246	; 0xf6
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f872 	bl	80037b6 <SMBUS_Disable_IRQ>

      /* Disable ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
 80036d2:	2138      	movs	r1, #56	; 0x38
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f86e 	bl	80037b6 <SMBUS_Disable_IRQ>

      /* Disable Address Acknowledge */
      hsmbus->Instance->CR2 |= I2C_CR2_NACK;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036e8:	605a      	str	r2, [r3, #4]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	6859      	ldr	r1, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	4b12      	ldr	r3, [pc, #72]	; (8003740 <SMBUS_Slave_ISR+0x3b4>)
 80036f6:	400b      	ands	r3, r1
 80036f8:	6053      	str	r3, [r2, #4]

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2220      	movs	r2, #32
 8003700:	61da      	str	r2, [r3, #28]

      /* Clear ADDR flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2208      	movs	r2, #8
 8003708:	61da      	str	r2, [r3, #28]

      hsmbus->XferOptions = 0;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	63da      	str	r2, [r3, #60]	; 0x3c
      hsmbus->PreviousState = hsmbus->State;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ListenCpltCallback(hsmbus);
#else
      HAL_SMBUS_ListenCpltCallback(hsmbus);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 ff6e 	bl	8004608 <HAL_SMBUS_ListenCpltCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	fe00e800 	.word	0xfe00e800

08003744 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800374e:	2300      	movs	r3, #0
 8003750:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <SMBUS_Enable_IRQ+0x20>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003762:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800376a:	2b38      	cmp	r3, #56	; 0x38
 800376c:	d103      	bne.n	8003776 <SMBUS_Enable_IRQ+0x32>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003774:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800377c:	2bf2      	cmp	r3, #242	; 0xf2
 800377e:	d103      	bne.n	8003788 <SMBUS_Enable_IRQ+0x44>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8003786:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800378e:	2bd4      	cmp	r3, #212	; 0xd4
 8003790:	d103      	bne.n	800379a <SMBUS_Enable_IRQ+0x56>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8003798:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	6819      	ldr	r1, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68fa      	ldr	r2, [r7, #12]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	601a      	str	r2, [r3, #0]
}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <SMBUS_Disable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Disable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpstate = hsmbus->State;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c8:	60bb      	str	r3, [r7, #8]

  if ((tmpstate == HAL_SMBUS_STATE_READY) && ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d108      	bne.n	80037e2 <SMBUS_Disable_IRQ+0x2c>
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <SMBUS_Disable_IRQ+0x2c>
  {
    /* Disable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80037e8:	2bf2      	cmp	r3, #242	; 0xf2
 80037ea:	d11c      	bne.n	8003826 <SMBUS_Disable_IRQ+0x70>
  {
    /* Disable TC, STOP, NACK and TXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_TXI;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80037f2:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d108      	bne.n	8003814 <SMBUS_Disable_IRQ+0x5e>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d103      	bne.n	8003814 <SMBUS_Disable_IRQ+0x5e>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003812:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d103      	bne.n	8003826 <SMBUS_Disable_IRQ+0x70>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003824:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	f003 03d4 	and.w	r3, r3, #212	; 0xd4
 800382c:	2bd4      	cmp	r3, #212	; 0xd4
 800382e:	d11c      	bne.n	800386a <SMBUS_Disable_IRQ+0xb4>
  {
    /* Disable TC, STOP, NACK and RXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_RXI;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003836:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d108      	bne.n	8003858 <SMBUS_Disable_IRQ+0xa2>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d103      	bne.n	8003858 <SMBUS_Disable_IRQ+0xa2>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003856:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d103      	bne.n	800386a <SMBUS_Disable_IRQ+0xb4>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003868:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003870:	2b38      	cmp	r3, #56	; 0x38
 8003872:	d10e      	bne.n	8003892 <SMBUS_Disable_IRQ+0xdc>
  {
    /* Disable ADDR, STOP and NACK interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800387a:	60fb      	str	r3, [r7, #12]

    if (SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <SMBUS_Disable_IRQ+0xdc>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003890:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_SMBUS_DISABLE_IT(hsmbus, tmpisr);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6819      	ldr	r1, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	43da      	mvns	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	400a      	ands	r2, r1
 80038a2:	601a      	str	r2, [r3, #0]
}
 80038a4:	bf00      	nop
 80038a6:	3714      	adds	r7, #20
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr

080038b0 <SMBUS_ITErrorHandler>:
  * @brief  SMBUS interrupts error handler.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_ITErrorHandler(SMBUS_HandleTypeDef *hsmbus)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hsmbus->Instance->ISR);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hsmbus->Instance->CR1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpstate;
  uint32_t tmperror;

  /* SMBUS Bus error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00f      	beq.n	80038f2 <SMBUS_ITErrorHandler+0x42>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d00a      	beq.n	80038f2 <SMBUS_ITErrorHandler+0x42>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BERR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e0:	f043 0201 	orr.w	r2, r3, #1
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear BERR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_BERR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038f0:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00f      	beq.n	800391c <SMBUS_ITErrorHandler+0x6c>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00a      	beq.n	800391c <SMBUS_ITErrorHandler+0x6c>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_OVR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390a:	f043 0208 	orr.w	r2, r3, #8
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear OVR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_OVR);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800391a:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Arbitration Loss error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00f      	beq.n	8003946 <SMBUS_ITErrorHandler+0x96>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00a      	beq.n	8003946 <SMBUS_ITErrorHandler+0x96>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ARLO;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003934:	f043 0202 	orr.w	r2, r3, #2
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ARLO flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ARLO);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003944:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Timeout error interrupt occurred ---------------------------------------------*/
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00f      	beq.n	8003970 <SMBUS_ITErrorHandler+0xc0>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00a      	beq.n	8003970 <SMBUS_ITErrorHandler+0xc0>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BUSTIMEOUT;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395e:	f043 0220 	orr.w	r2, r3, #32
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear TIMEOUT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TIMEOUT);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800396e:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Alert error interrupt occurred -----------------------------------------------*/
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00f      	beq.n	800399a <SMBUS_ITErrorHandler+0xea>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <SMBUS_ITErrorHandler+0xea>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ALERT;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003988:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ALERT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003998:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Packet Error Check error interrupt occurred ----------------------------------*/
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00f      	beq.n	80039c4 <SMBUS_ITErrorHandler+0x114>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <SMBUS_ITErrorHandler+0x114>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_PECERR;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear PEC error flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_PECERR);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039c2:	61da      	str	r2, [r3, #28]
  }

  /* Flush TX register */
  SMBUS_Flush_TXDR(hsmbus);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f86c 	bl	8003aa2 <SMBUS_Flush_TXDR>

  /* Store current volatile hsmbus->ErrorCode, misra rule */
  tmperror = hsmbus->ErrorCode;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror != HAL_SMBUS_ERROR_NONE) && (tmperror != HAL_SMBUS_ERROR_ACKF))
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01d      	beq.n	8003a12 <SMBUS_ITErrorHandler+0x162>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d01a      	beq.n	8003a12 <SMBUS_ITErrorHandler+0x162>
  {
    /* Do not Reset the HAL state in case of ALERT error */
    if ((tmperror & HAL_SMBUS_ERROR_ALERT) != HAL_SMBUS_ERROR_ALERT)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d112      	bne.n	8003a0c <SMBUS_ITErrorHandler+0x15c>
    {
      /* Store current volatile hsmbus->State, misra rule */
      tmpstate = hsmbus->State;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ea:	60bb      	str	r3, [r7, #8]

      if (((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f003 0332 	and.w	r3, r3, #50	; 0x32
 80039f2:	2b32      	cmp	r3, #50	; 0x32
 80039f4:	d004      	beq.n	8003a00 <SMBUS_ITErrorHandler+0x150>
          || ((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX))
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80039fc:	2b42      	cmp	r3, #66	; 0x42
 80039fe:	d105      	bne.n	8003a0c <SMBUS_ITErrorHandler+0x15c>
      {
        /* Reset only HAL_SMBUS_STATE_SLAVE_BUSY_XX */
        /* keep HAL_SMBUS_STATE_LISTEN if set */
        hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State = HAL_SMBUS_STATE_LISTEN;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	649a      	str	r2, [r3, #72]	; 0x48

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fe67 	bl	80046e0 <HAL_SMBUS_ErrorCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
}
 8003a12:	bf00      	nop
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <SMBUS_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_WaitOnFlagUntilTimeout(SMBUS_HandleTypeDef *hsmbus, uint32_t Flag,
                                                      FlagStatus Status, uint32_t Timeout)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b086      	sub	sp, #24
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	60f8      	str	r0, [r7, #12]
 8003a22:	60b9      	str	r1, [r7, #8]
 8003a24:	603b      	str	r3, [r7, #0]
 8003a26:	4613      	mov	r3, r2
 8003a28:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 8003a2a:	f7fc fe35 	bl	8000698 <HAL_GetTick>
 8003a2e:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  while ((FlagStatus)(__HAL_SMBUS_GET_FLAG(hsmbus, Flag)) == Status)
 8003a30:	e021      	b.n	8003a76 <SMBUS_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d01d      	beq.n	8003a76 <SMBUS_WaitOnFlagUntilTimeout+0x5c>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a3a:	f7fc fe2d 	bl	8000698 <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <SMBUS_WaitOnFlagUntilTimeout+0x36>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d112      	bne.n	8003a76 <SMBUS_WaitOnFlagUntilTimeout+0x5c>
      {
        hsmbus->PreviousState = hsmbus->State;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State = HAL_SMBUS_STATE_READY;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	649a      	str	r2, [r3, #72]	; 0x48

        /* Update SMBUS error code */
        hsmbus->ErrorCode |= HAL_SMBUS_ERROR_HALTIMEOUT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a62:	f043 0210 	orr.w	r2, r3, #16
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e011      	b.n	8003a9a <SMBUS_WaitOnFlagUntilTimeout+0x80>
  while ((FlagStatus)(__HAL_SMBUS_GET_FLAG(hsmbus, Flag)) == Status)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	43da      	mvns	r2, r3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	4013      	ands	r3, r2
 8003a82:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bf0c      	ite	eq
 8003a8a:	2301      	moveq	r3, #1
 8003a8c:	2300      	movne	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	461a      	mov	r2, r3
 8003a92:	79fb      	ldrb	r3, [r7, #7]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d0cc      	beq.n	8003a32 <SMBUS_WaitOnFlagUntilTimeout+0x18>
      }
    }
  }

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <SMBUS_Flush_TXDR>:
  * @brief  SMBUS Tx data register flush process.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_Flush_TXDR(SMBUS_HandleTypeDef *hsmbus)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TXIS) != RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	f003 0302 	and.w	r3, r3, #2
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d103      	bne.n	8003ac0 <SMBUS_Flush_TXDR+0x1e>
  {
    hsmbus->Instance->TXDR = 0x00U;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2200      	movs	r2, #0
 8003abe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TXE) == RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d007      	beq.n	8003ade <SMBUS_Flush_TXDR+0x3c>
  {
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TXE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	699a      	ldr	r2, [r3, #24]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	619a      	str	r2, [r3, #24]
  }
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
	...

08003aec <SMBUS_TransferConfig>:
  *     @arg @ref SMBUS_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void SMBUS_TransferConfig(SMBUS_HandleTypeDef *hsmbus,  uint16_t DevAddress, uint8_t Size,
                                 uint32_t Mode, uint32_t Request)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	460b      	mov	r3, r1
 8003af8:	817b      	strh	r3, [r7, #10]
 8003afa:	4613      	mov	r3, r2
 8003afc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_TRANSFER_MODE(Mode));
  assert_param(IS_SMBUS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hsmbus->Instance->CR2,
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	0d5b      	lsrs	r3, r3, #21
 8003b08:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b0c:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <SMBUS_TransferConfig+0x58>)
 8003b0e:	430b      	orrs	r3, r1
 8003b10:	43db      	mvns	r3, r3
 8003b12:	ea02 0103 	and.w	r1, r2, r3
 8003b16:	897b      	ldrh	r3, [r7, #10]
 8003b18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b1c:	7a7b      	ldrb	r3, [r7, #9]
 8003b1e:	041b      	lsls	r3, r3, #16
 8003b20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31UL - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_PECBYTE)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	07ff63ff 	.word	0x07ff63ff

08003b48 <SMBUS_ConvertOtherXferOptions>:
  * @brief  Convert SMBUSx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_ConvertOtherXferOptions(SMBUS_HandleTypeDef *hsmbus)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to SMBUS_OTHER_FRAME_NO_PEC   */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to SMBUS_FIRST_FRAME                  */
  if (hsmbus->XferOptions == SMBUS_OTHER_FRAME_NO_PEC)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	2baa      	cmp	r3, #170	; 0xaa
 8003b56:	d103      	bne.n	8003b60 <SMBUS_ConvertOtherXferOptions+0x18>
  {
    hsmbus->XferOptions = SMBUS_FIRST_FRAME;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003b5e:	e01c      	b.n	8003b9a <SMBUS_ConvertOtherXferOptions+0x52>
  else if (hsmbus->XferOptions == SMBUS_OTHER_FRAME_WITH_PEC)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b64:	f5b3 4f2a 	cmp.w	r3, #43520	; 0xaa00
 8003b68:	d104      	bne.n	8003b74 <SMBUS_ConvertOtherXferOptions+0x2c>
    hsmbus->XferOptions = SMBUS_FIRST_FRAME | SMBUS_SENDPEC_MODE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b70:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003b72:	e012      	b.n	8003b9a <SMBUS_ConvertOtherXferOptions+0x52>
  else if (hsmbus->XferOptions == SMBUS_OTHER_AND_LAST_FRAME_NO_PEC)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b78:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003b7c:	d104      	bne.n	8003b88 <SMBUS_ConvertOtherXferOptions+0x40>
    hsmbus->XferOptions = SMBUS_FIRST_AND_LAST_FRAME_NO_PEC;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003b86:	e008      	b.n	8003b9a <SMBUS_ConvertOtherXferOptions+0x52>
  else if (hsmbus->XferOptions == SMBUS_OTHER_AND_LAST_FRAME_WITH_PEC)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003b90:	d103      	bne.n	8003b9a <SMBUS_ConvertOtherXferOptions+0x52>
    hsmbus->XferOptions = SMBUS_FIRST_AND_LAST_FRAME_WITH_PEC;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8003b98:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
	...

08003ba8 <STACK_SMBUS_LocateCommand>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void STACK_SMBUS_LocateCommand( SMBUS_StackHandleTypeDef *pStackContext )
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint8_t       commandCode = pStackContext->Buffer[0];
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003bb6:	73fb      	strb	r3, [r7, #15]
    STACK_SMBUS_LocateCommandARP( pStackContext, commandCode );
  }
  else
#endif /* ARP treatment */

    if (commandCode == PMBC_PMBUS_COMMAND_EXT)
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2bff      	cmp	r3, #255	; 0xff
 8003bbc:	d103      	bne.n	8003bc6 <STACK_SMBUS_LocateCommand+0x1e>
    {
      /*
        May not be exactly read byte, but the stack cannot know for sure
       */
      pStackContext->CurrentCommand = (st_command_t *)&EXTENDED_READ_BYTE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a1d      	ldr	r2, [pc, #116]	; (8003c38 <STACK_SMBUS_LocateCommand+0x90>)
 8003bc2:	60da      	str	r2, [r3, #12]
 8003bc4:	e033      	b.n	8003c2e <STACK_SMBUS_LocateCommand+0x86>
#ifdef DENSE_CMD_TBL

      /*
        initializing the command code search - the table must have all commands sorted, but there may be gaps
       */
      low = 0U;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
      top = pStackContext->CMD_tableSize - 1U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	613b      	str	r3, [r7, #16]
      pStackContext->CurrentCommand = NULL;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	60da      	str	r2, [r3, #12]

      while ( top >= low )
 8003bd8:	e025      	b.n	8003c26 <STACK_SMBUS_LocateCommand+0x7e>
      {
        /*
          Pick interval half
         */
        current = ( low + top ) >> 1U;
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	60bb      	str	r3, [r7, #8]
        if (pStackContext->CMD_table[current].cmnd_code == commandCode)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4413      	add	r3, r2
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d107      	bne.n	8003c06 <STACK_SMBUS_LocateCommand+0x5e>
        {
          /*
            we have found our command
           */
          pStackContext->CurrentCommand = &(pStackContext->CMD_table[current]);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	441a      	add	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	60da      	str	r2, [r3, #12]
          return;
 8003c04:	e013      	b.n	8003c2e <STACK_SMBUS_LocateCommand+0x86>
        }
        else if (pStackContext->CMD_table[current].cmnd_code < commandCode)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691a      	ldr	r2, [r3, #16]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d903      	bls.n	8003c20 <STACK_SMBUS_LocateCommand+0x78>
        {
          /*
            Look at upper half
          */
          low = current + 1U;
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	617b      	str	r3, [r7, #20]
 8003c1e:	e002      	b.n	8003c26 <STACK_SMBUS_LocateCommand+0x7e>
        }
        else
        {
          top = current - 1U;
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	613b      	str	r3, [r7, #16]
      while ( top >= low )
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d2d5      	bcs.n	8003bda <STACK_SMBUS_LocateCommand+0x32>
      {
        pStackContext->CurrentCommand = NULL;
      }
#endif /* DENSE_CMD_TBL */
    }
}
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	08005284 	.word	0x08005284

08003c3c <STACK_PMBUS_MasterZoneReadStatusCont>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the context information for the specified SMBUS stack.
  * @retval HAL_StatusTypeDef response code. STACK_OK if success, any other value means problem
  */
HAL_StatusTypeDef STACK_PMBUS_MasterZoneReadStatusCont(SMBUS_StackHandleTypeDef *pStackContext)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef     result = STACK_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]

  result = HAL_SMBUS_Master_Receive_IT( pStackContext->Device, SMBUS_ADDR_ZONE_READ, pStackContext->Buffer, 2U,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6858      	ldr	r0, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f103 0223 	add.w	r2, r3, #35	; 0x23
 8003c52:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <STACK_PMBUS_MasterZoneReadStatusCont+0x44>)
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2302      	movs	r3, #2
 8003c58:	2150      	movs	r1, #80	; 0x50
 8003c5a:	f7fe fde3 	bl	8002824 <HAL_SMBUS_Master_Receive_IT>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	73fb      	strb	r3, [r7, #15]
                                        SMBUS_OTHER_FRAME );
  if (result != HAL_OK )
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <STACK_PMBUS_MasterZoneReadStatusCont+0x38>
  {
    pStackContext->StateMachine |= SMBUS_SMS_ERROR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	601a      	str	r2, [r3, #0]
  }
  return result;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	12341234 	.word	0x12341234

08003c84 <STACK_PMBUS_ZoneReadCallback>:
  *                the context information for the specified SMBUS stack.
  * @param  number : Indicates if this command header, or read request
  * @retval HAL_StatusTypeDef response code. STACK_OK if success, any other value means problem
  */
__weak HAL_StatusTypeDef STACK_PMBUS_ZoneReadCallback( SMBUS_StackHandleTypeDef *pStackContext, uint8_t number )
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
  uint8_t ccc, mask;

  if ( number == 1U )
 8003c90:	78fb      	ldrb	r3, [r7, #3]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d108      	bne.n	8003ca8 <STACK_PMBUS_ZoneReadCallback+0x24>
  {
    /* Command just received, here the device should read COMMAND CONTROL CODE and Mask*/
    ccc = pStackContext->Buffer[0];
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003c9c:	73fb      	strb	r3, [r7, #15]
    mask =  pStackContext->Buffer[1];
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ca4:	73bb      	strb	r3, [r7, #14]
 8003ca6:	e009      	b.n	8003cbc <STACK_PMBUS_ZoneReadCallback+0x38>
    NOT_USED(mask);
  }
  else
  {
    /* Read phase of the Zone read - arbitarry number returned by example*/
    pStackContext->Buffer[1] = 0xA5U;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	22a5      	movs	r2, #165	; 0xa5
 8003cac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    pStackContext->Buffer[2] = pStackContext->OwnAddress;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /*
    Returning zero means no problem with execution, if reply is expected, then it must be placed to the IO buffer
   */
  return STACK_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
	...

08003ccc <STACK_SMBUS_ResolveContext>:
  * @param  hsmbus : Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval Pointer to relevant stack instance.
  */
SMBUS_StackHandleTypeDef *STACK_SMBUS_ResolveContext( SMBUS_HandleTypeDef *hsmbus )
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  SMBUS_StackHandleTypeDef *pSelected = NULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
  uint32_t index = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]
  {
    /*
      The loop is searching for the first stack context instance initialized to
      use the actual HAL Driver handle
     */
    pSelected = SMBUSInstancesList[index];
 8003cdc:	4a0d      	ldr	r2, [pc, #52]	; (8003d14 <STACK_SMBUS_ResolveContext+0x48>)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ce4:	60fb      	str	r3, [r7, #12]
    if  ( pSelected->Device != hsmbus )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <STACK_SMBUS_ResolveContext+0x28>
    {
      pSelected = NULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
    }
    index++;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	60bb      	str	r3, [r7, #8]
  } while ((index < SMBUS_INSTANCES_COUNT ) && ( pSelected == NULL ));
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d802      	bhi.n	8003d06 <STACK_SMBUS_ResolveContext+0x3a>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0ea      	beq.n	8003cdc <STACK_SMBUS_ResolveContext+0x10>

  /*
    Error - no identified stack instance
   */
  return pSelected;
 8003d06:	68fb      	ldr	r3, [r7, #12]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3714      	adds	r7, #20
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	20000084 	.word	0x20000084

08003d18 <HAL_SMBUS_MasterTxCpltCallback>:
  * @param  hsmbus : Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_MasterTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af02      	add	r7, sp, #8
 8003d1e:	6078      	str	r0, [r7, #4]
  uint16_t              size;

  /*
    Resolve which stack serves the port that initiated callback
   */
  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ffd3 	bl	8003ccc <STACK_SMBUS_ResolveContext>
 8003d26:	60b8      	str	r0, [r7, #8]

  /* Transmission phase is completed */
  pStackContext->StateMachine &= ~SMBUS_SMS_TRANSMIT;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 0202 	bic.w	r2, r3, #2
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	601a      	str	r2, [r3, #0]
  */

#ifdef PMBUS13
  /* If this is a READ_ZONE, then it gets special treatment.
    Only simple status read is supported in this example */
  if ( pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	8bdb      	ldrh	r3, [r3, #30]
 8003d38:	2b50      	cmp	r3, #80	; 0x50
 8003d3a:	d103      	bne.n	8003d44 <HAL_SMBUS_MasterTxCpltCallback+0x2c>
  {
    /* Requesting next response */
    STACK_PMBUS_MasterZoneReadStatusCont(pStackContext);
 8003d3c:	68b8      	ldr	r0, [r7, #8]
 8003d3e:	f7ff ff7d 	bl	8003c3c <STACK_PMBUS_MasterZoneReadStatusCont>
    return;
 8003d42:	e062      	b.n	8003e0a <HAL_SMBUS_MasterTxCpltCallback+0xf2>
  /*
   Is there data to receive after transfer?
   check if the command includes reading phase and if application that invoked
   the command cared for receiving data from the slave
  */
  if ( pStackContext->CurrentCommand != 0U )
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d05b      	beq.n	8003e04 <HAL_SMBUS_MasterTxCpltCallback+0xec>
  {
    if (
      ( ( pStackContext->CurrentCommand->cmnd_query & BLOCK ) == BLOCK ) && \
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	785b      	ldrb	r3, [r3, #1]
 8003d52:	f003 0310 	and.w	r3, r3, #16
    if (
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d01f      	beq.n	8003d9a <HAL_SMBUS_MasterTxCpltCallback+0x82>
      (
        ( ( pStackContext->CurrentCommand->cmnd_query & PROCESS_CALL ) == PROCESS_CALL ) || \
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	785b      	ldrb	r3, [r3, #1]
 8003d60:	b25b      	sxtb	r3, r3
      ( ( pStackContext->CurrentCommand->cmnd_query & BLOCK ) == BLOCK ) && \
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	db06      	blt.n	8003d74 <HAL_SMBUS_MasterTxCpltCallback+0x5c>
        ( ( pStackContext->OpMode & READ ) == READ )
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d6c:	f003 0320 	and.w	r3, r3, #32
        ( ( pStackContext->CurrentCommand->cmnd_query & PROCESS_CALL ) == PROCESS_CALL ) || \
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d012      	beq.n	8003d9a <HAL_SMBUS_MasterTxCpltCallback+0x82>
    )
    {
      /*
        the amount of data to be read is yet to be sent by the slave - reading the byte count now:
      */
      pStackContext->StateMachine |= SMBUS_SMS_RECEIVE | SMBUS_SMS_PROCESSING;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f043 020c 	orr.w	r2, r3, #12
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	601a      	str	r2, [r3, #0]
      HAL_SMBUS_Master_Receive_IT( hsmbus, pStackContext->SlaveAddress, &(pStackContext->Buffer[1]), 1U, SMBUS_NEXT_FRAME );
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	8bd9      	ldrh	r1, [r3, #30]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003d8a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d8e:	9300      	str	r3, [sp, #0]
 8003d90:	2301      	movs	r3, #1
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fe fd46 	bl	8002824 <HAL_SMBUS_Master_Receive_IT>
 8003d98:	e037      	b.n	8003e0a <HAL_SMBUS_MasterTxCpltCallback+0xf2>
    }
    else if ((pStackContext->CurrentCommand->cmnd_master_Rx_size > 0U ) && (( pStackContext->OpMode & WRITE ) == 0U ))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	78db      	ldrb	r3, [r3, #3]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d02b      	beq.n	8003dfc <HAL_SMBUS_MasterTxCpltCallback+0xe4>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d124      	bne.n	8003dfc <HAL_SMBUS_MasterTxCpltCallback+0xe4>
    {
      /*
        the amount of data to be read is known and determined by the command code
      */
      pStackContext->StateMachine |= SMBUS_SMS_RECEIVE;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f043 0204 	orr.w	r2, r3, #4
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	601a      	str	r2, [r3, #0]
      size = pStackContext->CurrentCommand->cmnd_master_Rx_size;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	78db      	ldrb	r3, [r3, #3]
 8003dc4:	81fb      	strh	r3, [r7, #14]
      if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_SMBUS_MasterTxCpltCallback+0xc0>
      {
        size += 1U;
 8003dd2:	89fb      	ldrh	r3, [r7, #14]
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	81fb      	strh	r3, [r7, #14]
      }
      HAL_SMBUS_Master_Receive_IT( hsmbus, pStackContext->SlaveAddress, &(pStackContext->Buffer[1]), size,
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	8bd9      	ldrh	r1, [r3, #30]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f103 0224 	add.w	r2, r3, #36	; 0x24
                                   SMBUS_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ));
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
      HAL_SMBUS_Master_Receive_IT( hsmbus, pStackContext->SlaveAddress, &(pStackContext->Buffer[1]), size,
 8003dea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dee:	89f8      	ldrh	r0, [r7, #14]
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	4603      	mov	r3, r0
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7fe fd15 	bl	8002824 <HAL_SMBUS_Master_Receive_IT>
 8003dfa:	e006      	b.n	8003e0a <HAL_SMBUS_MasterTxCpltCallback+0xf2>
    else
    {
      /*
        There was an alert during command that we could not treat before
       */
      STACK_SMBUS_ReadyIfNoAlert( pStackContext );
 8003dfc:	68b8      	ldr	r0, [r7, #8]
 8003dfe:	f000 fde7 	bl	80049d0 <STACK_SMBUS_ReadyIfNoAlert>
 8003e02:	e002      	b.n	8003e0a <HAL_SMBUS_MasterTxCpltCallback+0xf2>
  else
  {
    /*
      There was an alert during command that we could not treat before
     */
    STACK_SMBUS_ReadyIfNoAlert( pStackContext );
 8003e04:	68b8      	ldr	r0, [r7, #8]
 8003e06:	f000 fde3 	bl	80049d0 <STACK_SMBUS_ReadyIfNoAlert>
  }
}
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_SMBUS_MasterRxCpltCallback>:
  * @param  hsmbus : Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_MasterRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	6078      	str	r0, [r7, #4]
  uint8_t            size;

  /*
    Resolve which stack serves the port that initiated callback
   */
  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f7ff ff57 	bl	8003ccc <STACK_SMBUS_ResolveContext>
 8003e1e:	60b8      	str	r0, [r7, #8]

#ifdef PMBUS13
  /* If this is a READ_ZONE, then it gets special treatment.
    Only simple status read is supported in this example */
  if ( pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	8bdb      	ldrh	r3, [r3, #30]
 8003e24:	2b50      	cmp	r3, #80	; 0x50
 8003e26:	d110      	bne.n	8003e4a <HAL_SMBUS_MasterRxCpltCallback+0x3a>
  {
    /* Fail-safe stopping the Zone Read on empty answer */
    if ( pStackContext->Buffer[0] != 0xFFU )
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003e2e:	2bff      	cmp	r3, #255	; 0xff
 8003e30:	d007      	beq.n	8003e42 <HAL_SMBUS_MasterRxCpltCallback+0x32>
    {
      pStackContext->Device->PreviousState = HAL_SMBUS_STATE_MASTER_BUSY_TX;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2212      	movs	r2, #18
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
      STACK_PMBUS_MasterZoneReadStatusCont(pStackContext);
 8003e3a:	68b8      	ldr	r0, [r7, #8]
 8003e3c:	f7ff fefe 	bl	8003c3c <STACK_PMBUS_MasterZoneReadStatusCont>
      /*
        There could be an alert during command that we could not treat before
      */
      STACK_SMBUS_ReadyIfNoAlert( pStackContext );
    }
    return;
 8003e40:	e065      	b.n	8003f0e <HAL_SMBUS_MasterRxCpltCallback+0xfe>
      STACK_SMBUS_ReadyIfNoAlert( pStackContext );
 8003e42:	68b8      	ldr	r0, [r7, #8]
 8003e44:	f000 fdc4 	bl	80049d0 <STACK_SMBUS_ReadyIfNoAlert>
    return;
 8003e48:	e061      	b.n	8003f0e <HAL_SMBUS_MasterRxCpltCallback+0xfe>
  }
#endif

  if (( pStackContext->StateMachine & SMBUS_SMS_RECEIVE ) == SMBUS_SMS_RECEIVE )
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0304 	and.w	r3, r3, #4
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d055      	beq.n	8003f02 <HAL_SMBUS_MasterRxCpltCallback+0xf2>
  {
    /*
      Reception completed
     */
    pStackContext->StateMachine &= ~SMBUS_SMS_RECEIVE;
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f023 0204 	bic.w	r2, r3, #4
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	601a      	str	r2, [r3, #0]

    /*
      A case of block transfer follow-up follows
     */
    if (
      (( pStackContext->CurrentCommand->cmnd_query & BLOCK ) == BLOCK ) &&
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	f003 0310 	and.w	r3, r3, #16
    if (
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d044      	beq.n	8003efa <HAL_SMBUS_MasterRxCpltCallback+0xea>
      (( pStackContext->StateMachine & SMBUS_SMS_PROCESSING ) == SMBUS_SMS_PROCESSING)
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 0308 	and.w	r3, r3, #8
      (( pStackContext->CurrentCommand->cmnd_query & BLOCK ) == BLOCK ) &&
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d03e      	beq.n	8003efa <HAL_SMBUS_MasterRxCpltCallback+0xea>
    {
      /*
        the amount of data to be read was sent by the slave - it is on position 1 of the IO buffer
        is limited to STACK_NBYTE_SIZE
      */
      if ( pStackContext->Buffer[1] > STACK_NBYTE_SIZE )
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e82:	2b28      	cmp	r3, #40	; 0x28
 8003e84:	d903      	bls.n	8003e8e <HAL_SMBUS_MasterRxCpltCallback+0x7e>
      {
        pStackContext->Buffer[1] = STACK_NBYTE_SIZE;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2228      	movs	r2, #40	; 0x28
 8003e8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      }

      if (  pStackContext->Buffer[1] == 0U )
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d103      	bne.n	8003ea0 <HAL_SMBUS_MasterRxCpltCallback+0x90>
      {
        /*
        special case - slave indicates it has no further data to send
        We generate stop and close the frame
        */
        STACK_SMBUS_ReadyIfNoAlert( pStackContext );
 8003e98:	68b8      	ldr	r0, [r7, #8]
 8003e9a:	f000 fd99 	bl	80049d0 <STACK_SMBUS_ReadyIfNoAlert>
      if (  pStackContext->Buffer[1] == 0U )
 8003e9e:	e036      	b.n	8003f0e <HAL_SMBUS_MasterRxCpltCallback+0xfe>
      else
      {
        /*
          This will conclude the block processing, we clear the flag
         */
        pStackContext->StateMachine &= ~SMBUS_SMS_PROCESSING;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f023 0208 	bic.w	r2, r3, #8
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	601a      	str	r2, [r3, #0]

        /*
          Reception next
          Usually there is something left to be read, we continue on position 2 of the IO buffer
         */
        pStackContext->StateMachine |= SMBUS_SMS_RECEIVE;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f043 0204 	orr.w	r2, r3, #4
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	601a      	str	r2, [r3, #0]
        size = pStackContext->Buffer[1];
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ebe:	73fb      	strb	r3, [r7, #15]
        /* Applying upper limit on read size */
        if ( size > pStackContext->CurrentCommand->cmnd_master_Rx_size )
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	78db      	ldrb	r3, [r3, #3]
 8003ec6:	7bfa      	ldrb	r2, [r7, #15]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d903      	bls.n	8003ed4 <HAL_SMBUS_MasterRxCpltCallback+0xc4>
        {
          size = pStackContext->CurrentCommand->cmnd_master_Rx_size;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	78db      	ldrb	r3, [r3, #3]
 8003ed2:	73fb      	strb	r3, [r7, #15]
        }
        HAL_SMBUS_Master_Receive_IT( hsmbus, pStackContext->SlaveAddress, &(pStackContext->Buffer[2]), (uint16_t)size,
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	8bd9      	ldrh	r1, [r3, #30]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	b298      	uxth	r0, r3
                                     SMBUS_LAST_FRAME_NO_PEC  | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ));
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        HAL_SMBUS_Master_Receive_IT( hsmbus, pStackContext->SlaveAddress, &(pStackContext->Buffer[2]), (uint16_t)size,
 8003eea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eee:	9300      	str	r3, [sp, #0]
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fe fc96 	bl	8002824 <HAL_SMBUS_Master_Receive_IT>
      if (  pStackContext->Buffer[1] == 0U )
 8003ef8:	e009      	b.n	8003f0e <HAL_SMBUS_MasterRxCpltCallback+0xfe>
    else
    {
      /*
        There could be an alert during command that we could not treat before
      */
      STACK_SMBUS_ReadyIfNoAlert( pStackContext );
 8003efa:	68b8      	ldr	r0, [r7, #8]
 8003efc:	f000 fd68 	bl	80049d0 <STACK_SMBUS_ReadyIfNoAlert>
 8003f00:	e005      	b.n	8003f0e <HAL_SMBUS_MasterRxCpltCallback+0xfe>
    }
  }
  else
  {
    pStackContext->StateMachine |= SMBUS_SMS_ERROR;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	601a      	str	r2, [r3, #0]
  }
  /* Program should not reach this statement */
}
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_SMBUS_SlaveTxCpltCallback>:
  * @param  hsmbus: Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_SlaveTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  SMBUS_StackHandleTypeDef *pStackContext;

  /*
    Resolve which stack serves the port that initiated callback
   */
  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fed5 	bl	8003ccc <STACK_SMBUS_ResolveContext>
 8003f22:	60f8      	str	r0, [r7, #12]

  /*
    Completed transmission means this was not a quick command read but actual read.
    We need to record this by clearing the flag.
   */
  pStackContext->StateMachine &= ~SMBUS_SMS_TRANSMIT;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f023 0202 	bic.w	r2, r3, #2
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	601a      	str	r2, [r3, #0]

#ifdef  PMBUS13
  /*
    A case of Zone read - this slave devide has transmitted its data, will ignore further reads
   */
  if (pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8bdb      	ldrh	r3, [r3, #30]
 8003f34:	2b50      	cmp	r3, #80	; 0x50
 8003f36:	d10d      	bne.n	8003f54 <HAL_SMBUS_SlaveTxCpltCallback+0x40>
  {
    __SMBUS_ZONE_DISABLE(hsmbus);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68da      	ldr	r2, [r3, #12]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f46:	60da      	str	r2, [r3, #12]
    pStackContext->StateMachine |= SMBUS_SMS_ZONE_READ;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	601a      	str	r2, [r3, #0]
  }
#endif
}
 8003f54:	bf00      	nop
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_SMBUS_SlaveRxCpltCallback>:
  * @param  hsmbus : Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_SlaveRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  SMBUS_StackHandleTypeDef *pStackContext;
  uint32_t       size;
  uint32_t       xFerOptions = SMBUS_NEXT_FRAME;
 8003f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f68:	613b      	str	r3, [r7, #16]

  /*
    Resolve which stack serves the port that initiated callback
   */
  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff feae 	bl	8003ccc <STACK_SMBUS_ResolveContext>
 8003f70:	60f8      	str	r0, [r7, #12]

  if (( pStackContext->StateMachine & SMBUS_SMS_IGNORED ) == SMBUS_SMS_IGNORED )
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d018      	beq.n	8003fb0 <HAL_SMBUS_SlaveRxCpltCallback+0x54>
  {
    __HAL_SMBUS_GENERATE_NACK( hsmbus );
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f8c:	605a      	str	r2, [r3, #4]
    /* TCR may still stretch the SCL */
    if (( hsmbus->Instance->ISR & I2C_ISR_TCR ) == I2C_ISR_TCR )
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f98:	2b80      	cmp	r3, #128	; 0x80
 8003f9a:	f040 8139 	bne.w	8004210 <HAL_SMBUS_SlaveRxCpltCallback+0x2b4>
    {
      hsmbus->Instance->CR2 |= (((uint32_t) 1U << 16U ) & I2C_CR2_NBYTES);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003fac:	605a      	str	r2, [r3, #4]
        }
#endif
      }
    }
  }
}
 8003fae:	e12f      	b.n	8004210 <HAL_SMBUS_SlaveRxCpltCallback+0x2b4>
    if ( pStackContext->CurrentCommand == NULL )
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f040 80bd 	bne.w	8004134 <HAL_SMBUS_SlaveRxCpltCallback+0x1d8>
      pStackContext->StateMachine &= ~SMBUS_SMS_RECEIVE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 0204 	bic.w	r2, r3, #4
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	601a      	str	r2, [r3, #0]
      if (pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	8bdb      	ldrh	r3, [r3, #30]
 8003fca:	2b50      	cmp	r3, #80	; 0x50
 8003fcc:	d116      	bne.n	8003ffc <HAL_SMBUS_SlaveRxCpltCallback+0xa0>
        if ( pStackContext->TheZone.readZone == pStackContext->TheZone.activeReadZone )
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	7e1a      	ldrb	r2, [r3, #24]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	7e9b      	ldrb	r3, [r3, #26]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d103      	bne.n	8003fe2 <HAL_SMBUS_SlaveRxCpltCallback+0x86>
          pStackContext->CurrentCommand = (st_command_t *) &ZONE_READ_COMMAND;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	4a8e      	ldr	r2, [pc, #568]	; (8004218 <HAL_SMBUS_SlaveRxCpltCallback+0x2bc>)
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	e00f      	b.n	8004002 <HAL_SMBUS_SlaveRxCpltCallback+0xa6>
          pStackContext->StateMachine |= SMBUS_SMS_IGNORED;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f043 0220 	orr.w	r2, r3, #32
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	601a      	str	r2, [r3, #0]
          pStackContext->StateMachine |= SMBUS_SMS_ZONE_READ;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	e002      	b.n	8004002 <HAL_SMBUS_SlaveRxCpltCallback+0xa6>
        STACK_SMBUS_LocateCommand( pStackContext );
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f7ff fdd3 	bl	8003ba8 <STACK_SMBUS_LocateCommand>
      if ( pStackContext->CurrentCommand == NULL )
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d11e      	bne.n	8004048 <HAL_SMBUS_SlaveRxCpltCallback+0xec>
        pStackContext->StateMachine |= SMBUS_SMS_IGNORED;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f043 0220 	orr.w	r2, r3, #32
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	601a      	str	r2, [r3, #0]
        __HAL_SMBUS_GENERATE_NACK( hsmbus );
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004024:	605a      	str	r2, [r3, #4]
        if (( hsmbus->Instance->ISR & I2C_ISR_TCR ) == I2C_ISR_TCR )
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004030:	2b80      	cmp	r3, #128	; 0x80
 8004032:	f040 80ed 	bne.w	8004210 <HAL_SMBUS_SlaveRxCpltCallback+0x2b4>
          hsmbus->Instance->CR2 |= (((uint32_t) 1 << 16 ) & I2C_CR2_NBYTES);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004044:	605a      	str	r2, [r3, #4]
}
 8004046:	e0e3      	b.n	8004210 <HAL_SMBUS_SlaveRxCpltCallback+0x2b4>
          (( pStackContext->CurrentCommand->cmnd_query & BLOCK_WRITE ) == BLOCK_WRITE ) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	785b      	ldrb	r3, [r3, #1]
 800404e:	f003 0350 	and.w	r3, r3, #80	; 0x50
        if (
 8004052:	2b50      	cmp	r3, #80	; 0x50
 8004054:	d004      	beq.n	8004060 <HAL_SMBUS_SlaveRxCpltCallback+0x104>
          ( pStackContext->CurrentCommand->cmnd_query == BLK_PRC_CALL )
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	785b      	ldrb	r3, [r3, #1]
          (( pStackContext->CurrentCommand->cmnd_query & BLOCK_WRITE ) == BLOCK_WRITE ) ||
 800405c:	2b90      	cmp	r3, #144	; 0x90
 800405e:	d114      	bne.n	800408a <HAL_SMBUS_SlaveRxCpltCallback+0x12e>
          pStackContext->Byte_count++;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8b9b      	ldrh	r3, [r3, #28]
 8004064:	3301      	adds	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	839a      	strh	r2, [r3, #28]
          pStackContext->StateMachine |= SMBUS_SMS_RECEIVE | SMBUS_SMS_PROCESSING;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f043 020c 	orr.w	r2, r3, #12
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	601a      	str	r2, [r3, #0]
          HAL_SMBUS_Slave_Receive_IT( hsmbus, &(pStackContext->Buffer[1]), 1U, xFerOptions );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	2201      	movs	r2, #1
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f7fe fd5e 	bl	8002b44 <HAL_SMBUS_Slave_Receive_IT>
}
 8004088:	e0c2      	b.n	8004210 <HAL_SMBUS_SlaveRxCpltCallback+0x2b4>
          if (( pStackContext->CurrentCommand->cmnd_query & WRITE ) == WRITE )
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	785b      	ldrb	r3, [r3, #1]
 8004090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d014      	beq.n	80040c2 <HAL_SMBUS_SlaveRxCpltCallback+0x166>
            size = pStackContext->CurrentCommand->cmnd_master_Tx_size;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	789b      	ldrb	r3, [r3, #2]
 800409e:	617b      	str	r3, [r7, #20]
            if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SMBUS_SlaveRxCpltCallback+0x156>
              size += PEC_SIZE;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	3301      	adds	r3, #1
 80040b0:	617b      	str	r3, [r7, #20]
            xFerOptions = SMBUS_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE );
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040be:	613b      	str	r3, [r7, #16]
 80040c0:	e003      	b.n	80040ca <HAL_SMBUS_SlaveRxCpltCallback+0x16e>
            size = pStackContext->CurrentCommand->cmnd_master_Tx_size;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	789b      	ldrb	r3, [r3, #2]
 80040c8:	617b      	str	r3, [r7, #20]
            (pStackContext->CurrentCommand->cmnd_code == SMBUS_COMMAND_EXT ) ||
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	781b      	ldrb	r3, [r3, #0]
          if (
 80040d0:	2bff      	cmp	r3, #255	; 0xff
 80040d2:	d003      	beq.n	80040dc <HAL_SMBUS_SlaveRxCpltCallback+0x180>
            (pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8bdb      	ldrh	r3, [r3, #30]
            (pStackContext->CurrentCommand->cmnd_code == SMBUS_COMMAND_EXT ) ||
 80040d8:	2b50      	cmp	r3, #80	; 0x50
 80040da:	d101      	bne.n	80040e0 <HAL_SMBUS_SlaveRxCpltCallback+0x184>
            xFerOptions = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	613b      	str	r3, [r7, #16]
          if ( size > 1U )
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d91b      	bls.n	800411e <HAL_SMBUS_SlaveRxCpltCallback+0x1c2>
            pStackContext->Byte_count += (uint16_t)size - 1U;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8b9a      	ldrh	r2, [r3, #28]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	839a      	strh	r2, [r3, #28]
            pStackContext->StateMachine |= SMBUS_SMS_RECEIVE;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f043 0204 	orr.w	r2, r3, #4
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	601a      	str	r2, [r3, #0]
            HAL_SMBUS_Slave_Receive_IT( hsmbus, &(pStackContext->Buffer[1]), (uint16_t)size - 1U, xFerOptions );
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	b29b      	uxth	r3, r3
 8004110:	3b01      	subs	r3, #1
 8004112:	b29a      	uxth	r2, r3
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fe fd14 	bl	8002b44 <HAL_SMBUS_Slave_Receive_IT>
}
 800411c:	e078      	b.n	8004210 <HAL_SMBUS_SlaveRxCpltCallback+0x2b4>
            pStackContext->Device->Instance->CR2 |= 0x0001000U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004130:	605a      	str	r2, [r3, #4]
}
 8004132:	e06d      	b.n	8004210 <HAL_SMBUS_SlaveRxCpltCallback+0x2b4>
      if (( pStackContext->StateMachine & SMBUS_SMS_PROCESSING) == SMBUS_SMS_PROCESSING)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0308 	and.w	r3, r3, #8
 800413c:	2b00      	cmp	r3, #0
 800413e:	d04a      	beq.n	80041d6 <HAL_SMBUS_SlaveRxCpltCallback+0x27a>
          size = pStackContext->Buffer[1];
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004146:	617b      	str	r3, [r7, #20]
          if ( size > STACK_NBYTE_SIZE )
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b28      	cmp	r3, #40	; 0x28
 800414c:	d901      	bls.n	8004152 <HAL_SMBUS_SlaveRxCpltCallback+0x1f6>
            size = STACK_NBYTE_SIZE;
 800414e:	2328      	movs	r3, #40	; 0x28
 8004150:	617b      	str	r3, [r7, #20]
          if ( size != 0U )
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d037      	beq.n	80041c8 <HAL_SMBUS_SlaveRxCpltCallback+0x26c>
              ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE) &&
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
            if (
 8004160:	2b00      	cmp	r3, #0
 8004162:	d01f      	beq.n	80041a4 <HAL_SMBUS_SlaveRxCpltCallback+0x248>
              ((pStackContext->CurrentCommand->cmnd_query & PROCESS_CALL) == 0U )
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	785b      	ldrb	r3, [r3, #1]
 800416a:	b25b      	sxtb	r3, r3
              ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE) &&
 800416c:	2b00      	cmp	r3, #0
 800416e:	db19      	blt.n	80041a4 <HAL_SMBUS_SlaveRxCpltCallback+0x248>
              size += PEC_SIZE;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	3301      	adds	r3, #1
 8004174:	617b      	str	r3, [r7, #20]
              pStackContext->Byte_count += (uint16_t)size;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8b9a      	ldrh	r2, [r3, #28]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	b29b      	uxth	r3, r3
 800417e:	4413      	add	r3, r2
 8004180:	b29a      	uxth	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	839a      	strh	r2, [r3, #28]
              HAL_SMBUS_Slave_Receive_IT( hsmbus, &(pStackContext->Buffer[2]), (uint16_t)size,
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	b29a      	uxth	r2, r3
                                          SMBUS_LAST_FRAME_NO_PEC + (pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) );
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
              HAL_SMBUS_Slave_Receive_IT( hsmbus, &(pStackContext->Buffer[2]), (uint16_t)size,
 8004198:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f7fe fcd1 	bl	8002b44 <HAL_SMBUS_Slave_Receive_IT>
 80041a2:	e011      	b.n	80041c8 <HAL_SMBUS_SlaveRxCpltCallback+0x26c>
              pStackContext->Byte_count += (uint16_t)size;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8b9a      	ldrh	r2, [r3, #28]
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	4413      	add	r3, r2
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	839a      	strh	r2, [r3, #28]
              HAL_SMBUS_Slave_Receive_IT( hsmbus, &(pStackContext->Buffer[2]), (uint16_t)size,
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f103 0125 	add.w	r1, r3, #37	; 0x25
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	b29a      	uxth	r2, r3
 80041be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7fe fcbe 	bl	8002b44 <HAL_SMBUS_Slave_Receive_IT>
          pStackContext->StateMachine &= ~(SMBUS_SMS_RECEIVE | SMBUS_SMS_PROCESSING);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f023 020c 	bic.w	r2, r3, #12
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	601a      	str	r2, [r3, #0]
}
 80041d4:	e01c      	b.n	8004210 <HAL_SMBUS_SlaveRxCpltCallback+0x2b4>
      else if (pStackContext->CurrentCommand->cmnd_code == SMBUS_COMMAND_EXT )
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2bff      	cmp	r3, #255	; 0xff
 80041de:	d109      	bne.n	80041f4 <HAL_SMBUS_SlaveRxCpltCallback+0x298>
        pStackContext->StateMachine &= ~SMBUS_SMS_RECEIVE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f023 0204 	bic.w	r2, r3, #4
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	601a      	str	r2, [r3, #0]
        STACK_SMBUS_ExtendCommand( pStackContext );
 80041ec:	68f8      	ldr	r0, [r7, #12]
 80041ee:	f000 fd99 	bl	8004d24 <STACK_SMBUS_ExtendCommand>
}
 80041f2:	e00d      	b.n	8004210 <HAL_SMBUS_SlaveRxCpltCallback+0x2b4>
        pStackContext->StateMachine &= ~SMBUS_SMS_RECEIVE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f023 0204 	bic.w	r2, r3, #4
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	601a      	str	r2, [r3, #0]
        if (pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8bdb      	ldrh	r3, [r3, #30]
 8004204:	2b50      	cmp	r3, #80	; 0x50
 8004206:	d103      	bne.n	8004210 <HAL_SMBUS_SlaveRxCpltCallback+0x2b4>
          STACK_PMBUS_ZoneReadCallback( pStackContext, 1U );
 8004208:	2101      	movs	r1, #1
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f7ff fd3a 	bl	8003c84 <STACK_PMBUS_ZoneReadCallback>
}
 8004210:	bf00      	nop
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	08005288 	.word	0x08005288

0800421c <HAL_SMBUS_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read)
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_SMBUS_AddrCallback(SMBUS_HandleTypeDef *hsmbus, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	70fb      	strb	r3, [r7, #3]
 8004228:	4613      	mov	r3, r2
 800422a:	803b      	strh	r3, [r7, #0]
  SMBUS_StackHandleTypeDef *pStackContext;
  uint16_t           size;
  uint8_t            response;
  uint32_t           result = STACK_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]

  /*
    Resolve which stack serves the port that initiated callback
   */
  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f7ff fd4b 	bl	8003ccc <STACK_SMBUS_ResolveContext>
 8004236:	60f8      	str	r0, [r7, #12]

  /*
     Clear the history of command records - if flag was not cleared yet, the application probably doesn't need it
   */
  pStackContext->StateMachine &= ~( SMBUS_SMS_QUICK_CMD_W | SMBUS_SMS_QUICK_CMD_R );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	601a      	str	r2, [r3, #0]

  /*
    First normalize address - bit-shift it
   */
  AddrMatchCode = AddrMatchCode << 1U;
 8004244:	883b      	ldrh	r3, [r7, #0]
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	803b      	strh	r3, [r7, #0]

  /*
    Check for host notify protocol ( we are host and being addressed )
   */
  if (
    (( pStackContext->Device->Instance->CR1 & SMBUS_PERIPHERAL_MODE_SMBUS_HOST ) == SMBUS_PERIPHERAL_MODE_SMBUS_HOST) &&
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
  if (
 8004256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800425a:	d11b      	bne.n	8004294 <HAL_SMBUS_AddrCallback+0x78>
    (( pStackContext->Device->Instance->CR1 & SMBUS_PERIPHERAL_MODE_SMBUS_HOST ) == SMBUS_PERIPHERAL_MODE_SMBUS_HOST) &&
 800425c:	883b      	ldrh	r3, [r7, #0]
 800425e:	2b10      	cmp	r3, #16
 8004260:	d118      	bne.n	8004294 <HAL_SMBUS_AddrCallback+0x78>
    ( AddrMatchCode == SMBUS_ADDR_HOST ) &&
 8004262:	78fb      	ldrb	r3, [r7, #3]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d115      	bne.n	8004294 <HAL_SMBUS_AddrCallback+0x78>
  )
  {
    /*
      In this case we know exactly the frame is 3B long, we are taking a short-cut.
     */
    pStackContext->StateMachine &= ~SMBUS_SMS_READY;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f023 0201 	bic.w	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	601a      	str	r2, [r3, #0]
    pStackContext->Byte_count = 3U;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2203      	movs	r2, #3
 8004278:	839a      	strh	r2, [r3, #28]
    HAL_SMBUS_Slave_Receive_IT( hsmbus, pStackContext->Buffer, 3U, SMBUS_FIRST_AND_LAST_FRAME_NO_PEC );
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8004280:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004284:	2203      	movs	r2, #3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fe fc5c 	bl	8002b44 <HAL_SMBUS_Slave_Receive_IT>
    pStackContext->CurrentCommand = &HOST_NOTIFY_PROTOCOL;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4a95      	ldr	r2, [pc, #596]	; (80044e4 <HAL_SMBUS_AddrCallback+0x2c8>)
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	e1b4      	b.n	80045fe <HAL_SMBUS_AddrCallback+0x3e2>
  }

  /*
    Try match for ARA - alert response is checked, but only in case it is us, who issued the signal ( I2C_CR1_ALERTEN )
   */
  else if ( ( AddrMatchCode == SMBUS_ADDR_ARA ) && (TransferDirection != 0U)
 8004294:	883b      	ldrh	r3, [r7, #0]
 8004296:	2b18      	cmp	r3, #24
 8004298:	d132      	bne.n	8004300 <HAL_SMBUS_AddrCallback+0xe4>
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02f      	beq.n	8004300 <HAL_SMBUS_AddrCallback+0xe4>
            && (((pStackContext->Device->Instance->CR1) & I2C_CR1_ALERTEN ) == I2C_CR1_ALERTEN ) )
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042b0:	d126      	bne.n	8004300 <HAL_SMBUS_AddrCallback+0xe4>
  {
    /*
      The ready (listen) state is over, transition to transmission of alert address
     */
    pStackContext->StateMachine &= ~SMBUS_SMS_READY;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f023 0201 	bic.w	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	601a      	str	r2, [r3, #0]
    pStackContext->StateMachine |= SMBUS_SMS_TRANSMIT;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f043 0202 	orr.w	r2, r3, #2
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	601a      	str	r2, [r3, #0]
    pStackContext->Byte_count = 1U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	839a      	strh	r2, [r3, #28]
    HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(pStackContext->OwnAddress), 1U,
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f103 0120 	add.w	r1, r3, #32
                                 SMBUS_FIRST_AND_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ));
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
    HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(pStackContext->OwnAddress), 1U,
 80042de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042e2:	2201      	movs	r2, #1
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fe fb8a 	bl	80029fe <HAL_SMBUS_Slave_Transmit_IT>

    /*
      Turn off the alert signal
     */
    pStackContext->Device->Instance->CR1 &= ~I2C_CR1_ALERTEN;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	e17e      	b.n	80045fe <HAL_SMBUS_AddrCallback+0x3e2>
  else
  {
    /*
      Address may not be precisely the same - callback to accept the address
    */
    if ( STACK_SMBUS_AddrAccpt( pStackContext, AddrMatchCode) != SUCCESS )
 8004300:	883b      	ldrh	r3, [r7, #0]
 8004302:	4619      	mov	r1, r3
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fb23 	bl	8004950 <STACK_SMBUS_AddrAccpt>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d013      	beq.n	8004338 <HAL_SMBUS_AddrCallback+0x11c>
    {
      /* This is the best way not to block the line */
      __HAL_SMBUS_GENERATE_NACK( hsmbus );
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800431e:	605a      	str	r2, [r3, #4]
      hsmbus->Instance->ICR |= I2C_ICR_ADDRCF;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69da      	ldr	r2, [r3, #28]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0208 	orr.w	r2, r2, #8
 800432e:	61da      	str	r2, [r3, #28]
      HAL_SMBUS_EnableListen_IT( hsmbus );
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f7fe fc8e 	bl	8002c52 <HAL_SMBUS_EnableListen_IT>
          HAL_SMBUS_Slave_Receive_IT( hsmbus, pStackContext->Buffer, 1U, SMBUS_NEXT_FRAME);
        }
      }
    }
  }
}
 8004336:	e162      	b.n	80045fe <HAL_SMBUS_AddrCallback+0x3e2>
      pStackContext->SlaveAddress = AddrMatchCode;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	883a      	ldrh	r2, [r7, #0]
 800433c:	83da      	strh	r2, [r3, #30]
      if ( TransferDirection != 0U )
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	2b00      	cmp	r3, #0
 8004342:	f000 8134 	beq.w	80045ae <HAL_SMBUS_AddrCallback+0x392>
        pStackContext->Device->State &= ~HAL_SMBUS_STATE_SLAVE_BUSY_RX;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f022 0242 	bic.w	r2, r2, #66	; 0x42
 8004354:	649a      	str	r2, [r3, #72]	; 0x48
          (( pStackContext->StateMachine & SMBUS_SMS_IGNORED ) == SMBUS_SMS_IGNORED) && \
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0320 	and.w	r3, r3, #32
        if (
 800435e:	2b00      	cmp	r3, #0
 8004360:	d035      	beq.n	80043ce <HAL_SMBUS_AddrCallback+0x1b2>
          (( pStackContext->CurrentCommand->cmnd_query & ( READ | PROCESS_CALL ) ) != 0U )
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	785b      	ldrb	r3, [r3, #1]
 8004368:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
          (( pStackContext->StateMachine & SMBUS_SMS_IGNORED ) == SMBUS_SMS_IGNORED) && \
 800436c:	2b00      	cmp	r3, #0
 800436e:	d02e      	beq.n	80043ce <HAL_SMBUS_AddrCallback+0x1b2>
          hsmbus->Instance->TXDR = 0xFFU;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	22ff      	movs	r2, #255	; 0xff
 8004376:	629a      	str	r2, [r3, #40]	; 0x28
          if (( hsmbus->Instance->ISR & I2C_ISR_TCR ) == I2C_ISR_TCR )
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004382:	2b80      	cmp	r3, #128	; 0x80
 8004384:	d107      	bne.n	8004396 <HAL_SMBUS_AddrCallback+0x17a>
            hsmbus->Instance->CR2 |= (((uint32_t) 1 << 16 ) & I2C_CR2_NBYTES);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004394:	605a      	str	r2, [r3, #4]
          __HAL_SMBUS_GENERATE_NACK( hsmbus );
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043a4:	605a      	str	r2, [r3, #4]
          hsmbus->Instance->ICR |= I2C_ICR_ADDRCF;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0208 	orr.w	r2, r2, #8
 80043b4:	61da      	str	r2, [r3, #28]
          pStackContext->StateMachine &= ~(SMBUS_SMS_IGNORED | SMBUS_SMS_ARP_AM);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043be:	f023 0320 	bic.w	r3, r3, #32
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	6013      	str	r3, [r2, #0]
          HAL_SMBUS_EnableListen_IT( hsmbus );
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fe fc43 	bl	8002c52 <HAL_SMBUS_EnableListen_IT>
 80043cc:	e117      	b.n	80045fe <HAL_SMBUS_AddrCallback+0x3e2>
          pStackContext->StateMachine &= ~SMBUS_SMS_IGNORED;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f023 0220 	bic.w	r2, r3, #32
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	601a      	str	r2, [r3, #0]
          if (( pStackContext->StateMachine & ( SMBUS_SMS_READY | SMBUS_SMS_RESPONSE_READY ) ) == 0U )
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0311 	and.w	r3, r3, #17
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d124      	bne.n	8004430 <HAL_SMBUS_AddrCallback+0x214>
            if (( (pStackContext->StateMachine) & SMBUS_SMS_ARP_AM ) == SMBUS_SMS_ARP_AM )
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d005      	beq.n	80043fe <HAL_SMBUS_AddrCallback+0x1e2>
              result = STACK_SMBUS_ExecuteCommandARP( pStackContext );
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fad5 	bl	80049a2 <STACK_SMBUS_ExecuteCommandARP>
 80043f8:	4603      	mov	r3, r0
 80043fa:	613b      	str	r3, [r7, #16]
 80043fc:	e00f      	b.n	800441e <HAL_SMBUS_AddrCallback+0x202>
            else if ( pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8bdb      	ldrh	r3, [r3, #30]
 8004402:	2b50      	cmp	r3, #80	; 0x50
 8004404:	d106      	bne.n	8004414 <HAL_SMBUS_AddrCallback+0x1f8>
              result = STACK_PMBUS_ZoneReadCallback( pStackContext, 0U );
 8004406:	2100      	movs	r1, #0
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7ff fc3b 	bl	8003c84 <STACK_PMBUS_ZoneReadCallback>
 800440e:	4603      	mov	r3, r0
 8004410:	613b      	str	r3, [r7, #16]
 8004412:	e004      	b.n	800441e <HAL_SMBUS_AddrCallback+0x202>
              result = STACK_SMBUS_ExecuteCommand( pStackContext );
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 fc7a 	bl	8004d0e <STACK_SMBUS_ExecuteCommand>
 800441a:	4603      	mov	r3, r0
 800441c:	613b      	str	r3, [r7, #16]
            if ( result == STACK_OK )
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <HAL_SMBUS_AddrCallback+0x214>
              pStackContext->StateMachine |= SMBUS_SMS_RESPONSE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f043 0210 	orr.w	r2, r3, #16
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	601a      	str	r2, [r3, #0]
          if ( result != STACK_OK )
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d019      	beq.n	800446a <HAL_SMBUS_AddrCallback+0x24e>
            pStackContext->StateMachine |= SMBUS_SMS_IGNORED;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f043 0220 	orr.w	r2, r3, #32
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	601a      	str	r2, [r3, #0]
            __HAL_SMBUS_GENERATE_NACK( hsmbus );
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004450:	605a      	str	r2, [r3, #4]
            hsmbus->Instance->ICR |= I2C_ICR_ADDRCF;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69da      	ldr	r2, [r3, #28]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f042 0208 	orr.w	r2, r2, #8
 8004460:	61da      	str	r2, [r3, #28]
            HAL_SMBUS_EnableListen_IT( hsmbus );
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fe fbf5 	bl	8002c52 <HAL_SMBUS_EnableListen_IT>
}
 8004468:	e0c9      	b.n	80045fe <HAL_SMBUS_AddrCallback+0x3e2>
            if (( pStackContext->StateMachine & SMBUS_SMS_RESPONSE_READY ) == SMBUS_SMS_RESPONSE_READY )
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b00      	cmp	r3, #0
 8004474:	d04d      	beq.n	8004512 <HAL_SMBUS_AddrCallback+0x2f6>
              pStackContext->StateMachine |= SMBUS_SMS_TRANSMIT;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f043 0202 	orr.w	r2, r3, #2
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	601a      	str	r2, [r3, #0]
              if  ( ( pStackContext->CurrentCommand->cmnd_query & BLOCK ) == BLOCK )
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	785b      	ldrb	r3, [r3, #1]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01b      	beq.n	80044c8 <HAL_SMBUS_AddrCallback+0x2ac>
                if ( pStackContext->Buffer[1] > STACK_NBYTE_SIZE )
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004496:	2b28      	cmp	r3, #40	; 0x28
 8004498:	d903      	bls.n	80044a2 <HAL_SMBUS_AddrCallback+0x286>
                  pStackContext->Buffer[1] = STACK_NBYTE_SIZE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2228      	movs	r2, #40	; 0x28
 800449e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                size = (uint16_t)(1U + (pStackContext->Buffer[1])); /* count + actual data */
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3301      	adds	r3, #1
 80044ac:	82fb      	strh	r3, [r7, #22]
                if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d002      	beq.n	80044c0 <HAL_SMBUS_AddrCallback+0x2a4>
                  size += 1U; /* PEC byte */
 80044ba:	8afb      	ldrh	r3, [r7, #22]
 80044bc:	3301      	adds	r3, #1
 80044be:	82fb      	strh	r3, [r7, #22]
                pStackContext->CurrentCommand = NULL;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	e013      	b.n	80044f0 <HAL_SMBUS_AddrCallback+0x2d4>
                if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <HAL_SMBUS_AddrCallback+0x2cc>
                  size = (uint16_t)(pStackContext->CurrentCommand->cmnd_master_Rx_size + 1U); /* PEC byte */
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	78db      	ldrb	r3, [r3, #3]
 80044da:	b29b      	uxth	r3, r3
 80044dc:	3301      	adds	r3, #1
 80044de:	82fb      	strh	r3, [r7, #22]
 80044e0:	e006      	b.n	80044f0 <HAL_SMBUS_AddrCallback+0x2d4>
 80044e2:	bf00      	nop
 80044e4:	20000010 	.word	0x20000010
                  size = pStackContext->CurrentCommand->cmnd_master_Rx_size;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	78db      	ldrb	r3, [r3, #3]
 80044ee:	82fb      	strh	r3, [r7, #22]
              pStackContext->Byte_count = size;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	8afa      	ldrh	r2, [r7, #22]
 80044f4:	839a      	strh	r2, [r3, #28]
              HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(pStackContext->Buffer[1]), size, \
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f103 0124 	add.w	r1, r3, #36	; 0x24
                                           SMBUS_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) );
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
              HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(pStackContext->Buffer[1]), size, \
 8004504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004508:	8afa      	ldrh	r2, [r7, #22]
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fe fa77 	bl	80029fe <HAL_SMBUS_Slave_Transmit_IT>
}
 8004510:	e075      	b.n	80045fe <HAL_SMBUS_AddrCallback+0x3e2>
            else if (( (pStackContext->StateMachine) & SMBUS_SMS_READY ) == SMBUS_SMS_READY )
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d06f      	beq.n	80045fe <HAL_SMBUS_AddrCallback+0x3e2>
              if (( pStackContext->StateMachine & SMBUS_SMS_RCV_BYTE_OFF ) == 0U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d169      	bne.n	80045fe <HAL_SMBUS_AddrCallback+0x3e2>
                size = 1U;
 800452a:	2301      	movs	r3, #1
 800452c:	82fb      	strh	r3, [r7, #22]
                if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_SMBUS_AddrCallback+0x324>
                  size += 1U;
 800453a:	8afb      	ldrh	r3, [r7, #22]
 800453c:	3301      	adds	r3, #1
 800453e:	82fb      	strh	r3, [r7, #22]
                pStackContext->StateMachine &= ~SMBUS_SMS_RESPONSE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f023 0210 	bic.w	r2, r3, #16
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	601a      	str	r2, [r3, #0]
                pStackContext->StateMachine |= SMBUS_SMS_TRANSMIT;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f043 0202 	orr.w	r2, r3, #2
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	601a      	str	r2, [r3, #0]
                pStackContext->Byte_count = size;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8afa      	ldrh	r2, [r7, #22]
 800455c:	839a      	strh	r2, [r3, #28]
                if (( pStackContext->StateMachine & SMBUS_SMS_RCV_BYTE_LMT ) == SMBUS_SMS_RCV_BYTE_LMT)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d013      	beq.n	8004592 <HAL_SMBUS_AddrCallback+0x376>
                  response = pStackContext->SRByte | 0x80U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8004570:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004574:	b2db      	uxtb	r3, r3
 8004576:	72fb      	strb	r3, [r7, #11]
                                               SMBUS_FIRST_AND_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
                  HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(response), size,
 8004580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004584:	8afa      	ldrh	r2, [r7, #22]
 8004586:	f107 010b 	add.w	r1, r7, #11
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fe fa37 	bl	80029fe <HAL_SMBUS_Slave_Transmit_IT>
}
 8004590:	e035      	b.n	80045fe <HAL_SMBUS_AddrCallback+0x3e2>
                  HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(pStackContext->SRByte), size,
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f103 0122 	add.w	r1, r3, #34	; 0x22
                                               SMBUS_FIRST_AND_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ));
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
                  HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(pStackContext->SRByte), size,
 80045a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045a4:	8afa      	ldrh	r2, [r7, #22]
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fe fa29 	bl	80029fe <HAL_SMBUS_Slave_Transmit_IT>
}
 80045ac:	e027      	b.n	80045fe <HAL_SMBUS_AddrCallback+0x3e2>
        pStackContext->StateMachine &= ~SMBUS_SMS_IGNORED;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 0220 	bic.w	r2, r3, #32
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	601a      	str	r2, [r3, #0]
        if (( pStackContext->StateMachine & SMBUS_SMS_READY ) == SMBUS_SMS_READY )
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d01b      	beq.n	80045fe <HAL_SMBUS_AddrCallback+0x3e2>
          pStackContext->StateMachine &= ~SMBUS_SMS_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f023 0201 	bic.w	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	601a      	str	r2, [r3, #0]
          pStackContext->StateMachine |= SMBUS_SMS_RECEIVE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f043 0204 	orr.w	r2, r3, #4
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]
          pStackContext->CurrentCommand = NULL;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	60da      	str	r2, [r3, #12]
          pStackContext->Byte_count = 1U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	839a      	strh	r2, [r3, #28]
          HAL_SMBUS_Slave_Receive_IT( hsmbus, pStackContext->Buffer, 1U, SMBUS_NEXT_FRAME);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f103 0123 	add.w	r1, r3, #35	; 0x23
 80045f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80045f4:	2201      	movs	r2, #1
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f7fe faa4 	bl	8002b44 <HAL_SMBUS_Slave_Receive_IT>
}
 80045fc:	e7ff      	b.n	80045fe <HAL_SMBUS_AddrCallback+0x3e2>
 80045fe:	bf00      	nop
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop

08004608 <HAL_SMBUS_ListenCpltCallback>:
  * @param  hsmbus : Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_ListenCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  SMBUS_StackHandleTypeDef *pStackContext;

  /*
    Resolve which stack serves the port that initiated callback
   */
  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f7ff fb5b 	bl	8003ccc <STACK_SMBUS_ResolveContext>
 8004616:	60f8      	str	r0, [r7, #12]

  /*
    communication over, let's determine what was it
   */
  if ( pStackContext->CurrentCommand == 0U )
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d11b      	bne.n	8004658 <HAL_SMBUS_ListenCpltCallback+0x50>
  {
    if ((pStackContext->StateMachine & SMBUS_SMS_RECEIVE) == SMBUS_SMS_RECEIVE )
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00b      	beq.n	8004644 <HAL_SMBUS_ListenCpltCallback+0x3c>
    {
      /*
        a quick command write detected - address was detected with write but no write occurred
      */
      pStackContext->StateMachine |= SMBUS_SMS_QUICK_CMD_W | SMBUS_SMS_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004634:	f043 0301 	orr.w	r3, r3, #1
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	6013      	str	r3, [r2, #0]
      STACK_SMBUS_ExecuteCommand( pStackContext );
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 fb66 	bl	8004d0e <STACK_SMBUS_ExecuteCommand>
 8004642:	e01c      	b.n	800467e <HAL_SMBUS_ListenCpltCallback+0x76>
    }
    else if ((pStackContext->StateMachine & SMBUS_SMS_QUICK_CMD_R) == SMBUS_SMS_QUICK_CMD_R )
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d016      	beq.n	800467e <HAL_SMBUS_ListenCpltCallback+0x76>
    {
      /*
        a quick command read case - flag was set during OVR error treatment
      */
      STACK_SMBUS_ExecuteCommand( pStackContext );
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 fb5c 	bl	8004d0e <STACK_SMBUS_ExecuteCommand>
 8004656:	e012      	b.n	800467e <HAL_SMBUS_ListenCpltCallback+0x76>
    }
  }
  else if (( pStackContext->StateMachine & SMBUS_SMS_RESPONSE_READY) != SMBUS_SMS_RESPONSE_READY )
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0310 	and.w	r3, r3, #16
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10c      	bne.n	800467e <HAL_SMBUS_ListenCpltCallback+0x76>
  {
    /*
      we received a simple command we need yet to execute
     */
    if (( pStackContext->StateMachine & SMBUS_SMS_ARP_AM ) == SMBUS_SMS_ARP_AM )
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_SMBUS_ListenCpltCallback+0x70>
    {
      STACK_SMBUS_ExecuteCommandARP( pStackContext );
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f996 	bl	80049a2 <STACK_SMBUS_ExecuteCommandARP>
 8004676:	e002      	b.n	800467e <HAL_SMBUS_ListenCpltCallback+0x76>
    }
    else
    {
      STACK_SMBUS_ExecuteCommand( pStackContext );
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fb48 	bl	8004d0e <STACK_SMBUS_ExecuteCommand>
  }

  /*
    As the communication is concluded we want to reset the stack
   */
  pStackContext->StateMachine |= SMBUS_SMS_READY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f043 0201 	orr.w	r2, r3, #1
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	601a      	str	r2, [r3, #0]
  pStackContext->StateMachine &= ~( SMBUS_SMS_RESPONSE_READY | SMBUS_SMS_IGNORED | SMBUS_SMS_ARP_AM | SMBUS_SMS_PROCESSING
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004692:	f423 739c 	bic.w	r3, r3, #312	; 0x138
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	6013      	str	r3, [r2, #0]
                                    | SMBUS_SMS_ZONE_READ);
  pStackContext->CurrentCommand = NULL;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	60da      	str	r2, [r3, #12]

  /* sometimes there is a PEC byte left in RXDR due to command type confusion (READ or WRITE command) */
  if (( hsmbus->Instance->ISR & I2C_ISR_RXNE ) == I2C_ISR_RXNE )
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d109      	bne.n	80046c2 <HAL_SMBUS_ListenCpltCallback+0xba>
  {
    (*hsmbus->pBuffPtr++) = (uint8_t)(hsmbus->Instance->RXDR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046b8:	1c59      	adds	r1, r3, #1
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6351      	str	r1, [r2, #52]	; 0x34
 80046be:	b2c2      	uxtb	r2, r0
 80046c0:	701a      	strb	r2, [r3, #0]
  }

  /*
    ...and return to listen mode
   */
  HAL_SMBUS_EnableListen_IT( hsmbus );
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fe fac5 	bl	8002c52 <HAL_SMBUS_EnableListen_IT>

#ifdef PMBUS13
  __SMBUS_ZONE_ENABLE(hsmbus);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046d6:	60da      	str	r2, [r3, #12]
#endif /* PMBUS13 */
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_SMBUS_ErrorCallback>:
  * @param  hsmbus : Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_ErrorCallback(SMBUS_HandleTypeDef *hsmbus)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  SMBUS_StackHandleTypeDef *pStackContext;
  uint32_t  error = hsmbus->ErrorCode;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ec:	60fb      	str	r3, [r7, #12]

  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff faec 	bl	8003ccc <STACK_SMBUS_ResolveContext>
 80046f4:	60b8      	str	r0, [r7, #8]

  if ( (error & HAL_SMBUS_ERROR_ALERT) == HAL_SMBUS_ERROR_ALERT )
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01a      	beq.n	8004736 <HAL_SMBUS_ErrorCallback+0x56>
  {
    if ( (pStackContext->StateMachine & SMBUS_SMS_ACTIVE_MASK) == 0U )
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 035e 	and.w	r3, r3, #94	; 0x5e
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <HAL_SMBUS_ErrorCallback+0x40>
    {
      /*
        The stack is not busy - we can react immediately
       */
      pStackContext->CurrentCommand = &ALERT_RESPONSE;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4a8f      	ldr	r2, [pc, #572]	; (800494c <HAL_SMBUS_ErrorCallback+0x26c>)
 8004710:	60da      	str	r2, [r3, #12]
      STACK_SMBUS_HostRead( pStackContext, (uint8_t *) & (pStackContext->OwnAddress), SMBUS_ADDR_ARA);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	3320      	adds	r3, #32
 8004716:	2218      	movs	r2, #24
 8004718:	4619      	mov	r1, r3
 800471a:	68b8      	ldr	r0, [r7, #8]
 800471c:	f000 faa1 	bl	8004c62 <STACK_SMBUS_HostRead>
    }
    /*
      Alert signal detected, update state
     */
    pStackContext->StateMachine |= SMBUS_SMS_ALERT_PENDING;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	601a      	str	r2, [r3, #0]

    /*
     the alert has been treated, clear the flag
     */
    error &= ~HAL_SMBUS_ERROR_ALERT;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	e0fb      	b.n	800492e <HAL_SMBUS_ErrorCallback+0x24e>
  }
  else if (( error & (HAL_SMBUS_ERROR_BERR | HAL_SMBUS_ERROR_BUSTIMEOUT | HAL_SMBUS_ERROR_HALTIMEOUT )) != 0U )
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f003 0331 	and.w	r3, r3, #49	; 0x31
 800473c:	2b00      	cmp	r3, #0
 800473e:	d041      	beq.n	80047c4 <HAL_SMBUS_ErrorCallback+0xe4>
  {
    /*
      Critical error plagued the command - reset the stack
     */
    if ( STACK_SMBUS_IsBusy(pStackContext))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 034e 	and.w	r3, r3, #78	; 0x4e
 8004748:	2b00      	cmp	r3, #0
 800474a:	d02b      	beq.n	80047a4 <HAL_SMBUS_ErrorCallback+0xc4>
    {
      __HAL_SMBUS_DISABLE( hsmbus );
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]
      while (( hsmbus->Instance->CR1 & I2C_CR1_PE ) == I2C_CR1_PE )
 800475c:	bf00      	nop
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b01      	cmp	r3, #1
 800476a:	d0f8      	beq.n	800475e <HAL_SMBUS_ErrorCallback+0x7e>
      {}
      __HAL_SMBUS_ENABLE( hsmbus );
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]
      if ( pStackContext->Device->State != HAL_SMBUS_STATE_READY )
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004782:	2b01      	cmp	r3, #1
 8004784:	d00e      	beq.n	80047a4 <HAL_SMBUS_ErrorCallback+0xc4>
      {
        HAL_SMBUS_DeInit( pStackContext->Device );
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd ff36 	bl	80025fc <HAL_SMBUS_DeInit>
        HAL_SMBUS_Init( pStackContext->Device );
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4618      	mov	r0, r3
 8004796:	f7fd fe79 	bl	800248c <HAL_SMBUS_Init>
        HAL_SMBUS_EnableListen_IT( pStackContext->Device );
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fe fa57 	bl	8002c52 <HAL_SMBUS_EnableListen_IT>
      }
    }
    pStackContext->StateMachine |= SMBUS_SMS_READY;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f043 0201 	orr.w	r2, r3, #1
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	601a      	str	r2, [r3, #0]
    pStackContext->CurrentCommand = NULL;
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	2200      	movs	r2, #0
 80047b4:	60da      	str	r2, [r3, #12]
    pStackContext->StateMachine &= ~SMBUS_SMS_ACTIVE_MASK;
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 025e 	bic.w	r2, r3, #94	; 0x5e
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e0b4      	b.n	800492e <HAL_SMBUS_ErrorCallback+0x24e>

  }
  else if (( error & HAL_SMBUS_ERROR_OVR) == HAL_SMBUS_ERROR_OVR )
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f003 0308 	and.w	r3, r3, #8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d011      	beq.n	80047f2 <HAL_SMBUS_ErrorCallback+0x112>
  {
    /*
      A case of quick command read probably, setting the flag
     */
    pStackContext->StateMachine |= SMBUS_SMS_QUICK_CMD_R | SMBUS_SMS_READY;
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047d6:	f043 0301 	orr.w	r3, r3, #1
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	6013      	str	r3, [r2, #0]
    HAL_SMBUS_Master_Abort_IT( hsmbus, pStackContext->SlaveAddress );
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	8bdb      	ldrh	r3, [r3, #30]
 80047e2:	4619      	mov	r1, r3
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fe f8bb 	bl	8002960 <HAL_SMBUS_Master_Abort_IT>
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	64da      	str	r2, [r3, #76]	; 0x4c
 80047f0:	e09d      	b.n	800492e <HAL_SMBUS_ErrorCallback+0x24e>
  }
  else if (( error & HAL_SMBUS_ERROR_ARLO) == HAL_SMBUS_ERROR_ARLO )
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f003 0302 	and.w	r3, r3, #2
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d05c      	beq.n	80048b6 <HAL_SMBUS_ErrorCallback+0x1d6>
  {
#ifdef PMBUS13
    /* Zone Read arbitration lost - retry */
    if (( pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	8bdb      	ldrh	r3, [r3, #30]
 8004800:	2b50      	cmp	r3, #80	; 0x50
 8004802:	d114      	bne.n	800482e <HAL_SMBUS_ErrorCallback+0x14e>
        && ((pStackContext->StateMachine & SMBUS_SMS_ZONE_READ) != 0U ))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00e      	beq.n	800482e <HAL_SMBUS_ErrorCallback+0x14e>
    {
      pStackContext->StateMachine &= ~SMBUS_SMS_ZONE_READ;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	601a      	str	r2, [r3, #0]
      __SMBUS_ZONE_ENABLE(hsmbus);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800482a:	60da      	str	r2, [r3, #12]
 800482c:	e07f      	b.n	800492e <HAL_SMBUS_ErrorCallback+0x24e>
    {
#endif /* PMBUS13 */
      /*
        Arbitration lost, giving up
      */
      __HAL_SMBUS_GENERATE_NACK( hsmbus );
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800483c:	605a      	str	r2, [r3, #4]

      /* TCR may still stretch the SCL */
      if (( hsmbus->Instance->ISR & I2C_ISR_TCR ) == I2C_ISR_TCR )
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004848:	2b80      	cmp	r3, #128	; 0x80
 800484a:	d107      	bne.n	800485c <HAL_SMBUS_ErrorCallback+0x17c>
      {
        hsmbus->Instance->CR2 |= (((uint32_t) 1 << 16 ) & I2C_CR2_NBYTES);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800485a:	605a      	str	r2, [r3, #4]
      }
      if (( hsmbus->Instance->ISR & I2C_ISR_ADDR ) == I2C_ISR_ADDR )
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 0308 	and.w	r3, r3, #8
 8004866:	2b08      	cmp	r3, #8
 8004868:	d107      	bne.n	800487a <HAL_SMBUS_ErrorCallback+0x19a>
      {
        hsmbus->Instance->ICR |= I2C_ICR_ADDRCF;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69da      	ldr	r2, [r3, #28]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0208 	orr.w	r2, r2, #8
 8004878:	61da      	str	r2, [r3, #28]
      }

      /*
      Clearing the rest of the transmission, including the HW buffer of peripheral
      */
      hsmbus->Instance->ISR |= I2C_ISR_TXE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699a      	ldr	r2, [r3, #24]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0201 	orr.w	r2, r2, #1
 8004888:	619a      	str	r2, [r3, #24]
      hsmbus->XferCount = 0U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	875a      	strh	r2, [r3, #58]	; 0x3a
      hsmbus->XferSize = 0U;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	871a      	strh	r2, [r3, #56]	; 0x38
      hsmbus->XferOptions = 0U;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	63da      	str	r2, [r3, #60]	; 0x3c

      /*
        Putting the stack back to original state.
      */
      pStackContext->StateMachine &= ~SMBUS_SMS_TRANSMIT | SMBUS_SMS_RESPONSE_READY | SMBUS_SMS_PROCESSING;
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f023 0202 	bic.w	r2, r3, #2
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	601a      	str	r2, [r3, #0]
      pStackContext->StateMachine |= SMBUS_SMS_IGNORED | SMBUS_SMS_READY;
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f043 0221 	orr.w	r2, r3, #33	; 0x21
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e03b      	b.n	800492e <HAL_SMBUS_ErrorCallback+0x24e>
#ifdef PMBUS13
    }
#endif  /* PMBUS13 */
  }
  else if (( error & HAL_SMBUS_ERROR_PECERR ) == HAL_SMBUS_ERROR_PECERR )
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01a      	beq.n	80048f6 <HAL_SMBUS_ErrorCallback+0x216>
  {
    /* just ignore the error if there is no current transaction */
    if ( hsmbus->State == HAL_SMBUS_STATE_RESET )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10f      	bne.n	80048e8 <HAL_SMBUS_ErrorCallback+0x208>
    {
      HAL_SMBUS_DeInit( pStackContext->Device );
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fd fe95 	bl	80025fc <HAL_SMBUS_DeInit>
      HAL_SMBUS_Init( pStackContext->Device );
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fd fdd8 	bl	800248c <HAL_SMBUS_Init>
      HAL_SMBUS_EnableListen_IT( pStackContext->Device );
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe f9b6 	bl	8002c52 <HAL_SMBUS_EnableListen_IT>
 80048e6:	e022      	b.n	800492e <HAL_SMBUS_ErrorCallback+0x24e>
    }
    else
    {
      /* otherwise book it in the stack */
      pStackContext->StateMachine |= SMBUS_SMS_ERR_PECERR;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	e01b      	b.n	800492e <HAL_SMBUS_ErrorCallback+0x24e>
    }
  }
  else if (( error & HAL_SMBUS_ERROR_ACKF ) == HAL_SMBUS_ERROR_ACKF )
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d016      	beq.n	800492e <HAL_SMBUS_ErrorCallback+0x24e>
  {
    pStackContext->Device->PreviousState = hsmbus->State;
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004908:	641a      	str	r2, [r3, #64]	; 0x40
    pStackContext->Device->State = HAL_SMBUS_STATE_READY;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	649a      	str	r2, [r3, #72]	; 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(pStackContext->Device);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Cease the transmit/receive effort */
    pStackContext->StateMachine &= ~(SMBUS_SMS_TRANSMIT | SMBUS_SMS_RECEIVE);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f023 0206 	bic.w	r2, r3, #6
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	601a      	str	r2, [r3, #0]
    STACK_SMBUS_ReadyIfNoAlert(pStackContext);
 8004928:	68b8      	ldr	r0, [r7, #8]
 800492a:	f000 f851 	bl	80049d0 <STACK_SMBUS_ReadyIfNoAlert>
  }

  /*
    keep any other error marked in the state machine
   */
  pStackContext->StateMachine |= error << 16;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	041b      	lsls	r3, r3, #16
 8004936:	431a      	orrs	r2, r3
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	601a      	str	r2, [r3, #0]

  /*
    and clear the record of error in the hal driver
   */
  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004942:	bf00      	nop
 8004944:	3710      	adds	r7, #16
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	2000000c 	.word	0x2000000c

08004950 <STACK_SMBUS_AddrAccpt>:
  *                the configuration information for the specified SMBUS.
  * @param  AddrMatchCode: Address Match Code
  * @retval ErrorStatus ERROR if address is not recognized as own.
  */
__weak ErrorStatus STACK_SMBUS_AddrAccpt( SMBUS_StackHandleTypeDef *pStackContext, uint16_t AddrMatchCode)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	460b      	mov	r3, r1
 800495a:	807b      	strh	r3, [r7, #2]
  ErrorStatus retvalue = ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	73fb      	strb	r3, [r7, #15]
#endif /*ARP supported*/

#ifdef PMBUS13

  /* Zone command address */
  if ( (AddrMatchCode == SMBUS_ADDR_ZONE_READ ) || (AddrMatchCode == SMBUS_ADDR_ZONE_WRITE ))
 8004960:	887b      	ldrh	r3, [r7, #2]
 8004962:	2b50      	cmp	r3, #80	; 0x50
 8004964:	d002      	beq.n	800496c <STACK_SMBUS_AddrAccpt+0x1c>
 8004966:	887b      	ldrh	r3, [r7, #2]
 8004968:	2b6e      	cmp	r3, #110	; 0x6e
 800496a:	d10a      	bne.n	8004982 <STACK_SMBUS_AddrAccpt+0x32>
  {

    if (( pStackContext->StateMachine & SMBUS_SMS_ZONE_READ ) == SMBUS_SMS_ZONE_READ )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <STACK_SMBUS_AddrAccpt+0x2e>
    {
      retvalue = ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	73fb      	strb	r3, [r7, #15]
 800497c:	e001      	b.n	8004982 <STACK_SMBUS_AddrAccpt+0x32>
    }
    else
    {
      retvalue = SUCCESS;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* PMBUS13 */

  /* Own address match */
  if (AddrMatchCode == pStackContext->OwnAddress )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004988:	b29b      	uxth	r3, r3
 800498a:	887a      	ldrh	r2, [r7, #2]
 800498c:	429a      	cmp	r2, r3
 800498e:	d101      	bne.n	8004994 <STACK_SMBUS_AddrAccpt+0x44>
  {
    retvalue = SUCCESS;
 8004990:	2300      	movs	r3, #0
 8004992:	73fb      	strb	r3, [r7, #15]
  }

  /* NOTE : This function Should not be modified, when the callback is needed,
           the STACK_SMBUS_AddrAccpt could be implemented in the user file
  */
  return retvalue;
 8004994:	7bfb      	ldrb	r3, [r7, #15]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <STACK_SMBUS_ExecuteCommandARP>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the context information for the specified SMBUS stack.
  * @retval HAL_StatusTypeDef response code. Equal STACK_OK if success.
  */
__weak HAL_StatusTypeDef STACK_SMBUS_ExecuteCommandARP( SMBUS_StackHandleTypeDef *pStackContext )
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef result = STACK_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	73fb      	strb	r3, [r7, #15]
#endif /*ARP*/

  /*
    Returning zero means no problem with execution, if reply is expected, then it is correctly placed in the IO buffer
   */
  return result;
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <STACK_SMBUS_AlertClbk>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void STACK_SMBUS_AlertClbk( SMBUS_StackHandleTypeDef *pStackContext )
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /*
   Do not modify this function directly, replace it with own version in your code
   */
  return;
 80049c4:	bf00      	nop
}
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <STACK_SMBUS_ReadyIfNoAlert>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void STACK_SMBUS_ReadyIfNoAlert( SMBUS_StackHandleTypeDef *pStackContext )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]

  if ((pStackContext->StateMachine & SMBUS_SMS_ALERT_PENDING) == SMBUS_SMS_ALERT_PENDING )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d025      	beq.n	8004a30 <STACK_SMBUS_ReadyIfNoAlert+0x60>
  {
    /*
      During a command processing, a device signalled an alert
     */
    if (pStackContext->CurrentCommand != &ALERT_RESPONSE)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4a1a      	ldr	r2, [pc, #104]	; (8004a54 <STACK_SMBUS_ReadyIfNoAlert+0x84>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d010      	beq.n	8004a10 <STACK_SMBUS_ReadyIfNoAlert+0x40>
    {
      /*
       Last command was not an alert response - we send alert response
       */
      pStackContext->CurrentCommand = &ALERT_RESPONSE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a18      	ldr	r2, [pc, #96]	; (8004a54 <STACK_SMBUS_ReadyIfNoAlert+0x84>)
 80049f2:	60da      	str	r2, [r3, #12]
      pStackContext->StateMachine |= SMBUS_SMS_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f043 0201 	orr.w	r2, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	601a      	str	r2, [r3, #0]
      STACK_SMBUS_HostRead( pStackContext, &(pStackContext->OwnAddress), SMBUS_ADDR_ARA);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	3320      	adds	r3, #32
 8004a04:	2218      	movs	r2, #24
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f92a 	bl	8004c62 <STACK_SMBUS_HostRead>
    /*
      ...and return to listen mode
    */
    HAL_SMBUS_EnableListen_IT( pStackContext->Device );
  }
}
 8004a0e:	e01d      	b.n	8004a4c <STACK_SMBUS_ReadyIfNoAlert+0x7c>
      pStackContext->StateMachine |= SMBUS_SMS_READY | SMBUS_SMS_ALERT_ADDRESS;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f043 0281 	orr.w	r2, r3, #129	; 0x81
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	601a      	str	r2, [r3, #0]
      pStackContext->StateMachine &= ~SMBUS_SMS_ALERT_PENDING;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	601a      	str	r2, [r3, #0]
      STACK_SMBUS_AlertClbk( pStackContext );
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff ffc7 	bl	80049bc <STACK_SMBUS_AlertClbk>
}
 8004a2e:	e00d      	b.n	8004a4c <STACK_SMBUS_ReadyIfNoAlert+0x7c>
    pStackContext->StateMachine |= SMBUS_SMS_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f043 0201 	orr.w	r2, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	601a      	str	r2, [r3, #0]
    pStackContext->CurrentCommand = NULL;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	60da      	str	r2, [r3, #12]
    HAL_SMBUS_EnableListen_IT( pStackContext->Device );
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fe f903 	bl	8002c52 <HAL_SMBUS_EnableListen_IT>
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	2000000c 	.word	0x2000000c

08004a58 <STACK_SMBUS_Init>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval SMBus stack return code
  */
HAL_StatusTypeDef STACK_SMBUS_Init( SMBUS_StackHandleTypeDef *pStackContext )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t              index = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef     result = STACK_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	72fb      	strb	r3, [r7, #11]

  while ( SMBUSInstancesList[index] != NULL )
 8004a68:	e002      	b.n	8004a70 <STACK_SMBUS_Init+0x18>
  {
    index++;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	60fb      	str	r3, [r7, #12]
  while ( SMBUSInstancesList[index] != NULL )
 8004a70:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <STACK_SMBUS_Init+0x6c>)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f6      	bne.n	8004a6a <STACK_SMBUS_Init+0x12>
  }

  pStackContext->SlaveAddress = 0U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	83da      	strh	r2, [r3, #30]

  SMBUSInstancesList[index] = pStackContext;
 8004a82:	4910      	ldr	r1, [pc, #64]	; (8004ac4 <STACK_SMBUS_Init+0x6c>)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

  /*
   No mode, nothing going on
   */
  pStackContext->StateMachine |= SMBUS_SMS_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f043 0201 	orr.w	r2, r3, #1
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	601a      	str	r2, [r3, #0]
  pStackContext->OpMode = 0U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

#ifdef PMBUS13
  /* initializing the Zone settings */
  pStackContext->TheZone = ZERO_ZONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	619a      	str	r2, [r3, #24]
#endif /* ALERT */

  /*
    the device listens for common commands, the host for notify protocol
   */
  if ( result == STACK_OK )
 8004aa6:	7afb      	ldrb	r3, [r7, #11]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d106      	bne.n	8004aba <STACK_SMBUS_Init+0x62>
  {
    return HAL_SMBUS_EnableListen_IT( pStackContext->Device );
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7fe f8ce 	bl	8002c52 <HAL_SMBUS_EnableListen_IT>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	e000      	b.n	8004abc <STACK_SMBUS_Init+0x64>
  }
  else
  {
    return result;
 8004aba:	7afb      	ldrb	r3, [r7, #11]
  }
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	20000084 	.word	0x20000084

08004ac8 <STACK_SMBUS_GetBuffer>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval I/O buffer
  */
uint8_t *STACK_SMBUS_GetBuffer( SMBUS_StackHandleTypeDef *pStackContext )
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint8_t *pResult;
  /*
    return NULL if the driver is busy
   */
  if (
    ( pStackContext->Device->State != HAL_SMBUS_STATE_READY ) &&
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  if (
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d009      	beq.n	8004aee <STACK_SMBUS_GetBuffer+0x26>
    (( pStackContext->Device->State & HAL_SMBUS_STATE_LISTEN ) == 0U )
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ae0:	f003 0308 	and.w	r3, r3, #8
    ( pStackContext->Device->State != HAL_SMBUS_STATE_READY ) &&
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <STACK_SMBUS_GetBuffer+0x26>
  )
  {
    pResult = NULL;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	e002      	b.n	8004af4 <STACK_SMBUS_GetBuffer+0x2c>
  else
  {
    /*
      starts at second position, first is reserved for the command code
     */
    pResult = &(pStackContext->Buffer[1]);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3324      	adds	r3, #36	; 0x24
 8004af2:	60fb      	str	r3, [r7, #12]
  }
  return pResult;
 8004af4:	68fb      	ldr	r3, [r7, #12]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <STACK_SMBUS_HostCommand>:
  *                     Leave zero for process call.
  * @retval SMBus stack return code
  */
HAL_StatusTypeDef STACK_SMBUS_HostCommand(SMBUS_StackHandleTypeDef *pStackContext, st_command_t *pCommand,
    uint16_t address, uint32_t direction)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b08a      	sub	sp, #40	; 0x28
 8004b06:	af02      	add	r7, sp, #8
 8004b08:	60f8      	str	r0, [r7, #12]
 8004b0a:	60b9      	str	r1, [r7, #8]
 8004b0c:	603b      	str	r3, [r7, #0]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef     result = STACK_BUSY;
 8004b12:	2302      	movs	r3, #2
 8004b14:	77fb      	strb	r3, [r7, #31]
  uint32_t              xFerOptions = SMBUS_FIRST_FRAME;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
  uint16_t              size;

  /*
    First check status of the SMBUS - no transaction ongoing
  */
  if ( ( (pStackContext->StateMachine) & SMBUS_SMS_ACTIVE_MASK ) == 0U )
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 035e 	and.w	r3, r3, #94	; 0x5e
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f040 8098 	bne.w	8004c58 <STACK_SMBUS_HostCommand+0x156>
  {
    /*
    becoming master, not listening any more
    */
    HAL_SMBUS_DisableListen_IT( pStackContext->Device );
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe f8a0 	bl	8002c72 <HAL_SMBUS_DisableListen_IT>

    if ( pCommand == NULL )
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d107      	bne.n	8004b48 <STACK_SMBUS_HostCommand+0x46>
    {
      /*
      quick command case
      */
      size = 0U;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	827b      	strh	r3, [r7, #18]
      xFerOptions = SMBUS_FIRST_AND_LAST_FRAME_NO_PEC;
 8004b3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b40:	61bb      	str	r3, [r7, #24]

      /* set buffer to NULL to remove autoend and manage STOP by SW */
      com_buffer = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	e063      	b.n	8004c10 <STACK_SMBUS_HostCommand+0x10e>
    }
    else
    {
      /* set buffer to current context */
      com_buffer = pStackContext->Buffer;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3323      	adds	r3, #35	; 0x23
 8004b4c:	617b      	str	r3, [r7, #20]

      /*
          Remembering the address and command code for case of further processing of non-trivial command
        */
      pStackContext->SlaveAddress = address;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	88fa      	ldrh	r2, [r7, #6]
 8004b52:	83da      	strh	r2, [r3, #30]
      pStackContext->CurrentCommand = pCommand;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	60da      	str	r2, [r3, #12]

      /*
      First byte, the command code is transmitted
      */
      com_buffer[0] = pCommand->cmnd_code;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	781a      	ldrb	r2, [r3, #0]
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	701a      	strb	r2, [r3, #0]

      if ( (( pCommand->cmnd_query & BLOCK ) == BLOCK ) && ( direction != READ ) )
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	785b      	ldrb	r3, [r3, #1]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d012      	beq.n	8004b94 <STACK_SMBUS_HostCommand+0x92>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	d00f      	beq.n	8004b94 <STACK_SMBUS_HostCommand+0x92>
      {
        /*
            Block write and process call with data size prepared in the buffer.
            Data size is limited to STACK_NBYTE_SIZE
          */
        if (com_buffer[1] > STACK_NBYTE_SIZE )
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	3301      	adds	r3, #1
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b28      	cmp	r3, #40	; 0x28
 8004b7c:	d903      	bls.n	8004b86 <STACK_SMBUS_HostCommand+0x84>
        {
          com_buffer[1] = STACK_NBYTE_SIZE;
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	3301      	adds	r3, #1
 8004b82:	2228      	movs	r2, #40	; 0x28
 8004b84:	701a      	strb	r2, [r3, #0]
        }
        size = 2U + com_buffer[1];            /* 1 cmd code + 1 count + data size */
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3302      	adds	r3, #2
 8004b90:	827b      	strh	r3, [r7, #18]
 8004b92:	e008      	b.n	8004ba6 <STACK_SMBUS_HostCommand+0xa4>
      }
      else
      {
        if ( direction == READ )
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d102      	bne.n	8004ba0 <STACK_SMBUS_HostCommand+0x9e>
        {
          /*
            transmitting only the command code, then begins the read phase
          */
          size = 1U;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	827b      	strh	r3, [r7, #18]
 8004b9e:	e002      	b.n	8004ba6 <STACK_SMBUS_HostCommand+0xa4>
        else
        {
          /*
            fixed size write
          */
          size = pCommand->cmnd_master_Tx_size;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	789b      	ldrb	r3, [r3, #2]
 8004ba4:	827b      	strh	r3, [r7, #18]
        }
      }

      if ( pCommand->cmnd_query == BLK_PRC_CALL)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	785b      	ldrb	r3, [r3, #1]
 8004baa:	2b90      	cmp	r3, #144	; 0x90
 8004bac:	d106      	bne.n	8004bbc <STACK_SMBUS_HostCommand+0xba>
      {
        /*
          Process call starts as BLOCK_WRITE mode
        */
        pStackContext->OpMode = BLOCK_WRITE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2250      	movs	r2, #80	; 0x50
 8004bb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        xFerOptions = SMBUS_FIRST_FRAME;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61bb      	str	r3, [r7, #24]
 8004bba:	e029      	b.n	8004c10 <STACK_SMBUS_HostCommand+0x10e>
      {
        /*
          Check direction sanity and mark direction (mainly for READ_OR_WRITE kind of command)
        */
        if (
          ( ( pCommand->cmnd_query & READ_OR_WRITE ) == READ_OR_WRITE ) &&
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	785b      	ldrb	r3, [r3, #1]
 8004bc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
        if (
 8004bc4:	2b60      	cmp	r3, #96	; 0x60
 8004bc6:	d108      	bne.n	8004bda <STACK_SMBUS_HostCommand+0xd8>
          ( ( pCommand->cmnd_query & READ_OR_WRITE ) == READ_OR_WRITE ) &&
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b40      	cmp	r3, #64	; 0x40
 8004bcc:	d005      	beq.n	8004bda <STACK_SMBUS_HostCommand+0xd8>
          ( ( direction != WRITE ) && ( direction != READ ) )
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d002      	beq.n	8004bda <STACK_SMBUS_HostCommand+0xd8>
        )
        {
          result = STACK_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	e01a      	b.n	8004c10 <STACK_SMBUS_HostCommand+0x10e>
        }
        else
        {
          pStackContext->OpMode = (uint8_t)direction;
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /*
          In case of Write this is a last frame too
          */
          if (( direction == WRITE ) || ( direction == BLOCK_WRITE ))
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d002      	beq.n	8004bf0 <STACK_SMBUS_HostCommand+0xee>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b50      	cmp	r3, #80	; 0x50
 8004bee:	d10f      	bne.n	8004c10 <STACK_SMBUS_HostCommand+0x10e>
          {
            /*
              Size of transmission may include the PEC byte
              */
            xFerOptions = SMBUS_FIRST_AND_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE );
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bfc:	61bb      	str	r3, [r7, #24]
            if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <STACK_SMBUS_HostCommand+0x10e>
            {
              size += 1U; /* PEC_SIZE */
 8004c0a:	8a7b      	ldrh	r3, [r7, #18]
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	827b      	strh	r3, [r7, #18]
          }
        }
      }
    }

    if ( result != STACK_ERROR )
 8004c10:	7ffb      	ldrb	r3, [r7, #31]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d020      	beq.n	8004c58 <STACK_SMBUS_HostCommand+0x156>
    {

      /*
      Initiating a transmission - even for a Read the command code is sent first
      */
      pStackContext->StateMachine |= SMBUS_SMS_TRANSMIT;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f043 0202 	orr.w	r2, r3, #2
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	601a      	str	r2, [r3, #0]
      pStackContext->StateMachine &= ~SMBUS_SMS_READY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 0201 	bic.w	r2, r3, #1
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	601a      	str	r2, [r3, #0]

      /*
        Sending the data and logging the result
      */
      result = HAL_SMBUS_Master_Transmit_IT( pStackContext->Device, address, com_buffer, size, xFerOptions );
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	6858      	ldr	r0, [r3, #4]
 8004c32:	8a7a      	ldrh	r2, [r7, #18]
 8004c34:	88f9      	ldrh	r1, [r7, #6]
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	f7fd fd07 	bl	8002650 <HAL_SMBUS_Master_Transmit_IT>
 8004c42:	4603      	mov	r3, r0
 8004c44:	77fb      	strb	r3, [r7, #31]
      if (result != HAL_OK )
 8004c46:	7ffb      	ldrb	r3, [r7, #31]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <STACK_SMBUS_HostCommand+0x156>
      {
        pStackContext->StateMachine |= SMBUS_SMS_ERROR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	601a      	str	r2, [r3, #0]
      }
    }
  }
  return result;
 8004c58:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <STACK_SMBUS_HostRead>:
  * @param  pData  : pointer to the variable where response should be stored
  * @param  address : slave address to be used in the transmission
  * @retval HAL_StatusTypeDef SMBus stack return code
  */
HAL_StatusTypeDef STACK_SMBUS_HostRead(SMBUS_StackHandleTypeDef *pStackContext, uint8_t *pData, uint16_t address)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b088      	sub	sp, #32
 8004c66:	af02      	add	r7, sp, #8
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef     result = STACK_BUSY;
 8004c70:	2302      	movs	r3, #2
 8004c72:	75fb      	strb	r3, [r7, #23]
  uint32_t              xFerOptions;

  /*
    First check state of the SMBUS
   */
  if ( ( pStackContext->StateMachine & SMBUS_SMS_READY ) == SMBUS_SMS_READY )
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d041      	beq.n	8004d04 <STACK_SMBUS_HostRead+0xa2>
  {

    /*
    becoming master, not listening any more
    */
    HAL_SMBUS_DisableListen_IT( pStackContext->Device );
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fd fff4 	bl	8002c72 <HAL_SMBUS_DisableListen_IT>

    /*
      State transition from Ready to Reception
    */
    pStackContext->StateMachine &= ~SMBUS_SMS_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 0201 	bic.w	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	601a      	str	r2, [r3, #0]
    pStackContext->StateMachine |= SMBUS_SMS_RECEIVE;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f043 0204 	orr.w	r2, r3, #4
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	601a      	str	r2, [r3, #0]

    /*
      May be a receive byte ( then we need pointer to store reply ) or quick command read
    */
    if ( pData == NULL )
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <STACK_SMBUS_HostRead+0x52>
    {
      size = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	75bb      	strb	r3, [r7, #22]
      xFerOptions = SMBUS_FIRST_AND_LAST_FRAME_NO_PEC;
 8004cac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	e011      	b.n	8004cd8 <STACK_SMBUS_HostRead+0x76>
    }
    else
    {
      size = 1U;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	75bb      	strb	r3, [r7, #22]
      if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <STACK_SMBUS_HostRead+0x68>
      {
        size += PEC_SIZE;
 8004cc4:	7dbb      	ldrb	r3, [r7, #22]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	75bb      	strb	r3, [r7, #22]
      }
      xFerOptions = SMBUS_FIRST_AND_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE );
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	613b      	str	r3, [r7, #16]
    }

    /*
      Ordering the HAL to do single frame read operation, checking the result
    */
    result = HAL_SMBUS_Master_Receive_IT( pStackContext->Device, address, pData, (uint16_t)size, xFerOptions );
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6858      	ldr	r0, [r3, #4]
 8004cdc:	7dbb      	ldrb	r3, [r7, #22]
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	88f9      	ldrh	r1, [r7, #6]
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	68ba      	ldr	r2, [r7, #8]
 8004cea:	f7fd fd9b 	bl	8002824 <HAL_SMBUS_Master_Receive_IT>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	75fb      	strb	r3, [r7, #23]
    if (result != HAL_OK )
 8004cf2:	7dfb      	ldrb	r3, [r7, #23]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <STACK_SMBUS_HostRead+0xa2>
    {
      pStackContext->StateMachine |= SMBUS_SMS_ERROR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	601a      	str	r2, [r3, #0]
    }
  }

  return result;
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <STACK_SMBUS_ExecuteCommand>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the context information for the specified SMBUS stack.
  * @retval HAL_StatusTypeDef response code. STACK_OK if success, any other value means problem
  */
__weak HAL_StatusTypeDef STACK_SMBUS_ExecuteCommand( SMBUS_StackHandleTypeDef *pStackContext )
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
   */

  /*
    Returning zero means no problem with execution, if reply is expected, then it is correctly placed in the IO buffer
   */
  return STACK_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <STACK_SMBUS_ExtendCommand>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the context information for the specified SMBUS stack.
  * @retval HAL_StatusTypeDef response code. STACK_OK if success, any other value means problem
  */
__weak HAL_StatusTypeDef STACK_SMBUS_ExtendCommand( SMBUS_StackHandleTypeDef *pStackContext )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
   */

  /*
    Returning zero means no problem with execution, if reply is expected, then it is correctly placed in the IO buffer
   */
  return STACK_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <MX_SMBus_PMBus_Stack_Process>:
/* USER CODE END Header */

#include "app_X-CUBE-SMBUS.h"

void MX_SMBus_PMBus_Stack_Process()
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0
  /* this function is a sanity check on the stack context */
  /* optional but may help implementation robustness */
  MX_SMBUS_Error_Check(pcontext);
 8004d40:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <MX_SMBus_PMBus_Stack_Process+0x80>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 f89f 	bl	8004e88 <MX_SMBUS_Error_Check>
/* USER CODE BEGIN 0 */
  HAL_SMBUS_DisableListen_IT(pcontext->Device);
 8004d4a:	4b1c      	ldr	r3, [pc, #112]	; (8004dbc <MX_SMBus_PMBus_Stack_Process+0x80>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f7fd ff8e 	bl	8002c72 <HAL_SMBUS_DisableListen_IT>

  if (HAL_SMBUS_IsDeviceReady(pcontext->Device, (0x12 << 1), 2, 100) == HAL_OK) {
 8004d56:	4b19      	ldr	r3, [pc, #100]	; (8004dbc <MX_SMBus_PMBus_Stack_Process+0x80>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6858      	ldr	r0, [r3, #4]
 8004d5c:	2364      	movs	r3, #100	; 0x64
 8004d5e:	2202      	movs	r2, #2
 8004d60:	2124      	movs	r1, #36	; 0x24
 8004d62:	f7fd ff9c 	bl	8002c9e <HAL_SMBUS_IsDeviceReady>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <MX_SMBus_PMBus_Stack_Process+0x3e>
	STACK_SMBUS_HostCommand(pcontext, (st_command_t *)&PMBUS_COMMANDS_TEST[4],  (0x12 << 1), WRITE);
 8004d6c:	4b13      	ldr	r3, [pc, #76]	; (8004dbc <MX_SMBus_PMBus_Stack_Process+0x80>)
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	2340      	movs	r3, #64	; 0x40
 8004d72:	2224      	movs	r2, #36	; 0x24
 8004d74:	4912      	ldr	r1, [pc, #72]	; (8004dc0 <MX_SMBus_PMBus_Stack_Process+0x84>)
 8004d76:	f7ff fec4 	bl	8004b02 <STACK_SMBUS_HostCommand>
  }

  HAL_Delay(100);
 8004d7a:	2064      	movs	r0, #100	; 0x64
 8004d7c:	f7fb fc98 	bl	80006b0 <HAL_Delay>

  HAL_SMBUS_DisableListen_IT(pcontext->Device);
 8004d80:	4b0e      	ldr	r3, [pc, #56]	; (8004dbc <MX_SMBus_PMBus_Stack_Process+0x80>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7fd ff73 	bl	8002c72 <HAL_SMBUS_DisableListen_IT>

  if (HAL_SMBUS_IsDeviceReady(pcontext->Device, (0x12 << 1), 2, 100) == HAL_OK) {
 8004d8c:	4b0b      	ldr	r3, [pc, #44]	; (8004dbc <MX_SMBus_PMBus_Stack_Process+0x80>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	6858      	ldr	r0, [r3, #4]
 8004d92:	2364      	movs	r3, #100	; 0x64
 8004d94:	2202      	movs	r2, #2
 8004d96:	2124      	movs	r1, #36	; 0x24
 8004d98:	f7fd ff81 	bl	8002c9e <HAL_SMBUS_IsDeviceReady>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <MX_SMBus_PMBus_Stack_Process+0x74>
	  STACK_SMBUS_HostCommand(pcontext, (st_command_t *) &PMBUS_COMMANDS_TEST[9],  (0x12 << 1), READ);
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <MX_SMBus_PMBus_Stack_Process+0x80>)
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	2320      	movs	r3, #32
 8004da8:	2224      	movs	r2, #36	; 0x24
 8004daa:	4906      	ldr	r1, [pc, #24]	; (8004dc4 <MX_SMBus_PMBus_Stack_Process+0x88>)
 8004dac:	f7ff fea9 	bl	8004b02 <STACK_SMBUS_HostCommand>
  }

  HAL_Delay(100);
 8004db0:	2064      	movs	r0, #100	; 0x64
 8004db2:	f7fb fc7d 	bl	80006b0 <HAL_Delay>
/* USER CODE END 0 */
}
 8004db6:	bf00      	nop
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	200000dc 	.word	0x200000dc
 8004dc0:	08005240 	.word	0x08005240
 8004dc4:	08005254 	.word	0x08005254

08004dc8 <MX_SMBus_PMBus_Stack_Init>:

void MX_SMBus_PMBus_Stack_Init()
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
  uint32_t      index;
  uint8_t*      piobuf;

  MX_STACK_SMBUS_Init();
 8004dce:	f000 f81f 	bl	8004e10 <MX_STACK_SMBUS_Init>

  piobuf = STACK_SMBUS_GetBuffer( pcontext );
 8004dd2:	4b0e      	ldr	r3, [pc, #56]	; (8004e0c <MX_SMBus_PMBus_Stack_Init+0x44>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fe76 	bl	8004ac8 <STACK_SMBUS_GetBuffer>
 8004ddc:	6038      	str	r0, [r7, #0]

  /* initializing the IO buffer */
  /* this part is optional */
  if (piobuf != NULL )
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00e      	beq.n	8004e02 <MX_SMBus_PMBus_Stack_Init+0x3a>
  {
    for (index = 0U; index < STACK_NBYTE_SIZE; index++)
 8004de4:	2300      	movs	r3, #0
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	e008      	b.n	8004dfc <MX_SMBus_PMBus_Stack_Init+0x34>
    {
      piobuf[index] = (uint8_t)index;
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4413      	add	r3, r2
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]
    for (index = 0U; index < STACK_NBYTE_SIZE; index++)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	607b      	str	r3, [r7, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2b27      	cmp	r3, #39	; 0x27
 8004e00:	d9f3      	bls.n	8004dea <MX_SMBus_PMBus_Stack_Init+0x22>
    }
  }
/* USER CODE BEGIN 1 */

/* USER CODE END 1 */
}
 8004e02:	bf00      	nop
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	200000dc 	.word	0x200000dc

08004e10 <MX_STACK_SMBUS_Init>:
#define SMBUS_HANDLE_instance hsmbus1
extern SMBUS_HandleTypeDef SMBUS_HANDLE_instance;

/* stack init function */
void MX_STACK_SMBUS_Init(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SMBUS_Init 0 */

  /* USER CODE END SMBUS_Init 0 */

  /* USER CODE BEGIN SMBUS_Init 1 */
	  context.CMD_table = (st_command_t *) & PMBUS_COMMANDS_TEST[0];
 8004e14:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <MX_STACK_SMBUS_Init+0x64>)
 8004e16:	4a18      	ldr	r2, [pc, #96]	; (8004e78 <MX_STACK_SMBUS_Init+0x68>)
 8004e18:	611a      	str	r2, [r3, #16]
	  context.CMD_tableSize = PMBUS_CMD_TBL_SIZE;
 8004e1a:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <MX_STACK_SMBUS_Init+0x64>)
 8004e1c:	2215      	movs	r2, #21
 8004e1e:	615a      	str	r2, [r3, #20]
  /* USER CODE END SMBUS_Init 1 */

  context.CMD_table = (st_command_t *) & PMBUS_COMMANDS_TAB[0];
 8004e20:	4b14      	ldr	r3, [pc, #80]	; (8004e74 <MX_STACK_SMBUS_Init+0x64>)
 8004e22:	4a16      	ldr	r2, [pc, #88]	; (8004e7c <MX_STACK_SMBUS_Init+0x6c>)
 8004e24:	611a      	str	r2, [r3, #16]
  context.CMD_tableSize = PMBUS_COMMANDS_TAB_SIZE;
 8004e26:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <MX_STACK_SMBUS_Init+0x64>)
 8004e28:	22a4      	movs	r2, #164	; 0xa4
 8004e2a:	615a      	str	r2, [r3, #20]
  context.Device = &SMBUS_HANDLE_instance;
 8004e2c:	4b11      	ldr	r3, [pc, #68]	; (8004e74 <MX_STACK_SMBUS_Init+0x64>)
 8004e2e:	4a14      	ldr	r2, [pc, #80]	; (8004e80 <MX_STACK_SMBUS_Init+0x70>)
 8004e30:	605a      	str	r2, [r3, #4]
  context.SRByte = 0x55U;
 8004e32:	4b10      	ldr	r3, [pc, #64]	; (8004e74 <MX_STACK_SMBUS_Init+0x64>)
 8004e34:	2255      	movs	r2, #85	; 0x55
 8004e36:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  context.CurrentCommand = NULL;
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <MX_STACK_SMBUS_Init+0x64>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	60da      	str	r2, [r3, #12]

  /* In SMBUS 10-bit addressing is reserved for future use */
  assert_param(SMBUS_HANDLE_instance.Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT);
  context.OwnAddress = SMBUS_HANDLE_instance.Init.OwnAddress1;
 8004e40:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <MX_STACK_SMBUS_Init+0x70>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	4b0b      	ldr	r3, [pc, #44]	; (8004e74 <MX_STACK_SMBUS_Init+0x64>)
 8004e48:	f883 2020 	strb.w	r2, [r3, #32]
  /* Address resolved state */
  context.StateMachine = SMBUS_SMS_ARP_AR;
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <MX_STACK_SMBUS_Init+0x64>)
 8004e4e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004e52:	601a      	str	r2, [r3, #0]
  /* checking the HAL host setting */
  assert_param(SMBUS_HANDLE_instance.Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_HOST);
  /* checking the HAL is in accord */
  assert_param(SMBUS_HANDLE_instance.Init.PacketErrorCheckMode == SMBUS_PEC_DISABLE);
  pcontext = &context;
 8004e54:	4b0b      	ldr	r3, [pc, #44]	; (8004e84 <MX_STACK_SMBUS_Init+0x74>)
 8004e56:	4a07      	ldr	r2, [pc, #28]	; (8004e74 <MX_STACK_SMBUS_Init+0x64>)
 8004e58:	601a      	str	r2, [r3, #0]

  if (STACK_SMBUS_Init( pcontext ) != HAL_OK)
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <MX_STACK_SMBUS_Init+0x74>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f7ff fdfa 	bl	8004a58 <STACK_SMBUS_Init>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <MX_STACK_SMBUS_Init+0x5e>
  {
    Error_Handler();
 8004e6a:	f7fb fa73 	bl	8000354 <Error_Handler>
  }
  /* USER CODE BEGIN SMBUS_Init 2 */

  /* USER CODE END SMBUS_Init 2 */

}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	2000008c 	.word	0x2000008c
 8004e78:	08005230 	.word	0x08005230
 8004e7c:	08004fa0 	.word	0x08004fa0
 8004e80:	20000030 	.word	0x20000030
 8004e84:	200000dc 	.word	0x200000dc

08004e88 <MX_SMBUS_Error_Check>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void MX_SMBUS_Error_Check( SMBUS_StackHandleTypeDef *pStackContext)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  if ( ( STACK_SMBUS_IsBlockingError(pStackContext) ) || ( STACK_SMBUS_IsCmdError( pStackContext ) ) )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 1344 	and.w	r3, r3, #3211264	; 0x310000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <MX_SMBUS_Error_Check+0x20>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d006      	beq.n	8004eb6 <MX_SMBUS_Error_Check+0x2e>
  {
    /* No action, error symptoms are ignored */
    pStackContext->StateMachine &= ~(SMBUS_ERROR_CRITICAL | SMBUS_COM_ERROR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f423 125c 	bic.w	r2, r3, #3604480	; 0x370000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	601a      	str	r2, [r3, #0]
  {
    pStackContext->StateMachine |= SMBUS_SMS_READY;
    pStackContext->CurrentCommand = NULL;
    pStackContext->StateMachine &= ~(SMBUS_SMS_ACTIVE_MASK | SMBUS_SMS_ERR_PECERR);
  }
}
 8004eb4:	e016      	b.n	8004ee4 <MX_SMBUS_Error_Check+0x5c>
  else if ((pStackContext->StateMachine & SMBUS_SMS_ERR_PECERR ) ==
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d010      	beq.n	8004ee4 <MX_SMBUS_Error_Check+0x5c>
    pStackContext->StateMachine |= SMBUS_SMS_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f043 0201 	orr.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	601a      	str	r2, [r3, #0]
    pStackContext->CurrentCommand = NULL;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	60da      	str	r2, [r3, #12]
    pStackContext->StateMachine &= ~(SMBUS_SMS_ACTIVE_MASK | SMBUS_SMS_ERR_PECERR);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004edc:	f023 035e 	bic.w	r3, r3, #94	; 0x5e
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6013      	str	r3, [r2, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <memset>:
 8004ef0:	4402      	add	r2, r0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d100      	bne.n	8004efa <memset+0xa>
 8004ef8:	4770      	bx	lr
 8004efa:	f803 1b01 	strb.w	r1, [r3], #1
 8004efe:	e7f9      	b.n	8004ef4 <memset+0x4>

08004f00 <__libc_init_array>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4d0d      	ldr	r5, [pc, #52]	; (8004f38 <__libc_init_array+0x38>)
 8004f04:	4c0d      	ldr	r4, [pc, #52]	; (8004f3c <__libc_init_array+0x3c>)
 8004f06:	1b64      	subs	r4, r4, r5
 8004f08:	10a4      	asrs	r4, r4, #2
 8004f0a:	2600      	movs	r6, #0
 8004f0c:	42a6      	cmp	r6, r4
 8004f0e:	d109      	bne.n	8004f24 <__libc_init_array+0x24>
 8004f10:	4d0b      	ldr	r5, [pc, #44]	; (8004f40 <__libc_init_array+0x40>)
 8004f12:	4c0c      	ldr	r4, [pc, #48]	; (8004f44 <__libc_init_array+0x44>)
 8004f14:	f000 f818 	bl	8004f48 <_init>
 8004f18:	1b64      	subs	r4, r4, r5
 8004f1a:	10a4      	asrs	r4, r4, #2
 8004f1c:	2600      	movs	r6, #0
 8004f1e:	42a6      	cmp	r6, r4
 8004f20:	d105      	bne.n	8004f2e <__libc_init_array+0x2e>
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f28:	4798      	blx	r3
 8004f2a:	3601      	adds	r6, #1
 8004f2c:	e7ee      	b.n	8004f0c <__libc_init_array+0xc>
 8004f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f32:	4798      	blx	r3
 8004f34:	3601      	adds	r6, #1
 8004f36:	e7f2      	b.n	8004f1e <__libc_init_array+0x1e>
 8004f38:	0800528c 	.word	0x0800528c
 8004f3c:	0800528c 	.word	0x0800528c
 8004f40:	0800528c 	.word	0x0800528c
 8004f44:	08005290 	.word	0x08005290

08004f48 <_init>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	bf00      	nop
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr

08004f54 <_fini>:
 8004f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f56:	bf00      	nop
 8004f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f5a:	bc08      	pop	{r3}
 8004f5c:	469e      	mov	lr, r3
 8004f5e:	4770      	bx	lr
