
SMBUS_SLAVE_F0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e94  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003f54  08003f54  00013f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fdc  08003fdc  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003fdc  08003fdc  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003fdc  08003fdc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fdc  08003fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003fe0  08003fe0  00013fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003fe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000014  08003ff8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003ff8  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005b59  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019b6  00000000  00000000  00025bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000620  00000000  00000000  00027590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000481  00000000  00000000  00027bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000f6d7  00000000  00000000  00028031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000091cc  00000000  00000000  00037708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000597c3  00000000  00000000  000408d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000013c8  00000000  00000000  0009a098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  0009b460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003f3c 	.word	0x08003f3c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003f3c 	.word	0x08003f3c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fa63 	bl	80006f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f827 	bl	800027c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f8c3 	bl	80003b8 <MX_GPIO_Init>
  MX_I2C1_SMBUS_Init();
 8000232:	f000 f885 	bl	8000340 <MX_I2C1_SMBUS_Init>
  MX_STACK_SMBUS_Init();
 8000236:	f003 fe05 	bl	8003e44 <MX_STACK_SMBUS_Init>
  /* USER CODE BEGIN 2 */
  uint8_t i;

  for (i= 0; i < 20; i++) {
 800023a:	1dfb      	adds	r3, r7, #7
 800023c:	2200      	movs	r2, #0
 800023e:	701a      	strb	r2, [r3, #0]
 8000240:	e00d      	b.n	800025e <main+0x3e>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000242:	2390      	movs	r3, #144	; 0x90
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	2110      	movs	r1, #16
 8000248:	0018      	movs	r0, r3
 800024a:	f000 fe46 	bl	8000eda <HAL_GPIO_TogglePin>
    HAL_Delay(50);
 800024e:	2032      	movs	r0, #50	; 0x32
 8000250:	f000 fab2 	bl	80007b8 <HAL_Delay>
  for (i= 0; i < 20; i++) {
 8000254:	1dfb      	adds	r3, r7, #7
 8000256:	781a      	ldrb	r2, [r3, #0]
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	3201      	adds	r2, #1
 800025c:	701a      	strb	r2, [r3, #0]
 800025e:	1dfb      	adds	r3, r7, #7
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b13      	cmp	r3, #19
 8000264:	d9ed      	bls.n	8000242 <main+0x22>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, toggle_led);
 8000266:	4b04      	ldr	r3, [pc, #16]	; (8000278 <main+0x58>)
 8000268:	781a      	ldrb	r2, [r3, #0]
 800026a:	2390      	movs	r3, #144	; 0x90
 800026c:	05db      	lsls	r3, r3, #23
 800026e:	2110      	movs	r1, #16
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fe15 	bl	8000ea0 <HAL_GPIO_WritePin>
 8000276:	e7f6      	b.n	8000266 <main+0x46>
 8000278:	20000080 	.word	0x20000080

0800027c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b095      	sub	sp, #84	; 0x54
 8000280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000282:	2420      	movs	r4, #32
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2330      	movs	r3, #48	; 0x30
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f003 fe29 	bl	8003ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000292:	2310      	movs	r3, #16
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	0018      	movs	r0, r3
 8000298:	2310      	movs	r3, #16
 800029a:	001a      	movs	r2, r3
 800029c:	2100      	movs	r1, #0
 800029e:	f003 fe21 	bl	8003ee4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a2:	003b      	movs	r3, r7
 80002a4:	0018      	movs	r0, r3
 80002a6:	2310      	movs	r3, #16
 80002a8:	001a      	movs	r2, r3
 80002aa:	2100      	movs	r1, #0
 80002ac:	f003 fe1a 	bl	8003ee4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b0:	0021      	movs	r1, r4
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2202      	movs	r2, #2
 80002b6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b8:	187b      	adds	r3, r7, r1
 80002ba:	2201      	movs	r2, #1
 80002bc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2210      	movs	r2, #16
 80002c2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c4:	187b      	adds	r3, r7, r1
 80002c6:	2202      	movs	r2, #2
 80002c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ca:	187b      	adds	r3, r7, r1
 80002cc:	2200      	movs	r2, #0
 80002ce:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002d0:	187b      	adds	r3, r7, r1
 80002d2:	22a0      	movs	r2, #160	; 0xa0
 80002d4:	0392      	lsls	r2, r2, #14
 80002d6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f000 fe15 	bl	8000f10 <HAL_RCC_OscConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80002ea:	f000 f8f5 	bl	80004d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	2110      	movs	r1, #16
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2207      	movs	r2, #7
 80002f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2202      	movs	r2, #2
 80002fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2101      	movs	r1, #1
 800030c:	0018      	movs	r0, r3
 800030e:	f001 f919 	bl	8001544 <HAL_RCC_ClockConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000316:	f000 f8df 	bl	80004d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800031a:	003b      	movs	r3, r7
 800031c:	2220      	movs	r2, #32
 800031e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000320:	003b      	movs	r3, r7
 8000322:	2210      	movs	r2, #16
 8000324:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000326:	003b      	movs	r3, r7
 8000328:	0018      	movs	r0, r3
 800032a:	f001 fa2f 	bl	800178c <HAL_RCCEx_PeriphCLKConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000332:	f000 f8d1 	bl	80004d8 <Error_Handler>
  }
}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b015      	add	sp, #84	; 0x54
 800033c:	bd90      	pop	{r4, r7, pc}
	...

08000340 <MX_I2C1_SMBUS_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_SMBUS_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hsmbus1.Instance = I2C1;
 8000344:	4b18      	ldr	r3, [pc, #96]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 8000346:	4a19      	ldr	r2, [pc, #100]	; (80003ac <MX_I2C1_SMBUS_Init+0x6c>)
 8000348:	601a      	str	r2, [r3, #0]
  hsmbus1.Init.Timing = 0x20303E5D;
 800034a:	4b17      	ldr	r3, [pc, #92]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 800034c:	4a18      	ldr	r2, [pc, #96]	; (80003b0 <MX_I2C1_SMBUS_Init+0x70>)
 800034e:	605a      	str	r2, [r3, #4]
  hsmbus1.Init.AnalogFilter = SMBUS_ANALOGFILTER_ENABLE;
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hsmbus1.Init.OwnAddress1 = 36;
 8000356:	4b14      	ldr	r3, [pc, #80]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 8000358:	2224      	movs	r2, #36	; 0x24
 800035a:	60da      	str	r2, [r3, #12]
  hsmbus1.Init.AddressingMode = SMBUS_ADDRESSINGMODE_7BIT;
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 800035e:	2201      	movs	r2, #1
 8000360:	611a      	str	r2, [r3, #16]
  hsmbus1.Init.DualAddressMode = SMBUS_DUALADDRESS_DISABLE;
 8000362:	4b11      	ldr	r3, [pc, #68]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  hsmbus1.Init.OwnAddress2 = 0;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  hsmbus1.Init.OwnAddress2Masks = SMBUS_OA2_NOMASK;
 800036e:	4b0e      	ldr	r3, [pc, #56]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 8000370:	2200      	movs	r2, #0
 8000372:	61da      	str	r2, [r3, #28]
  hsmbus1.Init.GeneralCallMode = SMBUS_GENERALCALL_DISABLE;
 8000374:	4b0c      	ldr	r3, [pc, #48]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 8000376:	2200      	movs	r2, #0
 8000378:	621a      	str	r2, [r3, #32]
  hsmbus1.Init.NoStretchMode = SMBUS_NOSTRETCH_DISABLE;
 800037a:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 800037c:	2200      	movs	r2, #0
 800037e:	625a      	str	r2, [r3, #36]	; 0x24
  hsmbus1.Init.PacketErrorCheckMode = SMBUS_PEC_DISABLE;
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 8000382:	2200      	movs	r2, #0
 8000384:	629a      	str	r2, [r3, #40]	; 0x28
  hsmbus1.Init.PeripheralMode = SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE;
 8000386:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 8000388:	2200      	movs	r2, #0
 800038a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsmbus1.Init.SMBusTimeout = 0x00008249;
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 800038e:	4a09      	ldr	r2, [pc, #36]	; (80003b4 <MX_I2C1_SMBUS_Init+0x74>)
 8000390:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SMBUS_Init(&hsmbus1) != HAL_OK)
 8000392:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <MX_I2C1_SMBUS_Init+0x68>)
 8000394:	0018      	movs	r0, r3
 8000396:	f001 fac7 	bl	8001928 <HAL_SMBUS_Init>
 800039a:	1e03      	subs	r3, r0, #0
 800039c:	d001      	beq.n	80003a2 <MX_I2C1_SMBUS_Init+0x62>
  {
    Error_Handler();
 800039e:	f000 f89b 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000030 	.word	0x20000030
 80003ac:	40005400 	.word	0x40005400
 80003b0:	20303e5d 	.word	0x20303e5d
 80003b4:	00008249 	.word	0x00008249

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b590      	push	{r4, r7, lr}
 80003ba:	b089      	sub	sp, #36	; 0x24
 80003bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003be:	240c      	movs	r4, #12
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	0018      	movs	r0, r3
 80003c4:	2314      	movs	r3, #20
 80003c6:	001a      	movs	r2, r3
 80003c8:	2100      	movs	r1, #0
 80003ca:	f003 fd8b 	bl	8003ee4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ce:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <MX_GPIO_Init+0x8c>)
 80003d0:	695a      	ldr	r2, [r3, #20]
 80003d2:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <MX_GPIO_Init+0x8c>)
 80003d4:	2180      	movs	r1, #128	; 0x80
 80003d6:	03c9      	lsls	r1, r1, #15
 80003d8:	430a      	orrs	r2, r1
 80003da:	615a      	str	r2, [r3, #20]
 80003dc:	4b19      	ldr	r3, [pc, #100]	; (8000444 <MX_GPIO_Init+0x8c>)
 80003de:	695a      	ldr	r2, [r3, #20]
 80003e0:	2380      	movs	r3, #128	; 0x80
 80003e2:	03db      	lsls	r3, r3, #15
 80003e4:	4013      	ands	r3, r2
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b16      	ldr	r3, [pc, #88]	; (8000444 <MX_GPIO_Init+0x8c>)
 80003ec:	695a      	ldr	r2, [r3, #20]
 80003ee:	4b15      	ldr	r3, [pc, #84]	; (8000444 <MX_GPIO_Init+0x8c>)
 80003f0:	2180      	movs	r1, #128	; 0x80
 80003f2:	0289      	lsls	r1, r1, #10
 80003f4:	430a      	orrs	r2, r1
 80003f6:	615a      	str	r2, [r3, #20]
 80003f8:	4b12      	ldr	r3, [pc, #72]	; (8000444 <MX_GPIO_Init+0x8c>)
 80003fa:	695a      	ldr	r2, [r3, #20]
 80003fc:	2380      	movs	r3, #128	; 0x80
 80003fe:	029b      	lsls	r3, r3, #10
 8000400:	4013      	ands	r3, r2
 8000402:	607b      	str	r3, [r7, #4]
 8000404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000406:	2390      	movs	r3, #144	; 0x90
 8000408:	05db      	lsls	r3, r3, #23
 800040a:	2200      	movs	r2, #0
 800040c:	2110      	movs	r1, #16
 800040e:	0018      	movs	r0, r3
 8000410:	f000 fd46 	bl	8000ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000414:	0021      	movs	r1, r4
 8000416:	187b      	adds	r3, r7, r1
 8000418:	2210      	movs	r2, #16
 800041a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041c:	187b      	adds	r3, r7, r1
 800041e:	2201      	movs	r2, #1
 8000420:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2200      	movs	r2, #0
 8000426:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042e:	187a      	adds	r2, r7, r1
 8000430:	2390      	movs	r3, #144	; 0x90
 8000432:	05db      	lsls	r3, r3, #23
 8000434:	0011      	movs	r1, r2
 8000436:	0018      	movs	r0, r3
 8000438:	f000 faf2 	bl	8000a20 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800043c:	46c0      	nop			; (mov r8, r8)
 800043e:	46bd      	mov	sp, r7
 8000440:	b009      	add	sp, #36	; 0x24
 8000442:	bd90      	pop	{r4, r7, pc}
 8000444:	40021000 	.word	0x40021000

08000448 <STACK_SMBUS_ExecuteCommand>:

/* USER CODE BEGIN 4 */
HAL_StatusTypeDef STACK_SMBUS_ExecuteCommand( SMBUS_StackHandleTypeDef *pStackContext )
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b084      	sub	sp, #16
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  uint8_t       *piobuf = NULL;
 8000450:	2300      	movs	r3, #0
 8000452:	60fb      	str	r3, [r7, #12]

  /* accessing the IO buffer */
  piobuf = STACK_SMBUS_GetBuffer( pStackContext );
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	0018      	movs	r0, r3
 8000458:	f003 fc68 	bl	8003d2c <STACK_SMBUS_GetBuffer>
 800045c:	0003      	movs	r3, r0
 800045e:	60fb      	str	r3, [r7, #12]

  if ( piobuf == NULL )
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	2b00      	cmp	r3, #0
 8000464:	d107      	bne.n	8000476 <STACK_SMBUS_ExecuteCommand+0x2e>
  {
    pStackContext->StateMachine |= SMBUS_SMS_ERROR;
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2280      	movs	r2, #128	; 0x80
 800046c:	0092      	lsls	r2, r2, #2
 800046e:	431a      	orrs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	e026      	b.n	80004c4 <STACK_SMBUS_ExecuteCommand+0x7c>
  }
  else if ( pStackContext->CurrentCommand == (st_command_t *)&HOST_NOTIFY_PROTOCOL )
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	68da      	ldr	r2, [r3, #12]
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <STACK_SMBUS_ExecuteCommand+0x88>)
 800047c:	429a      	cmp	r2, r3
 800047e:	d021      	beq.n	80004c4 <STACK_SMBUS_ExecuteCommand+0x7c>

 /* PMBUS13 */
    /*
      first step is to see if we have a case of extended command
    */
	  if ((pStackContext->CurrentCommand->cmnd_query & WRITE ) == WRITE ) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	68db      	ldr	r3, [r3, #12]
 8000484:	785b      	ldrb	r3, [r3, #1]
 8000486:	001a      	movs	r2, r3
 8000488:	2340      	movs	r3, #64	; 0x40
 800048a:	4013      	ands	r3, r2
 800048c:	d002      	beq.n	8000494 <STACK_SMBUS_ExecuteCommand+0x4c>

	    toggle_led = 1;
 800048e:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <STACK_SMBUS_ExecuteCommand+0x8c>)
 8000490:	2201      	movs	r2, #1
 8000492:	701a      	strb	r2, [r3, #0]
	 }

    if ((pStackContext->CurrentCommand->cmnd_query & READ ) == READ ) {
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	68db      	ldr	r3, [r3, #12]
 8000498:	785b      	ldrb	r3, [r3, #1]
 800049a:	001a      	movs	r2, r3
 800049c:	2320      	movs	r3, #32
 800049e:	4013      	ands	r3, r2
 80004a0:	d002      	beq.n	80004a8 <STACK_SMBUS_ExecuteCommand+0x60>
	    toggle_led = 0;
 80004a2:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <STACK_SMBUS_ExecuteCommand+0x8c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	701a      	strb	r2, [r3, #0]
	 }


	  if ((pStackContext->CurrentCommand->cmnd_query & BLOCK ) == BLOCK ) {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	68db      	ldr	r3, [r3, #12]
 80004ac:	785b      	ldrb	r3, [r3, #1]
 80004ae:	001a      	movs	r2, r3
 80004b0:	2310      	movs	r3, #16
 80004b2:	4013      	ands	r3, r2
 80004b4:	d006      	beq.n	80004c4 <STACK_SMBUS_ExecuteCommand+0x7c>
	          *piobuf = (pStackContext->CurrentCommand->cmnd_master_Rx_size) - 1U;
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	78db      	ldrb	r3, [r3, #3]
 80004bc:	3b01      	subs	r3, #1
 80004be:	b2da      	uxtb	r2, r3
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	701a      	strb	r2, [r3, #0]
	          /* byte size of reply for block read command */
	          /* One byte for size, rest are [size] of data */
	 }
  }
  return STACK_OK;
 80004c4:	2300      	movs	r3, #0
}
 80004c6:	0018      	movs	r0, r3
 80004c8:	46bd      	mov	sp, r7
 80004ca:	b004      	add	sp, #16
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	20000010 	.word	0x20000010
 80004d4:	20000080 	.word	0x20000080

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
}
 80004de:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <Error_Handler+0x8>
	...

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x44>)
 80004ec:	699a      	ldr	r2, [r3, #24]
 80004ee:	4b0e      	ldr	r3, [pc, #56]	; (8000528 <HAL_MspInit+0x44>)
 80004f0:	2101      	movs	r1, #1
 80004f2:	430a      	orrs	r2, r1
 80004f4:	619a      	str	r2, [r3, #24]
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x44>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	2201      	movs	r2, #1
 80004fc:	4013      	ands	r3, r2
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_MspInit+0x44>)
 8000504:	69da      	ldr	r2, [r3, #28]
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <HAL_MspInit+0x44>)
 8000508:	2180      	movs	r1, #128	; 0x80
 800050a:	0549      	lsls	r1, r1, #21
 800050c:	430a      	orrs	r2, r1
 800050e:	61da      	str	r2, [r3, #28]
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <HAL_MspInit+0x44>)
 8000512:	69da      	ldr	r2, [r3, #28]
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	055b      	lsls	r3, r3, #21
 8000518:	4013      	ands	r3, r2
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b002      	add	sp, #8
 8000524:	bd80      	pop	{r7, pc}
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_SMBUS_MspInit>:
* This function configures the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspInit(SMBUS_HandleTypeDef* hsmbus)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b08b      	sub	sp, #44	; 0x2c
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	2414      	movs	r4, #20
 8000536:	193b      	adds	r3, r7, r4
 8000538:	0018      	movs	r0, r3
 800053a:	2314      	movs	r3, #20
 800053c:	001a      	movs	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	f003 fcd0 	bl	8003ee4 <memset>
  if(hsmbus->Instance==I2C1)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a21      	ldr	r2, [pc, #132]	; (80005d0 <HAL_SMBUS_MspInit+0xa4>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d13b      	bne.n	80005c6 <HAL_SMBUS_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b21      	ldr	r3, [pc, #132]	; (80005d4 <HAL_SMBUS_MspInit+0xa8>)
 8000550:	695a      	ldr	r2, [r3, #20]
 8000552:	4b20      	ldr	r3, [pc, #128]	; (80005d4 <HAL_SMBUS_MspInit+0xa8>)
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	0289      	lsls	r1, r1, #10
 8000558:	430a      	orrs	r2, r1
 800055a:	615a      	str	r2, [r3, #20]
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <HAL_SMBUS_MspInit+0xa8>)
 800055e:	695a      	ldr	r2, [r3, #20]
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	029b      	lsls	r3, r3, #10
 8000564:	4013      	ands	r3, r2
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	22c0      	movs	r2, #192	; 0xc0
 800056e:	00d2      	lsls	r2, r2, #3
 8000570:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000572:	0021      	movs	r1, r4
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2212      	movs	r2, #18
 8000578:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2203      	movs	r2, #3
 8000584:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2204      	movs	r2, #4
 800058a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	187a      	adds	r2, r7, r1
 800058e:	2390      	movs	r3, #144	; 0x90
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	0011      	movs	r1, r2
 8000594:	0018      	movs	r0, r3
 8000596:	f000 fa43 	bl	8000a20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <HAL_SMBUS_MspInit+0xa8>)
 800059c:	69da      	ldr	r2, [r3, #28]
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <HAL_SMBUS_MspInit+0xa8>)
 80005a0:	2180      	movs	r1, #128	; 0x80
 80005a2:	0389      	lsls	r1, r1, #14
 80005a4:	430a      	orrs	r2, r1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <HAL_SMBUS_MspInit+0xa8>)
 80005aa:	69da      	ldr	r2, [r3, #28]
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	039b      	lsls	r3, r3, #14
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	2017      	movs	r0, #23
 80005bc:	f000 f9ee 	bl	800099c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80005c0:	2017      	movs	r0, #23
 80005c2:	f000 fa00 	bl	80009c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	b00b      	add	sp, #44	; 0x2c
 80005cc:	bd90      	pop	{r4, r7, pc}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	40005400 	.word	0x40005400
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_SMBUS_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hsmbus: SMBUS handle pointer
* @retval None
*/
void HAL_SMBUS_MspDeInit(SMBUS_HandleTypeDef* hsmbus)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  if(hsmbus->Instance==I2C1)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <HAL_SMBUS_MspDeInit+0x4c>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d118      	bne.n	800061c <HAL_SMBUS_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <HAL_SMBUS_MspDeInit+0x50>)
 80005ec:	69da      	ldr	r2, [r3, #28]
 80005ee:	4b0e      	ldr	r3, [pc, #56]	; (8000628 <HAL_SMBUS_MspDeInit+0x50>)
 80005f0:	490e      	ldr	r1, [pc, #56]	; (800062c <HAL_SMBUS_MspDeInit+0x54>)
 80005f2:	400a      	ands	r2, r1
 80005f4:	61da      	str	r2, [r3, #28]

    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80005f6:	2380      	movs	r3, #128	; 0x80
 80005f8:	009a      	lsls	r2, r3, #2
 80005fa:	2390      	movs	r3, #144	; 0x90
 80005fc:	05db      	lsls	r3, r3, #23
 80005fe:	0011      	movs	r1, r2
 8000600:	0018      	movs	r0, r3
 8000602:	f000 fb7d 	bl	8000d00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10);
 8000606:	2380      	movs	r3, #128	; 0x80
 8000608:	00da      	lsls	r2, r3, #3
 800060a:	2390      	movs	r3, #144	; 0x90
 800060c:	05db      	lsls	r3, r3, #23
 800060e:	0011      	movs	r1, r2
 8000610:	0018      	movs	r0, r3
 8000612:	f000 fb75 	bl	8000d00 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_IRQn);
 8000616:	2017      	movs	r0, #23
 8000618:	f000 f9e5 	bl	80009e6 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b002      	add	sp, #8
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40005400 	.word	0x40005400
 8000628:	40021000 	.word	0x40021000
 800062c:	ffdfffff 	.word	0xffdfffff

08000630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <NMI_Handler+0x4>

08000636 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063a:	e7fe      	b.n	800063a <HardFault_Handler+0x4>

0800063c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}

08000646 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000654:	f000 f894 	bl	8000780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hsmbus1.Instance->ISR & (SMBUS_FLAG_BERR | SMBUS_FLAG_ARLO | SMBUS_FLAG_OVR | SMBUS_FLAG_TIMEOUT | SMBUS_FLAG_ALERT | SMBUS_FLAG_PECERR)) {
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <I2C1_IRQHandler+0x2c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	699a      	ldr	r2, [r3, #24]
 800066a:	23fc      	movs	r3, #252	; 0xfc
 800066c:	019b      	lsls	r3, r3, #6
 800066e:	4013      	ands	r3, r2
 8000670:	d004      	beq.n	800067c <I2C1_IRQHandler+0x1c>
    HAL_SMBUS_ER_IRQHandler(&hsmbus1);
 8000672:	4b06      	ldr	r3, [pc, #24]	; (800068c <I2C1_IRQHandler+0x2c>)
 8000674:	0018      	movs	r0, r3
 8000676:	f001 fd55 	bl	8002124 <HAL_SMBUS_ER_IRQHandler>
    HAL_SMBUS_EV_IRQHandler(&hsmbus1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800067a:	e003      	b.n	8000684 <I2C1_IRQHandler+0x24>
    HAL_SMBUS_EV_IRQHandler(&hsmbus1);
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <I2C1_IRQHandler+0x2c>)
 800067e:	0018      	movs	r0, r3
 8000680:	f001 fcb8 	bl	8001ff4 <HAL_SMBUS_EV_IRQHandler>
}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	20000030 	.word	0x20000030

08000690 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000694:	46c0      	nop			; (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
	...

0800069c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a0:	f7ff fff6 	bl	8000690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a4:	480c      	ldr	r0, [pc, #48]	; (80006d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a6:	490d      	ldr	r1, [pc, #52]	; (80006dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a8:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <LoopForever+0xe>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ac:	e002      	b.n	80006b4 <LoopCopyDataInit>

080006ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b2:	3304      	adds	r3, #4

080006b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b8:	d3f9      	bcc.n	80006ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ba:	4a0a      	ldr	r2, [pc, #40]	; (80006e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006bc:	4c0a      	ldr	r4, [pc, #40]	; (80006e8 <LoopForever+0x16>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c0:	e001      	b.n	80006c6 <LoopFillZerobss>

080006c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c4:	3204      	adds	r2, #4

080006c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c8:	d3fb      	bcc.n	80006c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006ca:	f003 fc13 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ce:	f7ff fda7 	bl	8000220 <main>

080006d2 <LoopForever>:

LoopForever:
    b LoopForever
 80006d2:	e7fe      	b.n	80006d2 <LoopForever>
  ldr   r0, =_estack
 80006d4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80006d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006dc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80006e0:	08003fe4 	.word	0x08003fe4
  ldr r2, =_sbss
 80006e4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80006e8:	200000e4 	.word	0x200000e4

080006ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006ec:	e7fe      	b.n	80006ec <ADC1_IRQHandler>
	...

080006f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006f4:	4b07      	ldr	r3, [pc, #28]	; (8000714 <HAL_Init+0x24>)
 80006f6:	681a      	ldr	r2, [r3, #0]
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_Init+0x24>)
 80006fa:	2110      	movs	r1, #16
 80006fc:	430a      	orrs	r2, r1
 80006fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000700:	2003      	movs	r0, #3
 8000702:	f000 f809 	bl	8000718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000706:	f7ff feed 	bl	80004e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800070a:	2300      	movs	r3, #0
}
 800070c:	0018      	movs	r0, r3
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	40022000 	.word	0x40022000

08000718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000718:	b590      	push	{r4, r7, lr}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <HAL_InitTick+0x5c>)
 8000722:	681c      	ldr	r4, [r3, #0]
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_InitTick+0x60>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	0019      	movs	r1, r3
 800072a:	23fa      	movs	r3, #250	; 0xfa
 800072c:	0098      	lsls	r0, r3, #2
 800072e:	f7ff fceb 	bl	8000108 <__udivsi3>
 8000732:	0003      	movs	r3, r0
 8000734:	0019      	movs	r1, r3
 8000736:	0020      	movs	r0, r4
 8000738:	f7ff fce6 	bl	8000108 <__udivsi3>
 800073c:	0003      	movs	r3, r0
 800073e:	0018      	movs	r0, r3
 8000740:	f000 f961 	bl	8000a06 <HAL_SYSTICK_Config>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000748:	2301      	movs	r3, #1
 800074a:	e00f      	b.n	800076c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d80b      	bhi.n	800076a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000752:	6879      	ldr	r1, [r7, #4]
 8000754:	2301      	movs	r3, #1
 8000756:	425b      	negs	r3, r3
 8000758:	2200      	movs	r2, #0
 800075a:	0018      	movs	r0, r3
 800075c:	f000 f91e 	bl	800099c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000760:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_InitTick+0x64>)
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000766:	2300      	movs	r3, #0
 8000768:	e000      	b.n	800076c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800076a:	2301      	movs	r3, #1
}
 800076c:	0018      	movs	r0, r3
 800076e:	46bd      	mov	sp, r7
 8000770:	b003      	add	sp, #12
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	20000000 	.word	0x20000000
 8000778:	20000008 	.word	0x20000008
 800077c:	20000004 	.word	0x20000004

08000780 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_IncTick+0x1c>)
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	001a      	movs	r2, r3
 800078a:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_IncTick+0x20>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	18d2      	adds	r2, r2, r3
 8000790:	4b03      	ldr	r3, [pc, #12]	; (80007a0 <HAL_IncTick+0x20>)
 8000792:	601a      	str	r2, [r3, #0]
}
 8000794:	46c0      	nop			; (mov r8, r8)
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	20000008 	.word	0x20000008
 80007a0:	20000084 	.word	0x20000084

080007a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  return uwTick;
 80007a8:	4b02      	ldr	r3, [pc, #8]	; (80007b4 <HAL_GetTick+0x10>)
 80007aa:	681b      	ldr	r3, [r3, #0]
}
 80007ac:	0018      	movs	r0, r3
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	20000084 	.word	0x20000084

080007b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c0:	f7ff fff0 	bl	80007a4 <HAL_GetTick>
 80007c4:	0003      	movs	r3, r0
 80007c6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	3301      	adds	r3, #1
 80007d0:	d005      	beq.n	80007de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <HAL_Delay+0x44>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	001a      	movs	r2, r3
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	189b      	adds	r3, r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	f7ff ffe0 	bl	80007a4 <HAL_GetTick>
 80007e4:	0002      	movs	r2, r0
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	1ad3      	subs	r3, r2, r3
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d8f7      	bhi.n	80007e0 <HAL_Delay+0x28>
  {
  }
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b004      	add	sp, #16
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	20000008 	.word	0x20000008

08000800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	0002      	movs	r2, r0
 8000808:	1dfb      	adds	r3, r7, #7
 800080a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800080c:	1dfb      	adds	r3, r7, #7
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b7f      	cmp	r3, #127	; 0x7f
 8000812:	d809      	bhi.n	8000828 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	001a      	movs	r2, r3
 800081a:	231f      	movs	r3, #31
 800081c:	401a      	ands	r2, r3
 800081e:	4b04      	ldr	r3, [pc, #16]	; (8000830 <__NVIC_EnableIRQ+0x30>)
 8000820:	2101      	movs	r1, #1
 8000822:	4091      	lsls	r1, r2
 8000824:	000a      	movs	r2, r1
 8000826:	601a      	str	r2, [r3, #0]
  }
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	e000e100 	.word	0xe000e100

08000834 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b7f      	cmp	r3, #127	; 0x7f
 8000846:	d810      	bhi.n	800086a <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	001a      	movs	r2, r3
 800084e:	231f      	movs	r3, #31
 8000850:	4013      	ands	r3, r2
 8000852:	4908      	ldr	r1, [pc, #32]	; (8000874 <__NVIC_DisableIRQ+0x40>)
 8000854:	2201      	movs	r2, #1
 8000856:	409a      	lsls	r2, r3
 8000858:	0013      	movs	r3, r2
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800085e:	f3bf 8f4f 	dsb	sy
}
 8000862:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8000864:	f3bf 8f6f 	isb	sy
}
 8000868:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b002      	add	sp, #8
 8000870:	bd80      	pop	{r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	e000e100 	.word	0xe000e100

08000878 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	0002      	movs	r2, r0
 8000880:	6039      	str	r1, [r7, #0]
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b7f      	cmp	r3, #127	; 0x7f
 800088c:	d828      	bhi.n	80008e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800088e:	4a2f      	ldr	r2, [pc, #188]	; (800094c <__NVIC_SetPriority+0xd4>)
 8000890:	1dfb      	adds	r3, r7, #7
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	b25b      	sxtb	r3, r3
 8000896:	089b      	lsrs	r3, r3, #2
 8000898:	33c0      	adds	r3, #192	; 0xc0
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	589b      	ldr	r3, [r3, r2]
 800089e:	1dfa      	adds	r2, r7, #7
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	0011      	movs	r1, r2
 80008a4:	2203      	movs	r2, #3
 80008a6:	400a      	ands	r2, r1
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	21ff      	movs	r1, #255	; 0xff
 80008ac:	4091      	lsls	r1, r2
 80008ae:	000a      	movs	r2, r1
 80008b0:	43d2      	mvns	r2, r2
 80008b2:	401a      	ands	r2, r3
 80008b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	019b      	lsls	r3, r3, #6
 80008ba:	22ff      	movs	r2, #255	; 0xff
 80008bc:	401a      	ands	r2, r3
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	0018      	movs	r0, r3
 80008c4:	2303      	movs	r3, #3
 80008c6:	4003      	ands	r3, r0
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008cc:	481f      	ldr	r0, [pc, #124]	; (800094c <__NVIC_SetPriority+0xd4>)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	089b      	lsrs	r3, r3, #2
 80008d6:	430a      	orrs	r2, r1
 80008d8:	33c0      	adds	r3, #192	; 0xc0
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008de:	e031      	b.n	8000944 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e0:	4a1b      	ldr	r2, [pc, #108]	; (8000950 <__NVIC_SetPriority+0xd8>)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	0019      	movs	r1, r3
 80008e8:	230f      	movs	r3, #15
 80008ea:	400b      	ands	r3, r1
 80008ec:	3b08      	subs	r3, #8
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	3306      	adds	r3, #6
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	18d3      	adds	r3, r2, r3
 80008f6:	3304      	adds	r3, #4
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	1dfa      	adds	r2, r7, #7
 80008fc:	7812      	ldrb	r2, [r2, #0]
 80008fe:	0011      	movs	r1, r2
 8000900:	2203      	movs	r2, #3
 8000902:	400a      	ands	r2, r1
 8000904:	00d2      	lsls	r2, r2, #3
 8000906:	21ff      	movs	r1, #255	; 0xff
 8000908:	4091      	lsls	r1, r2
 800090a:	000a      	movs	r2, r1
 800090c:	43d2      	mvns	r2, r2
 800090e:	401a      	ands	r2, r3
 8000910:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	019b      	lsls	r3, r3, #6
 8000916:	22ff      	movs	r2, #255	; 0xff
 8000918:	401a      	ands	r2, r3
 800091a:	1dfb      	adds	r3, r7, #7
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	0018      	movs	r0, r3
 8000920:	2303      	movs	r3, #3
 8000922:	4003      	ands	r3, r0
 8000924:	00db      	lsls	r3, r3, #3
 8000926:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000928:	4809      	ldr	r0, [pc, #36]	; (8000950 <__NVIC_SetPriority+0xd8>)
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	001c      	movs	r4, r3
 8000930:	230f      	movs	r3, #15
 8000932:	4023      	ands	r3, r4
 8000934:	3b08      	subs	r3, #8
 8000936:	089b      	lsrs	r3, r3, #2
 8000938:	430a      	orrs	r2, r1
 800093a:	3306      	adds	r3, #6
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	18c3      	adds	r3, r0, r3
 8000940:	3304      	adds	r3, #4
 8000942:	601a      	str	r2, [r3, #0]
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b003      	add	sp, #12
 800094a:	bd90      	pop	{r4, r7, pc}
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	1e5a      	subs	r2, r3, #1
 8000960:	2380      	movs	r3, #128	; 0x80
 8000962:	045b      	lsls	r3, r3, #17
 8000964:	429a      	cmp	r2, r3
 8000966:	d301      	bcc.n	800096c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000968:	2301      	movs	r3, #1
 800096a:	e010      	b.n	800098e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096c:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <SysTick_Config+0x44>)
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	3a01      	subs	r2, #1
 8000972:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000974:	2301      	movs	r3, #1
 8000976:	425b      	negs	r3, r3
 8000978:	2103      	movs	r1, #3
 800097a:	0018      	movs	r0, r3
 800097c:	f7ff ff7c 	bl	8000878 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <SysTick_Config+0x44>)
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <SysTick_Config+0x44>)
 8000988:	2207      	movs	r2, #7
 800098a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800098c:	2300      	movs	r3, #0
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b002      	add	sp, #8
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	e000e010 	.word	0xe000e010

0800099c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60b9      	str	r1, [r7, #8]
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	210f      	movs	r1, #15
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	1c02      	adds	r2, r0, #0
 80009ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	b25b      	sxtb	r3, r3
 80009b6:	0011      	movs	r1, r2
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff ff5d 	bl	8000878 <__NVIC_SetPriority>
}
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b004      	add	sp, #16
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	b082      	sub	sp, #8
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	0002      	movs	r2, r0
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	b25b      	sxtb	r3, r3
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff ff11 	bl	8000800 <__NVIC_EnableIRQ>
}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	0002      	movs	r2, r0
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff ff1b 	bl	8000834 <__NVIC_DisableIRQ>
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	0018      	movs	r0, r3
 8000a12:	f7ff ff9f 	bl	8000954 <SysTick_Config>
 8000a16:	0003      	movs	r3, r0
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a2e:	e14f      	b.n	8000cd0 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2101      	movs	r1, #1
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	4091      	lsls	r1, r2
 8000a3a:	000a      	movs	r2, r1
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d100      	bne.n	8000a48 <HAL_GPIO_Init+0x28>
 8000a46:	e140      	b.n	8000cca <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	2203      	movs	r2, #3
 8000a4e:	4013      	ands	r3, r2
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d005      	beq.n	8000a60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	2203      	movs	r2, #3
 8000a5a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d130      	bne.n	8000ac2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	2203      	movs	r2, #3
 8000a6c:	409a      	lsls	r2, r3
 8000a6e:	0013      	movs	r3, r2
 8000a70:	43da      	mvns	r2, r3
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	409a      	lsls	r2, r3
 8000a82:	0013      	movs	r3, r2
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	4313      	orrs	r3, r2
 8000a88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a96:	2201      	movs	r2, #1
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	409a      	lsls	r2, r3
 8000a9c:	0013      	movs	r3, r2
 8000a9e:	43da      	mvns	r2, r3
 8000aa0:	693b      	ldr	r3, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	091b      	lsrs	r3, r3, #4
 8000aac:	2201      	movs	r2, #1
 8000aae:	401a      	ands	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	2203      	movs	r2, #3
 8000ac8:	4013      	ands	r3, r2
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d017      	beq.n	8000afe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	68db      	ldr	r3, [r3, #12]
 8000ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	2203      	movs	r2, #3
 8000ada:	409a      	lsls	r2, r3
 8000adc:	0013      	movs	r3, r2
 8000ade:	43da      	mvns	r2, r3
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	409a      	lsls	r2, r3
 8000af0:	0013      	movs	r3, r2
 8000af2:	693a      	ldr	r2, [r7, #16]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	2203      	movs	r2, #3
 8000b04:	4013      	ands	r3, r2
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d123      	bne.n	8000b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	08da      	lsrs	r2, r3, #3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	3208      	adds	r2, #8
 8000b12:	0092      	lsls	r2, r2, #2
 8000b14:	58d3      	ldr	r3, [r2, r3]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	2207      	movs	r2, #7
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	220f      	movs	r2, #15
 8000b22:	409a      	lsls	r2, r3
 8000b24:	0013      	movs	r3, r2
 8000b26:	43da      	mvns	r2, r3
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	691a      	ldr	r2, [r3, #16]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	2107      	movs	r1, #7
 8000b36:	400b      	ands	r3, r1
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	409a      	lsls	r2, r3
 8000b3c:	0013      	movs	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b44:	697b      	ldr	r3, [r7, #20]
 8000b46:	08da      	lsrs	r2, r3, #3
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3208      	adds	r2, #8
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	6939      	ldr	r1, [r7, #16]
 8000b50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	2203      	movs	r2, #3
 8000b5e:	409a      	lsls	r2, r3
 8000b60:	0013      	movs	r3, r2
 8000b62:	43da      	mvns	r2, r3
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	4013      	ands	r3, r2
 8000b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	2203      	movs	r2, #3
 8000b70:	401a      	ands	r2, r3
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	409a      	lsls	r2, r3
 8000b78:	0013      	movs	r3, r2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	685a      	ldr	r2, [r3, #4]
 8000b8a:	23c0      	movs	r3, #192	; 0xc0
 8000b8c:	029b      	lsls	r3, r3, #10
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d100      	bne.n	8000b94 <HAL_GPIO_Init+0x174>
 8000b92:	e09a      	b.n	8000cca <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b94:	4b54      	ldr	r3, [pc, #336]	; (8000ce8 <HAL_GPIO_Init+0x2c8>)
 8000b96:	699a      	ldr	r2, [r3, #24]
 8000b98:	4b53      	ldr	r3, [pc, #332]	; (8000ce8 <HAL_GPIO_Init+0x2c8>)
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	619a      	str	r2, [r3, #24]
 8000ba0:	4b51      	ldr	r3, [pc, #324]	; (8000ce8 <HAL_GPIO_Init+0x2c8>)
 8000ba2:	699b      	ldr	r3, [r3, #24]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bac:	4a4f      	ldr	r2, [pc, #316]	; (8000cec <HAL_GPIO_Init+0x2cc>)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	089b      	lsrs	r3, r3, #2
 8000bb2:	3302      	adds	r3, #2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	589b      	ldr	r3, [r3, r2]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	220f      	movs	r2, #15
 8000bc4:	409a      	lsls	r2, r3
 8000bc6:	0013      	movs	r3, r2
 8000bc8:	43da      	mvns	r2, r3
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	2390      	movs	r3, #144	; 0x90
 8000bd4:	05db      	lsls	r3, r3, #23
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d013      	beq.n	8000c02 <HAL_GPIO_Init+0x1e2>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a44      	ldr	r2, [pc, #272]	; (8000cf0 <HAL_GPIO_Init+0x2d0>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d00d      	beq.n	8000bfe <HAL_GPIO_Init+0x1de>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4a43      	ldr	r2, [pc, #268]	; (8000cf4 <HAL_GPIO_Init+0x2d4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d007      	beq.n	8000bfa <HAL_GPIO_Init+0x1da>
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a42      	ldr	r2, [pc, #264]	; (8000cf8 <HAL_GPIO_Init+0x2d8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d101      	bne.n	8000bf6 <HAL_GPIO_Init+0x1d6>
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	e006      	b.n	8000c04 <HAL_GPIO_Init+0x1e4>
 8000bf6:	2305      	movs	r3, #5
 8000bf8:	e004      	b.n	8000c04 <HAL_GPIO_Init+0x1e4>
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	e002      	b.n	8000c04 <HAL_GPIO_Init+0x1e4>
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e000      	b.n	8000c04 <HAL_GPIO_Init+0x1e4>
 8000c02:	2300      	movs	r3, #0
 8000c04:	697a      	ldr	r2, [r7, #20]
 8000c06:	2103      	movs	r1, #3
 8000c08:	400a      	ands	r2, r1
 8000c0a:	0092      	lsls	r2, r2, #2
 8000c0c:	4093      	lsls	r3, r2
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c14:	4935      	ldr	r1, [pc, #212]	; (8000cec <HAL_GPIO_Init+0x2cc>)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	3302      	adds	r3, #2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c22:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <HAL_GPIO_Init+0x2dc>)
 8000c24:	689b      	ldr	r3, [r3, #8]
 8000c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685a      	ldr	r2, [r3, #4]
 8000c36:	2380      	movs	r3, #128	; 0x80
 8000c38:	035b      	lsls	r3, r3, #13
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	d003      	beq.n	8000c46 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <HAL_GPIO_Init+0x2dc>)
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c4c:	4b2b      	ldr	r3, [pc, #172]	; (8000cfc <HAL_GPIO_Init+0x2dc>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	43da      	mvns	r2, r3
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685a      	ldr	r2, [r3, #4]
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	039b      	lsls	r3, r3, #14
 8000c64:	4013      	ands	r3, r2
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c70:	4b22      	ldr	r3, [pc, #136]	; (8000cfc <HAL_GPIO_Init+0x2dc>)
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <HAL_GPIO_Init+0x2dc>)
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	4013      	ands	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	029b      	lsls	r3, r3, #10
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_GPIO_Init+0x2dc>)
 8000c9c:	693a      	ldr	r2, [r7, #16]
 8000c9e:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <HAL_GPIO_Init+0x2dc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	43da      	mvns	r2, r3
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	2380      	movs	r3, #128	; 0x80
 8000cb6:	025b      	lsls	r3, r3, #9
 8000cb8:	4013      	ands	r3, r2
 8000cba:	d003      	beq.n	8000cc4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <HAL_GPIO_Init+0x2dc>)
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	3301      	adds	r3, #1
 8000cce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	40da      	lsrs	r2, r3
 8000cd8:	1e13      	subs	r3, r2, #0
 8000cda:	d000      	beq.n	8000cde <HAL_GPIO_Init+0x2be>
 8000cdc:	e6a8      	b.n	8000a30 <HAL_GPIO_Init+0x10>
  } 
}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b006      	add	sp, #24
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	40010000 	.word	0x40010000
 8000cf0:	48000400 	.word	0x48000400
 8000cf4:	48000800 	.word	0x48000800
 8000cf8:	48000c00 	.word	0x48000c00
 8000cfc:	40010400 	.word	0x40010400

08000d00 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8000d0e:	e0b1      	b.n	8000e74 <HAL_GPIO_DeInit+0x174>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000d10:	2201      	movs	r2, #1
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	409a      	lsls	r2, r3
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d100      	bne.n	8000d24 <HAL_GPIO_DeInit+0x24>
 8000d22:	e0a4      	b.n	8000e6e <HAL_GPIO_DeInit+0x16e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8000d24:	4a59      	ldr	r2, [pc, #356]	; (8000e8c <HAL_GPIO_DeInit+0x18c>)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	589b      	ldr	r3, [r3, r2]
 8000d30:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	2203      	movs	r2, #3
 8000d36:	4013      	ands	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	409a      	lsls	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	2390      	movs	r3, #144	; 0x90
 8000d48:	05db      	lsls	r3, r3, #23
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d013      	beq.n	8000d76 <HAL_GPIO_DeInit+0x76>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a4f      	ldr	r2, [pc, #316]	; (8000e90 <HAL_GPIO_DeInit+0x190>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00d      	beq.n	8000d72 <HAL_GPIO_DeInit+0x72>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a4e      	ldr	r2, [pc, #312]	; (8000e94 <HAL_GPIO_DeInit+0x194>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_DeInit+0x6e>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a4d      	ldr	r2, [pc, #308]	; (8000e98 <HAL_GPIO_DeInit+0x198>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d101      	bne.n	8000d6a <HAL_GPIO_DeInit+0x6a>
 8000d66:	2303      	movs	r3, #3
 8000d68:	e006      	b.n	8000d78 <HAL_GPIO_DeInit+0x78>
 8000d6a:	2305      	movs	r3, #5
 8000d6c:	e004      	b.n	8000d78 <HAL_GPIO_DeInit+0x78>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	e002      	b.n	8000d78 <HAL_GPIO_DeInit+0x78>
 8000d72:	2301      	movs	r3, #1
 8000d74:	e000      	b.n	8000d78 <HAL_GPIO_DeInit+0x78>
 8000d76:	2300      	movs	r3, #0
 8000d78:	697a      	ldr	r2, [r7, #20]
 8000d7a:	2103      	movs	r1, #3
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	0092      	lsls	r2, r2, #2
 8000d80:	4093      	lsls	r3, r2
 8000d82:	68fa      	ldr	r2, [r7, #12]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d132      	bne.n	8000dee <HAL_GPIO_DeInit+0xee>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8000d88:	4b44      	ldr	r3, [pc, #272]	; (8000e9c <HAL_GPIO_DeInit+0x19c>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	4b42      	ldr	r3, [pc, #264]	; (8000e9c <HAL_GPIO_DeInit+0x19c>)
 8000d92:	400a      	ands	r2, r1
 8000d94:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8000d96:	4b41      	ldr	r3, [pc, #260]	; (8000e9c <HAL_GPIO_DeInit+0x19c>)
 8000d98:	685a      	ldr	r2, [r3, #4]
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	43d9      	mvns	r1, r3
 8000d9e:	4b3f      	ldr	r3, [pc, #252]	; (8000e9c <HAL_GPIO_DeInit+0x19c>)
 8000da0:	400a      	ands	r2, r1
 8000da2:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8000da4:	4b3d      	ldr	r3, [pc, #244]	; (8000e9c <HAL_GPIO_DeInit+0x19c>)
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	4b3b      	ldr	r3, [pc, #236]	; (8000e9c <HAL_GPIO_DeInit+0x19c>)
 8000dae:	400a      	ands	r2, r1
 8000db0:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8000db2:	4b3a      	ldr	r3, [pc, #232]	; (8000e9c <HAL_GPIO_DeInit+0x19c>)
 8000db4:	689a      	ldr	r2, [r3, #8]
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	43d9      	mvns	r1, r3
 8000dba:	4b38      	ldr	r3, [pc, #224]	; (8000e9c <HAL_GPIO_DeInit+0x19c>)
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	609a      	str	r2, [r3, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	220f      	movs	r2, #15
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	0013      	movs	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8000dd0:	4a2e      	ldr	r2, [pc, #184]	; (8000e8c <HAL_GPIO_DeInit+0x18c>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	589a      	ldr	r2, [r3, r2]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	43d9      	mvns	r1, r3
 8000de0:	482a      	ldr	r0, [pc, #168]	; (8000e8c <HAL_GPIO_DeInit+0x18c>)
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	400a      	ands	r2, r1
 8000de8:	3302      	adds	r3, #2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	0052      	lsls	r2, r2, #1
 8000df6:	2103      	movs	r1, #3
 8000df8:	4091      	lsls	r1, r2
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	43d2      	mvns	r2, r2
 8000dfe:	401a      	ands	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	08da      	lsrs	r2, r3, #3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	3208      	adds	r2, #8
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	58d3      	ldr	r3, [r2, r3]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	2107      	movs	r1, #7
 8000e14:	400a      	ands	r2, r1
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	210f      	movs	r1, #15
 8000e1a:	4091      	lsls	r1, r2
 8000e1c:	000a      	movs	r2, r1
 8000e1e:	43d1      	mvns	r1, r2
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	08d2      	lsrs	r2, r2, #3
 8000e24:	4019      	ands	r1, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	0052      	lsls	r2, r2, #1
 8000e36:	2103      	movs	r1, #3
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	000a      	movs	r2, r1
 8000e3c:	43d2      	mvns	r2, r2
 8000e3e:	401a      	ands	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	4091      	lsls	r1, r2
 8000e4e:	000a      	movs	r2, r1
 8000e50:	43d2      	mvns	r2, r2
 8000e52:	401a      	ands	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	697a      	ldr	r2, [r7, #20]
 8000e5e:	0052      	lsls	r2, r2, #1
 8000e60:	2103      	movs	r1, #3
 8000e62:	4091      	lsls	r1, r2
 8000e64:	000a      	movs	r2, r1
 8000e66:	43d2      	mvns	r2, r2
 8000e68:	401a      	ands	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	609a      	str	r2, [r3, #8]

    }

    position++;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	40da      	lsrs	r2, r3
 8000e7a:	1e13      	subs	r3, r2, #0
 8000e7c:	d000      	beq.n	8000e80 <HAL_GPIO_DeInit+0x180>
 8000e7e:	e747      	b.n	8000d10 <HAL_GPIO_DeInit+0x10>
  }
}
 8000e80:	46c0      	nop			; (mov r8, r8)
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b006      	add	sp, #24
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	40010000 	.word	0x40010000
 8000e90:	48000400 	.word	0x48000400
 8000e94:	48000800 	.word	0x48000800
 8000e98:	48000c00 	.word	0x48000c00
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	0008      	movs	r0, r1
 8000eaa:	0011      	movs	r1, r2
 8000eac:	1cbb      	adds	r3, r7, #2
 8000eae:	1c02      	adds	r2, r0, #0
 8000eb0:	801a      	strh	r2, [r3, #0]
 8000eb2:	1c7b      	adds	r3, r7, #1
 8000eb4:	1c0a      	adds	r2, r1, #0
 8000eb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eb8:	1c7b      	adds	r3, r7, #1
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d004      	beq.n	8000eca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ec0:	1cbb      	adds	r3, r7, #2
 8000ec2:	881a      	ldrh	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ec8:	e003      	b.n	8000ed2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eca:	1cbb      	adds	r3, r7, #2
 8000ecc:	881a      	ldrh	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
 8000ee2:	000a      	movs	r2, r1
 8000ee4:	1cbb      	adds	r3, r7, #2
 8000ee6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	695b      	ldr	r3, [r3, #20]
 8000eec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000eee:	1cbb      	adds	r3, r7, #2
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	041a      	lsls	r2, r3, #16
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	1cb9      	adds	r1, r7, #2
 8000efe:	8809      	ldrh	r1, [r1, #0]
 8000f00:	400b      	ands	r3, r1
 8000f02:	431a      	orrs	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	619a      	str	r2, [r3, #24]
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b004      	add	sp, #16
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d101      	bne.n	8000f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e301      	b.n	8001526 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2201      	movs	r2, #1
 8000f28:	4013      	ands	r3, r2
 8000f2a:	d100      	bne.n	8000f2e <HAL_RCC_OscConfig+0x1e>
 8000f2c:	e08d      	b.n	800104a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f2e:	4bc3      	ldr	r3, [pc, #780]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	220c      	movs	r2, #12
 8000f34:	4013      	ands	r3, r2
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	d00e      	beq.n	8000f58 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f3a:	4bc0      	ldr	r3, [pc, #768]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	220c      	movs	r2, #12
 8000f40:	4013      	ands	r3, r2
 8000f42:	2b08      	cmp	r3, #8
 8000f44:	d116      	bne.n	8000f74 <HAL_RCC_OscConfig+0x64>
 8000f46:	4bbd      	ldr	r3, [pc, #756]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	025b      	lsls	r3, r3, #9
 8000f4e:	401a      	ands	r2, r3
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	025b      	lsls	r3, r3, #9
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d10d      	bne.n	8000f74 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f58:	4bb8      	ldr	r3, [pc, #736]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	2380      	movs	r3, #128	; 0x80
 8000f5e:	029b      	lsls	r3, r3, #10
 8000f60:	4013      	ands	r3, r2
 8000f62:	d100      	bne.n	8000f66 <HAL_RCC_OscConfig+0x56>
 8000f64:	e070      	b.n	8001048 <HAL_RCC_OscConfig+0x138>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d000      	beq.n	8000f70 <HAL_RCC_OscConfig+0x60>
 8000f6e:	e06b      	b.n	8001048 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	e2d8      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d107      	bne.n	8000f8c <HAL_RCC_OscConfig+0x7c>
 8000f7c:	4baf      	ldr	r3, [pc, #700]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4bae      	ldr	r3, [pc, #696]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000f82:	2180      	movs	r1, #128	; 0x80
 8000f84:	0249      	lsls	r1, r1, #9
 8000f86:	430a      	orrs	r2, r1
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	e02f      	b.n	8000fec <HAL_RCC_OscConfig+0xdc>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d10c      	bne.n	8000fae <HAL_RCC_OscConfig+0x9e>
 8000f94:	4ba9      	ldr	r3, [pc, #676]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4ba8      	ldr	r3, [pc, #672]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000f9a:	49a9      	ldr	r1, [pc, #676]	; (8001240 <HAL_RCC_OscConfig+0x330>)
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	4ba6      	ldr	r3, [pc, #664]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4ba5      	ldr	r3, [pc, #660]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000fa6:	49a7      	ldr	r1, [pc, #668]	; (8001244 <HAL_RCC_OscConfig+0x334>)
 8000fa8:	400a      	ands	r2, r1
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	e01e      	b.n	8000fec <HAL_RCC_OscConfig+0xdc>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b05      	cmp	r3, #5
 8000fb4:	d10e      	bne.n	8000fd4 <HAL_RCC_OscConfig+0xc4>
 8000fb6:	4ba1      	ldr	r3, [pc, #644]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	4ba0      	ldr	r3, [pc, #640]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000fbc:	2180      	movs	r1, #128	; 0x80
 8000fbe:	02c9      	lsls	r1, r1, #11
 8000fc0:	430a      	orrs	r2, r1
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	4b9d      	ldr	r3, [pc, #628]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	4b9c      	ldr	r3, [pc, #624]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	0249      	lsls	r1, r1, #9
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	e00b      	b.n	8000fec <HAL_RCC_OscConfig+0xdc>
 8000fd4:	4b99      	ldr	r3, [pc, #612]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b98      	ldr	r3, [pc, #608]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000fda:	4999      	ldr	r1, [pc, #612]	; (8001240 <HAL_RCC_OscConfig+0x330>)
 8000fdc:	400a      	ands	r2, r1
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	4b96      	ldr	r3, [pc, #600]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	4b95      	ldr	r3, [pc, #596]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8000fe6:	4997      	ldr	r1, [pc, #604]	; (8001244 <HAL_RCC_OscConfig+0x334>)
 8000fe8:	400a      	ands	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d014      	beq.n	800101e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff4:	f7ff fbd6 	bl	80007a4 <HAL_GetTick>
 8000ff8:	0003      	movs	r3, r0
 8000ffa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ffe:	f7ff fbd1 	bl	80007a4 <HAL_GetTick>
 8001002:	0002      	movs	r2, r0
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b64      	cmp	r3, #100	; 0x64
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e28a      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001010:	4b8a      	ldr	r3, [pc, #552]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	029b      	lsls	r3, r3, #10
 8001018:	4013      	ands	r3, r2
 800101a:	d0f0      	beq.n	8000ffe <HAL_RCC_OscConfig+0xee>
 800101c:	e015      	b.n	800104a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101e:	f7ff fbc1 	bl	80007a4 <HAL_GetTick>
 8001022:	0003      	movs	r3, r0
 8001024:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001026:	e008      	b.n	800103a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001028:	f7ff fbbc 	bl	80007a4 <HAL_GetTick>
 800102c:	0002      	movs	r2, r0
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	2b64      	cmp	r3, #100	; 0x64
 8001034:	d901      	bls.n	800103a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001036:	2303      	movs	r3, #3
 8001038:	e275      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800103a:	4b80      	ldr	r3, [pc, #512]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	029b      	lsls	r3, r3, #10
 8001042:	4013      	ands	r3, r2
 8001044:	d1f0      	bne.n	8001028 <HAL_RCC_OscConfig+0x118>
 8001046:	e000      	b.n	800104a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001048:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2202      	movs	r2, #2
 8001050:	4013      	ands	r3, r2
 8001052:	d100      	bne.n	8001056 <HAL_RCC_OscConfig+0x146>
 8001054:	e069      	b.n	800112a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001056:	4b79      	ldr	r3, [pc, #484]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	220c      	movs	r2, #12
 800105c:	4013      	ands	r3, r2
 800105e:	d00b      	beq.n	8001078 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001060:	4b76      	ldr	r3, [pc, #472]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	220c      	movs	r2, #12
 8001066:	4013      	ands	r3, r2
 8001068:	2b08      	cmp	r3, #8
 800106a:	d11c      	bne.n	80010a6 <HAL_RCC_OscConfig+0x196>
 800106c:	4b73      	ldr	r3, [pc, #460]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	025b      	lsls	r3, r3, #9
 8001074:	4013      	ands	r3, r2
 8001076:	d116      	bne.n	80010a6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001078:	4b70      	ldr	r3, [pc, #448]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2202      	movs	r2, #2
 800107e:	4013      	ands	r3, r2
 8001080:	d005      	beq.n	800108e <HAL_RCC_OscConfig+0x17e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d001      	beq.n	800108e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e24b      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800108e:	4b6b      	ldr	r3, [pc, #428]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	22f8      	movs	r2, #248	; 0xf8
 8001094:	4393      	bics	r3, r2
 8001096:	0019      	movs	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	00da      	lsls	r2, r3, #3
 800109e:	4b67      	ldr	r3, [pc, #412]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 80010a0:	430a      	orrs	r2, r1
 80010a2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010a4:	e041      	b.n	800112a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d024      	beq.n	80010f8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ae:	4b63      	ldr	r3, [pc, #396]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	4b62      	ldr	r3, [pc, #392]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 80010b4:	2101      	movs	r1, #1
 80010b6:	430a      	orrs	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ba:	f7ff fb73 	bl	80007a4 <HAL_GetTick>
 80010be:	0003      	movs	r3, r0
 80010c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c4:	f7ff fb6e 	bl	80007a4 <HAL_GetTick>
 80010c8:	0002      	movs	r2, r0
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e227      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d6:	4b59      	ldr	r3, [pc, #356]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2202      	movs	r2, #2
 80010dc:	4013      	ands	r3, r2
 80010de:	d0f1      	beq.n	80010c4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e0:	4b56      	ldr	r3, [pc, #344]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	22f8      	movs	r2, #248	; 0xf8
 80010e6:	4393      	bics	r3, r2
 80010e8:	0019      	movs	r1, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	00da      	lsls	r2, r3, #3
 80010f0:	4b52      	ldr	r3, [pc, #328]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 80010f2:	430a      	orrs	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e018      	b.n	800112a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010f8:	4b50      	ldr	r3, [pc, #320]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b4f      	ldr	r3, [pc, #316]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 80010fe:	2101      	movs	r1, #1
 8001100:	438a      	bics	r2, r1
 8001102:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001104:	f7ff fb4e 	bl	80007a4 <HAL_GetTick>
 8001108:	0003      	movs	r3, r0
 800110a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fb49 	bl	80007a4 <HAL_GetTick>
 8001112:	0002      	movs	r2, r0
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e202      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001120:	4b46      	ldr	r3, [pc, #280]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2202      	movs	r2, #2
 8001126:	4013      	ands	r3, r2
 8001128:	d1f1      	bne.n	800110e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2208      	movs	r2, #8
 8001130:	4013      	ands	r3, r2
 8001132:	d036      	beq.n	80011a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	69db      	ldr	r3, [r3, #28]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d019      	beq.n	8001170 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800113c:	4b3f      	ldr	r3, [pc, #252]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 800113e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001140:	4b3e      	ldr	r3, [pc, #248]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8001142:	2101      	movs	r1, #1
 8001144:	430a      	orrs	r2, r1
 8001146:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001148:	f7ff fb2c 	bl	80007a4 <HAL_GetTick>
 800114c:	0003      	movs	r3, r0
 800114e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001150:	e008      	b.n	8001164 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001152:	f7ff fb27 	bl	80007a4 <HAL_GetTick>
 8001156:	0002      	movs	r2, r0
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d901      	bls.n	8001164 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e1e0      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001164:	4b35      	ldr	r3, [pc, #212]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	2202      	movs	r2, #2
 800116a:	4013      	ands	r3, r2
 800116c:	d0f1      	beq.n	8001152 <HAL_RCC_OscConfig+0x242>
 800116e:	e018      	b.n	80011a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001170:	4b32      	ldr	r3, [pc, #200]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8001172:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001174:	4b31      	ldr	r3, [pc, #196]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8001176:	2101      	movs	r1, #1
 8001178:	438a      	bics	r2, r1
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117c:	f7ff fb12 	bl	80007a4 <HAL_GetTick>
 8001180:	0003      	movs	r3, r0
 8001182:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001186:	f7ff fb0d 	bl	80007a4 <HAL_GetTick>
 800118a:	0002      	movs	r2, r0
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e1c6      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001198:	4b28      	ldr	r3, [pc, #160]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	2202      	movs	r2, #2
 800119e:	4013      	ands	r3, r2
 80011a0:	d1f1      	bne.n	8001186 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	2204      	movs	r2, #4
 80011a8:	4013      	ands	r3, r2
 80011aa:	d100      	bne.n	80011ae <HAL_RCC_OscConfig+0x29e>
 80011ac:	e0b4      	b.n	8001318 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ae:	201f      	movs	r0, #31
 80011b0:	183b      	adds	r3, r7, r0
 80011b2:	2200      	movs	r2, #0
 80011b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 80011b8:	69da      	ldr	r2, [r3, #28]
 80011ba:	2380      	movs	r3, #128	; 0x80
 80011bc:	055b      	lsls	r3, r3, #21
 80011be:	4013      	ands	r3, r2
 80011c0:	d110      	bne.n	80011e4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 80011c4:	69da      	ldr	r2, [r3, #28]
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 80011c8:	2180      	movs	r1, #128	; 0x80
 80011ca:	0549      	lsls	r1, r1, #21
 80011cc:	430a      	orrs	r2, r1
 80011ce:	61da      	str	r2, [r3, #28]
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 80011d2:	69da      	ldr	r2, [r3, #28]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	055b      	lsls	r3, r3, #21
 80011d8:	4013      	ands	r3, r2
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80011de:	183b      	adds	r3, r7, r0
 80011e0:	2201      	movs	r2, #1
 80011e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e4:	4b18      	ldr	r3, [pc, #96]	; (8001248 <HAL_RCC_OscConfig+0x338>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2380      	movs	r3, #128	; 0x80
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	4013      	ands	r3, r2
 80011ee:	d11a      	bne.n	8001226 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <HAL_RCC_OscConfig+0x338>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <HAL_RCC_OscConfig+0x338>)
 80011f6:	2180      	movs	r1, #128	; 0x80
 80011f8:	0049      	lsls	r1, r1, #1
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fad1 	bl	80007a4 <HAL_GetTick>
 8001202:	0003      	movs	r3, r0
 8001204:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001206:	e008      	b.n	800121a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001208:	f7ff facc 	bl	80007a4 <HAL_GetTick>
 800120c:	0002      	movs	r2, r0
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2b64      	cmp	r3, #100	; 0x64
 8001214:	d901      	bls.n	800121a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001216:	2303      	movs	r3, #3
 8001218:	e185      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_RCC_OscConfig+0x338>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	2380      	movs	r3, #128	; 0x80
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4013      	ands	r3, r2
 8001224:	d0f0      	beq.n	8001208 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10e      	bne.n	800124c <HAL_RCC_OscConfig+0x33c>
 800122e:	4b03      	ldr	r3, [pc, #12]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8001230:	6a1a      	ldr	r2, [r3, #32]
 8001232:	4b02      	ldr	r3, [pc, #8]	; (800123c <HAL_RCC_OscConfig+0x32c>)
 8001234:	2101      	movs	r1, #1
 8001236:	430a      	orrs	r2, r1
 8001238:	621a      	str	r2, [r3, #32]
 800123a:	e035      	b.n	80012a8 <HAL_RCC_OscConfig+0x398>
 800123c:	40021000 	.word	0x40021000
 8001240:	fffeffff 	.word	0xfffeffff
 8001244:	fffbffff 	.word	0xfffbffff
 8001248:	40007000 	.word	0x40007000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d10c      	bne.n	800126e <HAL_RCC_OscConfig+0x35e>
 8001254:	4bb6      	ldr	r3, [pc, #728]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001256:	6a1a      	ldr	r2, [r3, #32]
 8001258:	4bb5      	ldr	r3, [pc, #724]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800125a:	2101      	movs	r1, #1
 800125c:	438a      	bics	r2, r1
 800125e:	621a      	str	r2, [r3, #32]
 8001260:	4bb3      	ldr	r3, [pc, #716]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001262:	6a1a      	ldr	r2, [r3, #32]
 8001264:	4bb2      	ldr	r3, [pc, #712]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001266:	2104      	movs	r1, #4
 8001268:	438a      	bics	r2, r1
 800126a:	621a      	str	r2, [r3, #32]
 800126c:	e01c      	b.n	80012a8 <HAL_RCC_OscConfig+0x398>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b05      	cmp	r3, #5
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0x380>
 8001276:	4bae      	ldr	r3, [pc, #696]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001278:	6a1a      	ldr	r2, [r3, #32]
 800127a:	4bad      	ldr	r3, [pc, #692]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800127c:	2104      	movs	r1, #4
 800127e:	430a      	orrs	r2, r1
 8001280:	621a      	str	r2, [r3, #32]
 8001282:	4bab      	ldr	r3, [pc, #684]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001284:	6a1a      	ldr	r2, [r3, #32]
 8001286:	4baa      	ldr	r3, [pc, #680]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001288:	2101      	movs	r1, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	621a      	str	r2, [r3, #32]
 800128e:	e00b      	b.n	80012a8 <HAL_RCC_OscConfig+0x398>
 8001290:	4ba7      	ldr	r3, [pc, #668]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001292:	6a1a      	ldr	r2, [r3, #32]
 8001294:	4ba6      	ldr	r3, [pc, #664]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001296:	2101      	movs	r1, #1
 8001298:	438a      	bics	r2, r1
 800129a:	621a      	str	r2, [r3, #32]
 800129c:	4ba4      	ldr	r3, [pc, #656]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800129e:	6a1a      	ldr	r2, [r3, #32]
 80012a0:	4ba3      	ldr	r3, [pc, #652]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80012a2:	2104      	movs	r1, #4
 80012a4:	438a      	bics	r2, r1
 80012a6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d014      	beq.n	80012da <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b0:	f7ff fa78 	bl	80007a4 <HAL_GetTick>
 80012b4:	0003      	movs	r3, r0
 80012b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b8:	e009      	b.n	80012ce <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f7ff fa73 	bl	80007a4 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	4a9b      	ldr	r2, [pc, #620]	; (8001534 <HAL_RCC_OscConfig+0x624>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e12b      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ce:	4b98      	ldr	r3, [pc, #608]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	2202      	movs	r2, #2
 80012d4:	4013      	ands	r3, r2
 80012d6:	d0f0      	beq.n	80012ba <HAL_RCC_OscConfig+0x3aa>
 80012d8:	e013      	b.n	8001302 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012da:	f7ff fa63 	bl	80007a4 <HAL_GetTick>
 80012de:	0003      	movs	r3, r0
 80012e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e2:	e009      	b.n	80012f8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012e4:	f7ff fa5e 	bl	80007a4 <HAL_GetTick>
 80012e8:	0002      	movs	r2, r0
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	4a91      	ldr	r2, [pc, #580]	; (8001534 <HAL_RCC_OscConfig+0x624>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e116      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f8:	4b8d      	ldr	r3, [pc, #564]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	2202      	movs	r2, #2
 80012fe:	4013      	ands	r3, r2
 8001300:	d1f0      	bne.n	80012e4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001302:	231f      	movs	r3, #31
 8001304:	18fb      	adds	r3, r7, r3
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d105      	bne.n	8001318 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800130c:	4b88      	ldr	r3, [pc, #544]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800130e:	69da      	ldr	r2, [r3, #28]
 8001310:	4b87      	ldr	r3, [pc, #540]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001312:	4989      	ldr	r1, [pc, #548]	; (8001538 <HAL_RCC_OscConfig+0x628>)
 8001314:	400a      	ands	r2, r1
 8001316:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2210      	movs	r2, #16
 800131e:	4013      	ands	r3, r2
 8001320:	d063      	beq.n	80013ea <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d12a      	bne.n	8001380 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800132a:	4b81      	ldr	r3, [pc, #516]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800132c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800132e:	4b80      	ldr	r3, [pc, #512]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001330:	2104      	movs	r1, #4
 8001332:	430a      	orrs	r2, r1
 8001334:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001336:	4b7e      	ldr	r3, [pc, #504]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800133a:	4b7d      	ldr	r3, [pc, #500]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800133c:	2101      	movs	r1, #1
 800133e:	430a      	orrs	r2, r1
 8001340:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001342:	f7ff fa2f 	bl	80007a4 <HAL_GetTick>
 8001346:	0003      	movs	r3, r0
 8001348:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800134c:	f7ff fa2a 	bl	80007a4 <HAL_GetTick>
 8001350:	0002      	movs	r2, r0
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e0e3      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800135e:	4b74      	ldr	r3, [pc, #464]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	2202      	movs	r2, #2
 8001364:	4013      	ands	r3, r2
 8001366:	d0f1      	beq.n	800134c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001368:	4b71      	ldr	r3, [pc, #452]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800136a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136c:	22f8      	movs	r2, #248	; 0xf8
 800136e:	4393      	bics	r3, r2
 8001370:	0019      	movs	r1, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	00da      	lsls	r2, r3, #3
 8001378:	4b6d      	ldr	r3, [pc, #436]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800137a:	430a      	orrs	r2, r1
 800137c:	635a      	str	r2, [r3, #52]	; 0x34
 800137e:	e034      	b.n	80013ea <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	3305      	adds	r3, #5
 8001386:	d111      	bne.n	80013ac <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001388:	4b69      	ldr	r3, [pc, #420]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800138a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800138c:	4b68      	ldr	r3, [pc, #416]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800138e:	2104      	movs	r1, #4
 8001390:	438a      	bics	r2, r1
 8001392:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001394:	4b66      	ldr	r3, [pc, #408]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001398:	22f8      	movs	r2, #248	; 0xf8
 800139a:	4393      	bics	r3, r2
 800139c:	0019      	movs	r1, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	00da      	lsls	r2, r3, #3
 80013a4:	4b62      	ldr	r3, [pc, #392]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80013a6:	430a      	orrs	r2, r1
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
 80013aa:	e01e      	b.n	80013ea <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013ac:	4b60      	ldr	r3, [pc, #384]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80013ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013b0:	4b5f      	ldr	r3, [pc, #380]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80013b2:	2104      	movs	r1, #4
 80013b4:	430a      	orrs	r2, r1
 80013b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80013b8:	4b5d      	ldr	r3, [pc, #372]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80013ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013bc:	4b5c      	ldr	r3, [pc, #368]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80013be:	2101      	movs	r1, #1
 80013c0:	438a      	bics	r2, r1
 80013c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff f9ee 	bl	80007a4 <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013ce:	f7ff f9e9 	bl	80007a4 <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e0a2      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80013e0:	4b53      	ldr	r3, [pc, #332]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80013e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013e4:	2202      	movs	r2, #2
 80013e6:	4013      	ands	r3, r2
 80013e8:	d1f1      	bne.n	80013ce <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d100      	bne.n	80013f4 <HAL_RCC_OscConfig+0x4e4>
 80013f2:	e097      	b.n	8001524 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f4:	4b4e      	ldr	r3, [pc, #312]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	220c      	movs	r2, #12
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d100      	bne.n	8001402 <HAL_RCC_OscConfig+0x4f2>
 8001400:	e06b      	b.n	80014da <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d14c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800140a:	4b49      	ldr	r3, [pc, #292]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	4b48      	ldr	r3, [pc, #288]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001410:	494a      	ldr	r1, [pc, #296]	; (800153c <HAL_RCC_OscConfig+0x62c>)
 8001412:	400a      	ands	r2, r1
 8001414:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff f9c5 	bl	80007a4 <HAL_GetTick>
 800141a:	0003      	movs	r3, r0
 800141c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff f9c0 	bl	80007a4 <HAL_GetTick>
 8001424:	0002      	movs	r2, r0
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e079      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001432:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	049b      	lsls	r3, r3, #18
 800143a:	4013      	ands	r3, r2
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143e:	4b3c      	ldr	r3, [pc, #240]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001442:	220f      	movs	r2, #15
 8001444:	4393      	bics	r3, r2
 8001446:	0019      	movs	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800144c:	4b38      	ldr	r3, [pc, #224]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800144e:	430a      	orrs	r2, r1
 8001450:	62da      	str	r2, [r3, #44]	; 0x2c
 8001452:	4b37      	ldr	r3, [pc, #220]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	4a3a      	ldr	r2, [pc, #232]	; (8001540 <HAL_RCC_OscConfig+0x630>)
 8001458:	4013      	ands	r3, r2
 800145a:	0019      	movs	r1, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	431a      	orrs	r2, r3
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001468:	430a      	orrs	r2, r1
 800146a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800146c:	4b30      	ldr	r3, [pc, #192]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	0449      	lsls	r1, r1, #17
 8001476:	430a      	orrs	r2, r1
 8001478:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff f993 	bl	80007a4 <HAL_GetTick>
 800147e:	0003      	movs	r3, r0
 8001480:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001484:	f7ff f98e 	bl	80007a4 <HAL_GetTick>
 8001488:	0002      	movs	r2, r0
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e047      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	2380      	movs	r3, #128	; 0x80
 800149c:	049b      	lsls	r3, r3, #18
 800149e:	4013      	ands	r3, r2
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x574>
 80014a2:	e03f      	b.n	8001524 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b21      	ldr	r3, [pc, #132]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80014aa:	4924      	ldr	r1, [pc, #144]	; (800153c <HAL_RCC_OscConfig+0x62c>)
 80014ac:	400a      	ands	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff f978 	bl	80007a4 <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ba:	f7ff f973 	bl	80007a4 <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e02c      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014cc:	4b18      	ldr	r3, [pc, #96]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	049b      	lsls	r3, r3, #18
 80014d4:	4013      	ands	r3, r2
 80014d6:	d1f0      	bne.n	80014ba <HAL_RCC_OscConfig+0x5aa>
 80014d8:	e024      	b.n	8001524 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e01f      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_RCC_OscConfig+0x620>)
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	025b      	lsls	r3, r3, #9
 80014f8:	401a      	ands	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fe:	429a      	cmp	r2, r3
 8001500:	d10e      	bne.n	8001520 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	220f      	movs	r2, #15
 8001506:	401a      	ands	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800150c:	429a      	cmp	r2, r3
 800150e:	d107      	bne.n	8001520 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	23f0      	movs	r3, #240	; 0xf0
 8001514:	039b      	lsls	r3, r3, #14
 8001516:	401a      	ands	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d001      	beq.n	8001524 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	0018      	movs	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	b008      	add	sp, #32
 800152c:	bd80      	pop	{r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	40021000 	.word	0x40021000
 8001534:	00001388 	.word	0x00001388
 8001538:	efffffff 	.word	0xefffffff
 800153c:	feffffff 	.word	0xfeffffff
 8001540:	ffc2ffff 	.word	0xffc2ffff

08001544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e0b3      	b.n	80016c0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001558:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <HAL_RCC_ClockConfig+0x184>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2201      	movs	r2, #1
 800155e:	4013      	ands	r3, r2
 8001560:	683a      	ldr	r2, [r7, #0]
 8001562:	429a      	cmp	r2, r3
 8001564:	d911      	bls.n	800158a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001566:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <HAL_RCC_ClockConfig+0x184>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2201      	movs	r2, #1
 800156c:	4393      	bics	r3, r2
 800156e:	0019      	movs	r1, r3
 8001570:	4b55      	ldr	r3, [pc, #340]	; (80016c8 <HAL_RCC_ClockConfig+0x184>)
 8001572:	683a      	ldr	r2, [r7, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001578:	4b53      	ldr	r3, [pc, #332]	; (80016c8 <HAL_RCC_ClockConfig+0x184>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2201      	movs	r2, #1
 800157e:	4013      	ands	r3, r2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	429a      	cmp	r2, r3
 8001584:	d001      	beq.n	800158a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e09a      	b.n	80016c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2202      	movs	r2, #2
 8001590:	4013      	ands	r3, r2
 8001592:	d015      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2204      	movs	r2, #4
 800159a:	4013      	ands	r3, r2
 800159c:	d006      	beq.n	80015ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800159e:	4b4b      	ldr	r3, [pc, #300]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4b4a      	ldr	r3, [pc, #296]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 80015a4:	21e0      	movs	r1, #224	; 0xe0
 80015a6:	00c9      	lsls	r1, r1, #3
 80015a8:	430a      	orrs	r2, r1
 80015aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ac:	4b47      	ldr	r3, [pc, #284]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	22f0      	movs	r2, #240	; 0xf0
 80015b2:	4393      	bics	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	4b44      	ldr	r3, [pc, #272]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 80015bc:	430a      	orrs	r2, r1
 80015be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2201      	movs	r2, #1
 80015c6:	4013      	ands	r3, r2
 80015c8:	d040      	beq.n	800164c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d107      	bne.n	80015e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b3e      	ldr	r3, [pc, #248]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	2380      	movs	r3, #128	; 0x80
 80015d8:	029b      	lsls	r3, r3, #10
 80015da:	4013      	ands	r3, r2
 80015dc:	d114      	bne.n	8001608 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e06e      	b.n	80016c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d107      	bne.n	80015fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ea:	4b38      	ldr	r3, [pc, #224]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	049b      	lsls	r3, r3, #18
 80015f2:	4013      	ands	r3, r2
 80015f4:	d108      	bne.n	8001608 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e062      	b.n	80016c0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015fa:	4b34      	ldr	r3, [pc, #208]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2202      	movs	r2, #2
 8001600:	4013      	ands	r3, r2
 8001602:	d101      	bne.n	8001608 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e05b      	b.n	80016c0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2203      	movs	r2, #3
 800160e:	4393      	bics	r3, r2
 8001610:	0019      	movs	r1, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 8001618:	430a      	orrs	r2, r1
 800161a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800161c:	f7ff f8c2 	bl	80007a4 <HAL_GetTick>
 8001620:	0003      	movs	r3, r0
 8001622:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001624:	e009      	b.n	800163a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001626:	f7ff f8bd 	bl	80007a4 <HAL_GetTick>
 800162a:	0002      	movs	r2, r0
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	1ad3      	subs	r3, r2, r3
 8001630:	4a27      	ldr	r2, [pc, #156]	; (80016d0 <HAL_RCC_ClockConfig+0x18c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d901      	bls.n	800163a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e042      	b.n	80016c0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800163a:	4b24      	ldr	r3, [pc, #144]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	220c      	movs	r2, #12
 8001640:	401a      	ands	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	429a      	cmp	r2, r3
 800164a:	d1ec      	bne.n	8001626 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800164c:	4b1e      	ldr	r3, [pc, #120]	; (80016c8 <HAL_RCC_ClockConfig+0x184>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2201      	movs	r2, #1
 8001652:	4013      	ands	r3, r2
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	429a      	cmp	r2, r3
 8001658:	d211      	bcs.n	800167e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <HAL_RCC_ClockConfig+0x184>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2201      	movs	r2, #1
 8001660:	4393      	bics	r3, r2
 8001662:	0019      	movs	r1, r3
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <HAL_RCC_ClockConfig+0x184>)
 8001666:	683a      	ldr	r2, [r7, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <HAL_RCC_ClockConfig+0x184>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	2201      	movs	r2, #1
 8001672:	4013      	ands	r3, r2
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d001      	beq.n	800167e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e020      	b.n	80016c0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2204      	movs	r2, #4
 8001684:	4013      	ands	r3, r2
 8001686:	d009      	beq.n	800169c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	4a11      	ldr	r2, [pc, #68]	; (80016d4 <HAL_RCC_ClockConfig+0x190>)
 800168e:	4013      	ands	r3, r2
 8001690:	0019      	movs	r1, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68da      	ldr	r2, [r3, #12]
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 8001698:	430a      	orrs	r2, r1
 800169a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800169c:	f000 f820 	bl	80016e0 <HAL_RCC_GetSysClockFreq>
 80016a0:	0001      	movs	r1, r0
 80016a2:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <HAL_RCC_ClockConfig+0x188>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	220f      	movs	r2, #15
 80016aa:	4013      	ands	r3, r2
 80016ac:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <HAL_RCC_ClockConfig+0x194>)
 80016ae:	5cd3      	ldrb	r3, [r2, r3]
 80016b0:	000a      	movs	r2, r1
 80016b2:	40da      	lsrs	r2, r3
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_ClockConfig+0x198>)
 80016b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f7ff f82d 	bl	8000718 <HAL_InitTick>
  
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b004      	add	sp, #16
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40022000 	.word	0x40022000
 80016cc:	40021000 	.word	0x40021000
 80016d0:	00001388 	.word	0x00001388
 80016d4:	fffff8ff 	.word	0xfffff8ff
 80016d8:	08003f54 	.word	0x08003f54
 80016dc:	20000000 	.word	0x20000000

080016e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <HAL_RCC_GetSysClockFreq+0x9c>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	220c      	movs	r2, #12
 8001704:	4013      	ands	r3, r2
 8001706:	2b04      	cmp	r3, #4
 8001708:	d002      	beq.n	8001710 <HAL_RCC_GetSysClockFreq+0x30>
 800170a:	2b08      	cmp	r3, #8
 800170c:	d003      	beq.n	8001716 <HAL_RCC_GetSysClockFreq+0x36>
 800170e:	e02c      	b.n	800176a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001710:	4b1b      	ldr	r3, [pc, #108]	; (8001780 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001712:	613b      	str	r3, [r7, #16]
      break;
 8001714:	e02c      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	0c9b      	lsrs	r3, r3, #18
 800171a:	220f      	movs	r2, #15
 800171c:	4013      	ands	r3, r2
 800171e:	4a19      	ldr	r2, [pc, #100]	; (8001784 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001720:	5cd3      	ldrb	r3, [r2, r3]
 8001722:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001728:	220f      	movs	r2, #15
 800172a:	4013      	ands	r3, r2
 800172c:	4a16      	ldr	r2, [pc, #88]	; (8001788 <HAL_RCC_GetSysClockFreq+0xa8>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	2380      	movs	r3, #128	; 0x80
 8001736:	025b      	lsls	r3, r3, #9
 8001738:	4013      	ands	r3, r2
 800173a:	d009      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800173c:	68b9      	ldr	r1, [r7, #8]
 800173e:	4810      	ldr	r0, [pc, #64]	; (8001780 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001740:	f7fe fce2 	bl	8000108 <__udivsi3>
 8001744:	0003      	movs	r3, r0
 8001746:	001a      	movs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	4353      	muls	r3, r2
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e009      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	000a      	movs	r2, r1
 8001754:	0152      	lsls	r2, r2, #5
 8001756:	1a52      	subs	r2, r2, r1
 8001758:	0193      	lsls	r3, r2, #6
 800175a:	1a9b      	subs	r3, r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	185b      	adds	r3, r3, r1
 8001760:	021b      	lsls	r3, r3, #8
 8001762:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	613b      	str	r3, [r7, #16]
      break;
 8001768:	e002      	b.n	8001770 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800176a:	4b05      	ldr	r3, [pc, #20]	; (8001780 <HAL_RCC_GetSysClockFreq+0xa0>)
 800176c:	613b      	str	r3, [r7, #16]
      break;
 800176e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001770:	693b      	ldr	r3, [r7, #16]
}
 8001772:	0018      	movs	r0, r3
 8001774:	46bd      	mov	sp, r7
 8001776:	b006      	add	sp, #24
 8001778:	bd80      	pop	{r7, pc}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	40021000 	.word	0x40021000
 8001780:	007a1200 	.word	0x007a1200
 8001784:	08003f64 	.word	0x08003f64
 8001788:	08003f74 	.word	0x08003f74

0800178c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	; 0x80
 80017a2:	025b      	lsls	r3, r3, #9
 80017a4:	4013      	ands	r3, r2
 80017a6:	d100      	bne.n	80017aa <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80017a8:	e08e      	b.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80017aa:	2017      	movs	r0, #23
 80017ac:	183b      	adds	r3, r7, r0
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017b2:	4b57      	ldr	r3, [pc, #348]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017b4:	69da      	ldr	r2, [r3, #28]
 80017b6:	2380      	movs	r3, #128	; 0x80
 80017b8:	055b      	lsls	r3, r3, #21
 80017ba:	4013      	ands	r3, r2
 80017bc:	d110      	bne.n	80017e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80017be:	4b54      	ldr	r3, [pc, #336]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017c0:	69da      	ldr	r2, [r3, #28]
 80017c2:	4b53      	ldr	r3, [pc, #332]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017c4:	2180      	movs	r1, #128	; 0x80
 80017c6:	0549      	lsls	r1, r1, #21
 80017c8:	430a      	orrs	r2, r1
 80017ca:	61da      	str	r2, [r3, #28]
 80017cc:	4b50      	ldr	r3, [pc, #320]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80017ce:	69da      	ldr	r2, [r3, #28]
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	055b      	lsls	r3, r3, #21
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017da:	183b      	adds	r3, r7, r0
 80017dc:	2201      	movs	r2, #1
 80017de:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	4b4c      	ldr	r3, [pc, #304]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	2380      	movs	r3, #128	; 0x80
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4013      	ands	r3, r2
 80017ea:	d11a      	bne.n	8001822 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ec:	4b49      	ldr	r3, [pc, #292]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b48      	ldr	r3, [pc, #288]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	0049      	lsls	r1, r1, #1
 80017f6:	430a      	orrs	r2, r1
 80017f8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fa:	f7fe ffd3 	bl	80007a4 <HAL_GetTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001802:	e008      	b.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001804:	f7fe ffce 	bl	80007a4 <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e077      	b.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001816:	4b3f      	ldr	r3, [pc, #252]	; (8001914 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4013      	ands	r3, r2
 8001820:	d0f0      	beq.n	8001804 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001822:	4b3b      	ldr	r3, [pc, #236]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001824:	6a1a      	ldr	r2, [r3, #32]
 8001826:	23c0      	movs	r3, #192	; 0xc0
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4013      	ands	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d034      	beq.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	23c0      	movs	r3, #192	; 0xc0
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4013      	ands	r3, r2
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	429a      	cmp	r2, r3
 8001842:	d02c      	beq.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001844:	4b32      	ldr	r3, [pc, #200]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a33      	ldr	r2, [pc, #204]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800184a:	4013      	ands	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800184e:	4b30      	ldr	r3, [pc, #192]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001850:	6a1a      	ldr	r2, [r3, #32]
 8001852:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001854:	2180      	movs	r1, #128	; 0x80
 8001856:	0249      	lsls	r1, r1, #9
 8001858:	430a      	orrs	r2, r1
 800185a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800185e:	6a1a      	ldr	r2, [r3, #32]
 8001860:	4b2b      	ldr	r3, [pc, #172]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001862:	492e      	ldr	r1, [pc, #184]	; (800191c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001864:	400a      	ands	r2, r1
 8001866:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2201      	movs	r2, #1
 8001872:	4013      	ands	r3, r2
 8001874:	d013      	beq.n	800189e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7fe ff95 	bl	80007a4 <HAL_GetTick>
 800187a:	0003      	movs	r3, r0
 800187c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187e:	e009      	b.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7fe ff90 	bl	80007a4 <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	4a25      	ldr	r2, [pc, #148]	; (8001920 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e038      	b.n	8001906 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	4b1e      	ldr	r3, [pc, #120]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	2202      	movs	r2, #2
 800189a:	4013      	ands	r3, r2
 800189c:	d0f0      	beq.n	8001880 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4a1d      	ldr	r2, [pc, #116]	; (8001918 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	4b18      	ldr	r3, [pc, #96]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018b2:	2317      	movs	r3, #23
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d105      	bne.n	80018c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018bc:	4b14      	ldr	r3, [pc, #80]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018be:	69da      	ldr	r2, [r3, #28]
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018c2:	4918      	ldr	r1, [pc, #96]	; (8001924 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80018c4:	400a      	ands	r2, r1
 80018c6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2201      	movs	r2, #1
 80018ce:	4013      	ands	r3, r2
 80018d0:	d009      	beq.n	80018e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80018d2:	4b0f      	ldr	r3, [pc, #60]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	2203      	movs	r2, #3
 80018d8:	4393      	bics	r3, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2220      	movs	r2, #32
 80018ec:	4013      	ands	r3, r2
 80018ee:	d009      	beq.n	8001904 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	2210      	movs	r2, #16
 80018f6:	4393      	bics	r3, r2
 80018f8:	0019      	movs	r1, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001900:	430a      	orrs	r2, r1
 8001902:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b006      	add	sp, #24
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	40021000 	.word	0x40021000
 8001914:	40007000 	.word	0x40007000
 8001918:	fffffcff 	.word	0xfffffcff
 800191c:	fffeffff 	.word	0xfffeffff
 8001920:	00001388 	.word	0x00001388
 8001924:	efffffff 	.word	0xefffffff

08001928 <HAL_SMBUS_Init>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Init(SMBUS_HandleTypeDef *hsmbus)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_SMBUS_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e0ae      	b.n	8001a98 <HAL_SMBUS_Init+0x170>
  assert_param(IS_SMBUS_GENERAL_CALL(hsmbus->Init.GeneralCallMode));
  assert_param(IS_SMBUS_NO_STRETCH(hsmbus->Init.NoStretchMode));
  assert_param(IS_SMBUS_PEC(hsmbus->Init.PacketErrorCheckMode));
  assert_param(IS_SMBUS_PERIPHERAL_MODE(hsmbus->Init.PeripheralMode));

  if (hsmbus->State == HAL_SMBUS_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193e:	2b00      	cmp	r3, #0
 8001940:	d107      	bne.n	8001952 <HAL_SMBUS_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsmbus->Lock = HAL_UNLOCKED;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2244      	movs	r2, #68	; 0x44
 8001946:	2100      	movs	r1, #0
 8001948:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hsmbus->MspInitCallback(hsmbus);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_SMBUS_MspInit(hsmbus);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	0018      	movs	r0, r3
 800194e:	f7fe fded 	bl	800052c <HAL_SMBUS_MspInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2202      	movs	r2, #2
 8001956:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the selected SMBUS peripheral */
  __HAL_SMBUS_DISABLE(hsmbus);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	2101      	movs	r1, #1
 8001964:	438a      	bics	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

  /*---------------------------- SMBUSx TIMINGR Configuration ------------------------*/
  /* Configure SMBUSx: Frequency range */
  hsmbus->Instance->TIMINGR = hsmbus->Init.Timing & TIMING_CLEAR_MASK;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685a      	ldr	r2, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	494b      	ldr	r1, [pc, #300]	; (8001aa0 <HAL_SMBUS_Init+0x178>)
 8001972:	400a      	ands	r2, r1
 8001974:	611a      	str	r2, [r3, #16]

  /*---------------------------- SMBUSx TIMEOUTR Configuration ------------------------*/
  /* Configure SMBUSx: Bus Timeout  */
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TIMOUTEN;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	695a      	ldr	r2, [r3, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4948      	ldr	r1, [pc, #288]	; (8001aa4 <HAL_SMBUS_Init+0x17c>)
 8001982:	400a      	ands	r2, r1
 8001984:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR &= ~I2C_TIMEOUTR_TEXTEN;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	695a      	ldr	r2, [r3, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0052      	lsls	r2, r2, #1
 8001992:	0852      	lsrs	r2, r2, #1
 8001994:	615a      	str	r2, [r3, #20]
  hsmbus->Instance->TIMEOUTR = hsmbus->Init.SMBusTimeout;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800199e:	615a      	str	r2, [r3, #20]

  /*---------------------------- SMBUSx OAR1 Configuration -----------------------*/
  /* Configure SMBUSx: Own Address1 and ack own address1 mode */
  hsmbus->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	493e      	ldr	r1, [pc, #248]	; (8001aa4 <HAL_SMBUS_Init+0x17c>)
 80019ac:	400a      	ands	r2, r1
 80019ae:	609a      	str	r2, [r3, #8]

  if (hsmbus->Init.OwnAddress1 != 0UL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d014      	beq.n	80019e2 <HAL_SMBUS_Init+0xba>
  {
    if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_SMBUS_Init+0xaa>
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | hsmbus->Init.OwnAddress1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	0209      	lsls	r1, r1, #8
 80019cc:	430a      	orrs	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	e007      	b.n	80019e2 <HAL_SMBUS_Init+0xba>
    }
    else /* SMBUS_ADDRESSINGMODE_10BIT */
    {
      hsmbus->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hsmbus->Init.OwnAddress1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2184      	movs	r1, #132	; 0x84
 80019dc:	0209      	lsls	r1, r1, #8
 80019de:	430a      	orrs	r2, r1
 80019e0:	609a      	str	r2, [r3, #8]
    }
  }

  /*---------------------------- SMBUSx CR2 Configuration ------------------------*/
  /* Configure SMBUSx: Addressing Master mode */
  if (hsmbus->Init.AddressingMode == SMBUS_ADDRESSINGMODE_10BIT)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d104      	bne.n	80019f4 <HAL_SMBUS_Init+0xcc>
  {
    hsmbus->Instance->CR2 = (I2C_CR2_ADD10);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	2280      	movs	r2, #128	; 0x80
 80019f0:	0112      	lsls	r2, r2, #4
 80019f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process) */
  /* AUTOEND and NACK bit will be manage during Transfer process */
  hsmbus->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	492a      	ldr	r1, [pc, #168]	; (8001aa8 <HAL_SMBUS_Init+0x180>)
 8001a00:	430a      	orrs	r2, r1
 8001a02:	605a      	str	r2, [r3, #4]

  /*---------------------------- SMBUSx OAR2 Configuration -----------------------*/
  /* Configure SMBUSx: Dual mode and Own Address2 */
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695a      	ldr	r2, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	0011      	movs	r1, r2
                            (hsmbus->Init.OwnAddress2Masks << 8U));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	021a      	lsls	r2, r3, #8
  hsmbus->Instance->OAR2 = (hsmbus->Init.DualAddressMode | hsmbus->Init.OwnAddress2 | \
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	60da      	str	r2, [r3, #12]

  /*---------------------------- SMBUSx CR1 Configuration ------------------------*/
  /* Configure SMBUSx: Generalcall and NoStretch mode */
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a1a      	ldr	r2, [r3, #32]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8001a2c:	431a      	orrs	r2, r3
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a32:	431a      	orrs	r2, r3
 8001a34:	0011      	movs	r1, r2
                           hsmbus->Init.AnalogFilter);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	689a      	ldr	r2, [r3, #8]
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
                           hsmbus->Init.PacketErrorCheckMode | hsmbus->Init.PeripheralMode | \
 8001a3e:	430a      	orrs	r2, r1
  hsmbus->Instance->CR1 = (hsmbus->Init.GeneralCallMode | hsmbus->Init.NoStretchMode | \
 8001a40:	601a      	str	r2, [r3, #0]

  /* Enable Slave Byte Control only in case of Packet Error Check is enabled
     and SMBUS Peripheral is set in Slave mode */
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a46:	2380      	movs	r3, #128	; 0x80
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d112      	bne.n	8001a74 <HAL_SMBUS_Init+0x14c>
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if ((hsmbus->Init.PacketErrorCheckMode == SMBUS_PEC_ENABLE) && \
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_SMBUS_Init+0x13a>
       (hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP)))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
      ((hsmbus->Init.PeripheralMode == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE) || \
 8001a5a:	2380      	movs	r3, #128	; 0x80
 8001a5c:	039b      	lsls	r3, r3, #14
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d108      	bne.n	8001a74 <HAL_SMBUS_Init+0x14c>
  {
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2180      	movs	r1, #128	; 0x80
 8001a6e:	0249      	lsls	r1, r1, #9
 8001a70:	430a      	orrs	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
  }

  /* Enable the selected SMBUS peripheral */
  __HAL_SMBUS_ENABLE(hsmbus);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2101      	movs	r1, #1
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_READY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	649a      	str	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	0018      	movs	r0, r3
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	b002      	add	sp, #8
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	f0ffffff 	.word	0xf0ffffff
 8001aa4:	ffff7fff 	.word	0xffff7fff
 8001aa8:	02008000 	.word	0x02008000

08001aac <HAL_SMBUS_DeInit>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_DeInit(SMBUS_HandleTypeDef *hsmbus)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  /* Check the SMBUS handle allocation */
  if (hsmbus == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_SMBUS_DeInit+0x12>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e01c      	b.n	8001af8 <HAL_SMBUS_DeInit+0x4c>
  }

  /* Check the parameters */
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));

  hsmbus->State = HAL_SMBUS_STATE_BUSY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	649a      	str	r2, [r3, #72]	; 0x48

  /* Disable the SMBUS Peripheral Clock */
  __HAL_SMBUS_DISABLE(hsmbus);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2101      	movs	r1, #1
 8001ad0:	438a      	bics	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hsmbus->MspDeInitCallback(hsmbus);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_SMBUS_MspDeInit(hsmbus);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f7fe fd7e 	bl	80005d8 <HAL_SMBUS_MspDeInit>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */

  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsmbus->PreviousState =  HAL_SMBUS_STATE_RESET;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	641a      	str	r2, [r3, #64]	; 0x40
  hsmbus->State = HAL_SMBUS_STATE_RESET;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Release Lock */
  __HAL_UNLOCK(hsmbus);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2244      	movs	r2, #68	; 0x44
 8001af2:	2100      	movs	r1, #0
 8001af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b002      	add	sp, #8
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_SMBUS_Master_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref SMBUS_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Master_Receive_IT(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size, uint32_t XferOptions)
{
 8001b00:	b590      	push	{r4, r7, lr}
 8001b02:	b089      	sub	sp, #36	; 0x24
 8001b04:	af02      	add	r7, sp, #8
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	0008      	movs	r0, r1
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	0019      	movs	r1, r3
 8001b0e:	230a      	movs	r3, #10
 8001b10:	18fb      	adds	r3, r7, r3
 8001b12:	1c02      	adds	r2, r0, #0
 8001b14:	801a      	strh	r2, [r3, #0]
 8001b16:	2308      	movs	r3, #8
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	1c0a      	adds	r2, r1, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_SMBUS_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d000      	beq.n	8001b28 <HAL_SMBUS_Master_Receive_IT+0x28>
 8001b26:	e09e      	b.n	8001c66 <HAL_SMBUS_Master_Receive_IT+0x166>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2244      	movs	r2, #68	; 0x44
 8001b2c:	5c9b      	ldrb	r3, [r3, r2]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_SMBUS_Master_Receive_IT+0x36>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e098      	b.n	8001c68 <HAL_SMBUS_Master_Receive_IT+0x168>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2244      	movs	r2, #68	; 0x44
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	5499      	strb	r1, [r3, r2]

    hsmbus->State = HAL_SMBUS_STATE_MASTER_BUSY_RX;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2222      	movs	r2, #34	; 0x22
 8001b42:	649a      	str	r2, [r3, #72]	; 0x48
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Prepare transfer parameters */
    hsmbus->pBuffPtr = pData;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
    hsmbus->XferCount = Size;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2208      	movs	r2, #8
 8001b54:	18ba      	adds	r2, r7, r2
 8001b56:	8812      	ldrh	r2, [r2, #0]
 8001b58:	875a      	strh	r2, [r3, #58]	; 0x3a
    hsmbus->XferOptions = XferOptions;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* In case of Quick command, remove autoend mode */
    /* Manage the stop generation by software */
    if (hsmbus->pBuffPtr == NULL)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <HAL_SMBUS_Master_Receive_IT+0x74>
    {
      hsmbus->XferOptions &= ~SMBUS_AUTOEND_MODE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6c:	4a40      	ldr	r2, [pc, #256]	; (8001c70 <HAL_SMBUS_Master_Receive_IT+0x170>)
 8001b6e:	401a      	ands	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    if (Size > MAX_NBYTE_SIZE)
 8001b74:	2308      	movs	r3, #8
 8001b76:	18fb      	adds	r3, r7, r3
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	2bff      	cmp	r3, #255	; 0xff
 8001b7c:	d903      	bls.n	8001b86 <HAL_SMBUS_Master_Receive_IT+0x86>
    {
      hsmbus->XferSize = MAX_NBYTE_SIZE;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	22ff      	movs	r2, #255	; 0xff
 8001b82:	871a      	strh	r2, [r3, #56]	; 0x38
 8001b84:	e004      	b.n	8001b90 <HAL_SMBUS_Master_Receive_IT+0x90>
    }
    else
    {
      hsmbus->XferSize = Size;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2208      	movs	r2, #8
 8001b8a:	18ba      	adds	r2, r7, r2
 8001b8c:	8812      	ldrh	r2, [r2, #0]
 8001b8e:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > MAX_NBYTE_SIZE and generate RESTART */
    if ((hsmbus->XferSize < hsmbus->XferCount) && (hsmbus->XferSize == MAX_NBYTE_SIZE))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d219      	bcs.n	8001bd2 <HAL_SMBUS_Master_Receive_IT+0xd2>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001ba2:	2bff      	cmp	r3, #255	; 0xff
 8001ba4:	d115      	bne.n	8001bd2 <HAL_SMBUS_Master_Receive_IT+0xd2>
    {
      SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize,
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001baa:	b2dc      	uxtb	r4, r3
                           SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE),
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb0:	2380      	movs	r3, #128	; 0x80
 8001bb2:	04db      	lsls	r3, r3, #19
 8001bb4:	4013      	ands	r3, r2
      SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize,
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	0452      	lsls	r2, r2, #17
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	230a      	movs	r3, #10
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	8819      	ldrh	r1, [r3, #0]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_SMBUS_Master_Receive_IT+0x174>)
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	0013      	movs	r3, r2
 8001bca:	0022      	movs	r2, r4
 8001bcc:	f001 f816 	bl	8002bfc <SMBUS_TransferConfig>
 8001bd0:	e03e      	b.n	8001c50 <HAL_SMBUS_Master_Receive_IT+0x150>
    {
      /* If transfer direction not change, do not generate Restart Condition */
      /* Mean Previous state is same as current state */

      /* Store current volatile XferOptions, Misra rule */
      tmp = hsmbus->XferOptions;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd6:	617b      	str	r3, [r7, #20]

      if ((hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_RX) && \
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bdc:	2b22      	cmp	r3, #34	; 0x22
 8001bde:	d125      	bne.n	8001c2c <HAL_SMBUS_Master_Receive_IT+0x12c>
          (IS_SMBUS_TRANSFER_OTHER_OPTIONS_REQUEST(tmp) == 0))
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	2baa      	cmp	r3, #170	; 0xaa
 8001be4:	d00e      	beq.n	8001c04 <HAL_SMBUS_Master_Receive_IT+0x104>
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	23aa      	movs	r3, #170	; 0xaa
 8001bea:	041b      	lsls	r3, r3, #16
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d009      	beq.n	8001c04 <HAL_SMBUS_Master_Receive_IT+0x104>
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	23aa      	movs	r3, #170	; 0xaa
 8001bf4:	021b      	lsls	r3, r3, #8
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d004      	beq.n	8001c04 <HAL_SMBUS_Master_Receive_IT+0x104>
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	23aa      	movs	r3, #170	; 0xaa
 8001bfe:	061b      	lsls	r3, r3, #24
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d101      	bne.n	8001c08 <HAL_SMBUS_Master_Receive_IT+0x108>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_SMBUS_Master_Receive_IT+0x10a>
 8001c08:	2300      	movs	r3, #0
      if ((hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_RX) && \
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10e      	bne.n	8001c2c <HAL_SMBUS_Master_Receive_IT+0x12c>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8001c18:	230a      	movs	r3, #10
 8001c1a:	18fb      	adds	r3, r7, r3
 8001c1c:	8819      	ldrh	r1, [r3, #0]
 8001c1e:	68f8      	ldr	r0, [r7, #12]
 8001c20:	2300      	movs	r3, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	0023      	movs	r3, r4
 8001c26:	f000 ffe9 	bl	8002bfc <SMBUS_TransferConfig>
 8001c2a:	e011      	b.n	8001c50 <HAL_SMBUS_Master_Receive_IT+0x150>
      }
      /* Else transfer direction change, so generate Restart with new transfer direction */
      else
      {
        /* Convert OTHER_xxx XferOptions if any */
        SMBUS_ConvertOtherXferOptions(hsmbus);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f001 f81a 	bl	8002c68 <SMBUS_ConvertOtherXferOptions>

        /* Handle Transfer */
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize,
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001c38:	b2da      	uxtb	r2, r3
                             hsmbus->XferOptions,
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize,
 8001c3e:	230a      	movs	r3, #10
 8001c40:	18fb      	adds	r3, r7, r3
 8001c42:	8819      	ldrh	r1, [r3, #0]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_SMBUS_Master_Receive_IT+0x174>)
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	0023      	movs	r3, r4
 8001c4c:	f000 ffd6 	bl	8002bfc <SMBUS_TransferConfig>
                             SMBUS_GENERATE_START_READ);
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2244      	movs	r2, #68	; 0x44
 8001c54:	2100      	movs	r1, #0
 8001c56:	5499      	strb	r1, [r3, r2]

    /* Note : The SMBUS interrupts must be enabled after unlocking current process
              to avoid the risk of SMBUS interrupt handle execution before current
              process unlock */
    SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_RX);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	21d4      	movs	r1, #212	; 0xd4
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f000 fe4f 	bl	8002900 <SMBUS_Enable_IRQ>

    return HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e000      	b.n	8001c68 <HAL_SMBUS_Master_Receive_IT+0x168>
  }
  else
  {
    return HAL_BUSY;
 8001c66:	2302      	movs	r3, #2
  }
}
 8001c68:	0018      	movs	r0, r3
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b007      	add	sp, #28
 8001c6e:	bd90      	pop	{r4, r7, pc}
 8001c70:	fdffffff 	.word	0xfdffffff
 8001c74:	80002400 	.word	0x80002400

08001c78 <HAL_SMBUS_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Master_Abort_IT(SMBUS_HandleTypeDef *hsmbus, uint16_t DevAddress)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	000a      	movs	r2, r1
 8001c82:	1cbb      	adds	r3, r7, #2
 8001c84:	801a      	strh	r2, [r3, #0]
  if (hsmbus->State == HAL_SMBUS_STATE_READY)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d143      	bne.n	8001d16 <HAL_SMBUS_Master_Abort_IT+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2244      	movs	r2, #68	; 0x44
 8001c92:	5c9b      	ldrb	r3, [r3, r2]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_SMBUS_Master_Abort_IT+0x24>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e03d      	b.n	8001d18 <HAL_SMBUS_Master_Abort_IT+0xa0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2244      	movs	r2, #68	; 0x44
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	5499      	strb	r1, [r3, r2]

    /* Keep the same state as previous */
    /* to perform as well the call of the corresponding end of transfer callback */
    if (hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca8:	2b12      	cmp	r3, #18
 8001caa:	d103      	bne.n	8001cb4 <HAL_SMBUS_Master_Abort_IT+0x3c>
    {
      hsmbus->State = HAL_SMBUS_STATE_MASTER_BUSY_TX;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2212      	movs	r2, #18
 8001cb0:	649a      	str	r2, [r3, #72]	; 0x48
 8001cb2:	e009      	b.n	8001cc8 <HAL_SMBUS_Master_Abort_IT+0x50>
    }
    else if (hsmbus->PreviousState == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	2b22      	cmp	r3, #34	; 0x22
 8001cba:	d103      	bne.n	8001cc4 <HAL_SMBUS_Master_Abort_IT+0x4c>
    {
      hsmbus->State = HAL_SMBUS_STATE_MASTER_BUSY_RX;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2222      	movs	r2, #34	; 0x22
 8001cc0:	649a      	str	r2, [r3, #72]	; 0x48
 8001cc2:	e001      	b.n	8001cc8 <HAL_SMBUS_Master_Abort_IT+0x50>
    }
    else
    {
      /* Wrong usage of abort function */
      /* This function should be used only in case of abort monitored by master device */
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e027      	b.n	8001d18 <HAL_SMBUS_Master_Abort_IT+0xa0>
    }
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set NBYTES to 1 to generate a dummy read on SMBUS peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    SMBUS_TransferConfig(hsmbus, DevAddress, 1, SMBUS_AUTOEND_MODE, SMBUS_NO_STARTSTOP);
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	049a      	lsls	r2, r3, #18
 8001cd2:	1cbb      	adds	r3, r7, #2
 8001cd4:	8819      	ldrh	r1, [r3, #0]
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	0013      	movs	r3, r2
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f000 ff8c 	bl	8002bfc <SMBUS_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2244      	movs	r2, #68	; 0x44
 8001ce8:	2100      	movs	r1, #0
 8001cea:	5499      	strb	r1, [r3, r2]

    /* Note : The SMBUS interrupts must be enabled after unlocking current process
              to avoid the risk of SMBUS interrupt handle execution before current
              process unlock */
    if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf0:	2b12      	cmp	r3, #18
 8001cf2:	d105      	bne.n	8001d00 <HAL_SMBUS_Master_Abort_IT+0x88>
    {
      SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_TX);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	21f2      	movs	r1, #242	; 0xf2
 8001cf8:	0018      	movs	r0, r3
 8001cfa:	f000 fe01 	bl	8002900 <SMBUS_Enable_IRQ>
 8001cfe:	e008      	b.n	8001d12 <HAL_SMBUS_Master_Abort_IT+0x9a>
    }
    else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d04:	2b22      	cmp	r3, #34	; 0x22
 8001d06:	d104      	bne.n	8001d12 <HAL_SMBUS_Master_Abort_IT+0x9a>
    {
      SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_RX);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	21d4      	movs	r1, #212	; 0xd4
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f000 fdf7 	bl	8002900 <SMBUS_Enable_IRQ>
    else
    {
      /* Nothing to do */
    }

    return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_SMBUS_Master_Abort_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001d16:	2302      	movs	r3, #2
  }
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_SMBUS_Slave_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref SMBUS_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Slave_Transmit_IT(SMBUS_HandleTypeDef *hsmbus, uint8_t *pData, uint16_t Size,
                                              uint32_t XferOptions)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af02      	add	r7, sp, #8
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	603b      	str	r3, [r7, #0]
 8001d2c:	1dbb      	adds	r3, r7, #6
 8001d2e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SMBUS_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d34:	2208      	movs	r2, #8
 8001d36:	4013      	ands	r3, r2
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d000      	beq.n	8001d3e <HAL_SMBUS_Slave_Transmit_IT+0x1e>
 8001d3c:	e099      	b.n	8001e72 <HAL_SMBUS_Slave_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0UL))
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_SMBUS_Slave_Transmit_IT+0x2c>
 8001d44:	1dbb      	adds	r3, r7, #6
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <HAL_SMBUS_Slave_Transmit_IT+0x38>
    {
      hsmbus->ErrorCode = HAL_SMBUS_ERROR_INVALID_PARAM;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	0092      	lsls	r2, r2, #2
 8001d52:	64da      	str	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e08d      	b.n	8001e74 <HAL_SMBUS_Slave_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR | SMBUS_IT_TX);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	21fa      	movs	r1, #250	; 0xfa
 8001d5c:	0018      	movs	r0, r3
 8001d5e:	f000 fe05 	bl	800296c <SMBUS_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2244      	movs	r2, #68	; 0x44
 8001d66:	5c9b      	ldrb	r3, [r3, r2]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_SMBUS_Slave_Transmit_IT+0x50>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e081      	b.n	8001e74 <HAL_SMBUS_Slave_Transmit_IT+0x154>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2244      	movs	r2, #68	; 0x44
 8001d74:	2101      	movs	r1, #1
 8001d76:	5499      	strb	r1, [r3, r2]

    hsmbus->State = (HAL_SMBUS_STATE_SLAVE_BUSY_TX | HAL_SMBUS_STATE_LISTEN);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	223a      	movs	r2, #58	; 0x3a
 8001d7c:	649a      	str	r2, [r3, #72]	; 0x48
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set SBC bit to manage Acknowledge at each bit */
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2180      	movs	r1, #128	; 0x80
 8001d90:	0249      	lsls	r1, r1, #9
 8001d92:	430a      	orrs	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]

    /* Enable Address Acknowledge */
    hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4936      	ldr	r1, [pc, #216]	; (8001e7c <HAL_SMBUS_Slave_Transmit_IT+0x15c>)
 8001da2:	400a      	ands	r2, r1
 8001da4:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hsmbus->pBuffPtr = pData;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	68ba      	ldr	r2, [r7, #8]
 8001daa:	635a      	str	r2, [r3, #52]	; 0x34
    hsmbus->XferCount = Size;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1dba      	adds	r2, r7, #6
 8001db0:	8812      	ldrh	r2, [r2, #0]
 8001db2:	875a      	strh	r2, [r3, #58]	; 0x3a
    hsmbus->XferOptions = XferOptions;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Convert OTHER_xxx XferOptions if any */
    SMBUS_ConvertOtherXferOptions(hsmbus);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	f000 ff53 	bl	8002c68 <SMBUS_ConvertOtherXferOptions>

    if (Size > MAX_NBYTE_SIZE)
 8001dc2:	1dbb      	adds	r3, r7, #6
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	2bff      	cmp	r3, #255	; 0xff
 8001dc8:	d903      	bls.n	8001dd2 <HAL_SMBUS_Slave_Transmit_IT+0xb2>
    {
      hsmbus->XferSize = MAX_NBYTE_SIZE;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	22ff      	movs	r2, #255	; 0xff
 8001dce:	871a      	strh	r2, [r3, #56]	; 0x38
 8001dd0:	e003      	b.n	8001dda <HAL_SMBUS_Slave_Transmit_IT+0xba>
    }
    else
    {
      hsmbus->XferSize = Size;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1dba      	adds	r2, r7, #6
 8001dd6:	8812      	ldrh	r2, [r2, #0]
 8001dd8:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    /* Set NBYTES to write and reload if size > MAX_NBYTE_SIZE and generate RESTART */
    if ((hsmbus->XferSize < hsmbus->XferCount) && (hsmbus->XferSize == MAX_NBYTE_SIZE))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d216      	bcs.n	8001e16 <HAL_SMBUS_Slave_Transmit_IT+0xf6>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001dec:	2bff      	cmp	r3, #255	; 0xff
 8001dee:	d112      	bne.n	8001e16 <HAL_SMBUS_Slave_Transmit_IT+0xf6>
    {
      SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize,
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001df4:	b2d9      	uxtb	r1, r3
                           SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE),
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dfa:	2380      	movs	r3, #128	; 0x80
 8001dfc:	04db      	lsls	r3, r3, #19
 8001dfe:	4013      	ands	r3, r2
      SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize,
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	0452      	lsls	r2, r2, #17
 8001e04:	4313      	orrs	r3, r2
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	9200      	str	r2, [sp, #0]
 8001e0c:	000a      	movs	r2, r1
 8001e0e:	2100      	movs	r1, #0
 8001e10:	f000 fef4 	bl	8002bfc <SMBUS_TransferConfig>
 8001e14:	e01e      	b.n	8001e54 <HAL_SMBUS_Slave_Transmit_IT+0x134>
                           SMBUS_NO_STARTSTOP);
    }
    else
    {
      /* Set NBYTE to transmit */
      SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	2100      	movs	r1, #0
 8001e24:	9100      	str	r1, [sp, #0]
 8001e26:	2100      	movs	r1, #0
 8001e28:	f000 fee8 	bl	8002bfc <SMBUS_TransferConfig>
                           SMBUS_NO_STARTSTOP);

      /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
      /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
      if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	04db      	lsls	r3, r3, #19
 8001e36:	4013      	ands	r3, r2
 8001e38:	d00c      	beq.n	8001e54 <HAL_SMBUS_Slave_Transmit_IT+0x134>
      {
        hsmbus->XferSize--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	871a      	strh	r2, [r3, #56]	; 0x38
        hsmbus->XferCount--;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	875a      	strh	r2, [r3, #58]	; 0x3a
      }
    }

    /* Clear ADDR flag after prepare the transfer parameters */
    /* This action will generate an acknowledge to the HOST */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2208      	movs	r2, #8
 8001e5a:	61da      	str	r2, [r3, #28]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2244      	movs	r2, #68	; 0x44
 8001e60:	2100      	movs	r1, #0
 8001e62:	5499      	strb	r1, [r3, r2]

    /* Note : The SMBUS interrupts must be enabled after unlocking current process
              to avoid the risk of SMBUS interrupt handle execution before current
              process unlock */
    /* REnable ADDR interrupt */
    SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_TX | SMBUS_IT_ADDR);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	21fa      	movs	r1, #250	; 0xfa
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f000 fd49 	bl	8002900 <SMBUS_Enable_IRQ>

    return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e000      	b.n	8001e74 <HAL_SMBUS_Slave_Transmit_IT+0x154>
  }
  else
  {
    return HAL_BUSY;
 8001e72:	2302      	movs	r3, #2
  }
}
 8001e74:	0018      	movs	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b004      	add	sp, #16
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	ffff7fff 	.word	0xffff7fff

08001e80 <HAL_SMBUS_Slave_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref SMBUS_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_Slave_Receive_IT(SMBUS_HandleTypeDef *hsmbus, uint8_t *pData, uint16_t Size,
                                             uint32_t XferOptions)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af02      	add	r7, sp, #8
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	603b      	str	r3, [r7, #0]
 8001e8c:	1dbb      	adds	r3, r7, #6
 8001e8e:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_SMBUS_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	2208      	movs	r2, #8
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d000      	beq.n	8001e9e <HAL_SMBUS_Slave_Receive_IT+0x1e>
 8001e9c:	e07b      	b.n	8001f96 <HAL_SMBUS_Slave_Receive_IT+0x116>
  {
    if ((pData == NULL) || (Size == 0UL))
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d003      	beq.n	8001eac <HAL_SMBUS_Slave_Receive_IT+0x2c>
 8001ea4:	1dbb      	adds	r3, r7, #6
 8001ea6:	881b      	ldrh	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <HAL_SMBUS_Slave_Receive_IT+0x38>
    {
      hsmbus->ErrorCode = HAL_SMBUS_ERROR_INVALID_PARAM;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2280      	movs	r2, #128	; 0x80
 8001eb0:	0092      	lsls	r2, r2, #2
 8001eb2:	64da      	str	r2, [r3, #76]	; 0x4c
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e06f      	b.n	8001f98 <HAL_SMBUS_Slave_Receive_IT+0x118>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR | SMBUS_IT_RX);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	21fc      	movs	r1, #252	; 0xfc
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f000 fd55 	bl	800296c <SMBUS_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hsmbus);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2244      	movs	r2, #68	; 0x44
 8001ec6:	5c9b      	ldrb	r3, [r3, r2]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_SMBUS_Slave_Receive_IT+0x50>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e063      	b.n	8001f98 <HAL_SMBUS_Slave_Receive_IT+0x118>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2244      	movs	r2, #68	; 0x44
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	5499      	strb	r1, [r3, r2]

    hsmbus->State = (HAL_SMBUS_STATE_SLAVE_BUSY_RX | HAL_SMBUS_STATE_LISTEN);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	224a      	movs	r2, #74	; 0x4a
 8001edc:	649a      	str	r2, [r3, #72]	; 0x48
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set SBC bit to manage Acknowledge at each bit */
    hsmbus->Instance->CR1 |= I2C_CR1_SBC;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	0249      	lsls	r1, r1, #9
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]

    /* Enable Address Acknowledge */
    hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4927      	ldr	r1, [pc, #156]	; (8001fa0 <HAL_SMBUS_Slave_Receive_IT+0x120>)
 8001f02:	400a      	ands	r2, r1
 8001f04:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hsmbus->pBuffPtr = pData;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	635a      	str	r2, [r3, #52]	; 0x34
    hsmbus->XferSize = Size;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1dba      	adds	r2, r7, #6
 8001f10:	8812      	ldrh	r2, [r2, #0]
 8001f12:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount = Size;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1dba      	adds	r2, r7, #6
 8001f18:	8812      	ldrh	r2, [r2, #0]
 8001f1a:	875a      	strh	r2, [r3, #58]	; 0x3a
    hsmbus->XferOptions = XferOptions;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Convert OTHER_xxx XferOptions if any */
    SMBUS_ConvertOtherXferOptions(hsmbus);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f000 fe9f 	bl	8002c68 <SMBUS_ConvertOtherXferOptions>
    /* Set NBYTE to receive */
    /* If XferSize equal "1", or XferSize equal "2" with PEC requested (mean 1 data byte + 1 PEC byte */
    /* no need to set RELOAD bit mode, a ACK will be automatically generated in that case */
    /* else need to set RELOAD bit mode to generate an automatic ACK at each byte Received */
    /* This RELOAD bit will be reset for last BYTE to be receive in SMBUS_Slave_ISR */
    if (((SMBUS_GET_PEC_MODE(hsmbus) != 0UL) && (hsmbus->XferSize == 2U)) || (hsmbus->XferSize == 1U))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	04db      	lsls	r3, r3, #19
 8001f34:	4013      	ands	r3, r2
 8001f36:	d003      	beq.n	8001f40 <HAL_SMBUS_Slave_Receive_IT+0xc0>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d003      	beq.n	8001f48 <HAL_SMBUS_Slave_Receive_IT+0xc8>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d10b      	bne.n	8001f60 <HAL_SMBUS_Slave_Receive_IT+0xe0>
    {
      SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	2100      	movs	r1, #0
 8001f56:	9100      	str	r1, [sp, #0]
 8001f58:	2100      	movs	r1, #0
 8001f5a:	f000 fe4f 	bl	8002bfc <SMBUS_TransferConfig>
 8001f5e:	e00b      	b.n	8001f78 <HAL_SMBUS_Slave_Receive_IT+0xf8>
                           SMBUS_NO_STARTSTOP);
    }
    else
    {
      SMBUS_TransferConfig(hsmbus, 0, 1, hsmbus->XferOptions | SMBUS_RELOAD_MODE, SMBUS_NO_STARTSTOP);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f64:	2280      	movs	r2, #128	; 0x80
 8001f66:	0452      	lsls	r2, r2, #17
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	9200      	str	r2, [sp, #0]
 8001f70:	2201      	movs	r2, #1
 8001f72:	2100      	movs	r1, #0
 8001f74:	f000 fe42 	bl	8002bfc <SMBUS_TransferConfig>
    }

    /* Clear ADDR flag after prepare the transfer parameters */
    /* This action will generate an acknowledge to the HOST */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2208      	movs	r2, #8
 8001f7e:	61da      	str	r2, [r3, #28]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2244      	movs	r2, #68	; 0x44
 8001f84:	2100      	movs	r1, #0
 8001f86:	5499      	strb	r1, [r3, r2]

    /* Note : The SMBUS interrupts must be enabled after unlocking current process
              to avoid the risk of SMBUS interrupt handle execution before current
              process unlock */
    /* REnable ADDR interrupt */
    SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_ADDR);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	21fc      	movs	r1, #252	; 0xfc
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f000 fcb7 	bl	8002900 <SMBUS_Enable_IRQ>

    return HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	e000      	b.n	8001f98 <HAL_SMBUS_Slave_Receive_IT+0x118>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b004      	add	sp, #16
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	ffff7fff 	.word	0xffff7fff

08001fa4 <HAL_SMBUS_EnableListen_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_EnableListen_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  hsmbus->State = HAL_SMBUS_STATE_LISTEN;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2208      	movs	r2, #8
 8001fb0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Enable the Address Match interrupt */
  SMBUS_Enable_IRQ(hsmbus, SMBUS_IT_ADDR);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2138      	movs	r1, #56	; 0x38
 8001fb6:	0018      	movs	r0, r3
 8001fb8:	f000 fca2 	bl	8002900 <SMBUS_Enable_IRQ>

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b002      	add	sp, #8
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_SMBUS_DisableListen_IT>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SMBUS_DisableListen_IT(SMBUS_HandleTypeDef *hsmbus)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Disable Address listen mode only if a transfer is not ongoing */
  if (hsmbus->State == HAL_SMBUS_STATE_LISTEN)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d109      	bne.n	8001fea <HAL_SMBUS_DisableListen_IT+0x24>
  {
    hsmbus->State = HAL_SMBUS_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	649a      	str	r2, [r3, #72]	; 0x48

    /* Disable the Address Match interrupt */
    SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2138      	movs	r1, #56	; 0x38
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f000 fcc3 	bl	800296c <SMBUS_Disable_IRQ>

    return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e000      	b.n	8001fec <HAL_SMBUS_DisableListen_IT+0x26>
  }
  else
  {
    return HAL_BUSY;
 8001fea:	2302      	movs	r3, #2
  }
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b002      	add	sp, #8
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_SMBUS_EV_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_EV_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Use a local variable to store the current ISR flags */
  /* This action will avoid a wrong treatment due to ISR flags change during interrupt handler */
  uint32_t tmpisrvalue = READ_REG(hsmbus->Instance->ISR);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr1value = READ_REG(hsmbus->Instance->CR1);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60bb      	str	r3, [r7, #8]

  /* SMBUS in mode Transmitter ---------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2272      	movs	r2, #114	; 0x72
 8002010:	4013      	ands	r3, r2
 8002012:	2b72      	cmp	r3, #114	; 0x72
 8002014:	d12c      	bne.n	8002070 <HAL_SMBUS_EV_IRQHandler+0x7c>
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2202      	movs	r2, #2
 800201a:	4013      	ands	r3, r2
                                           SMBUS_IT_NACKI | SMBUS_IT_TXI)) != RESET) &&
 800201c:	d10f      	bne.n	800203e <HAL_SMBUS_EV_IRQHandler+0x4a>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2280      	movs	r2, #128	; 0x80
 8002022:	4013      	ands	r3, r2
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TXIS) != RESET) ||
 8002024:	d10b      	bne.n	800203e <HAL_SMBUS_EV_IRQHandler+0x4a>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	4013      	ands	r3, r2
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 800202c:	d107      	bne.n	800203e <HAL_SMBUS_EV_IRQHandler+0x4a>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	4013      	ands	r3, r2
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8002034:	d103      	bne.n	800203e <HAL_SMBUS_EV_IRQHandler+0x4a>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2210      	movs	r2, #16
 800203a:	4013      	ands	r3, r2
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 800203c:	d018      	beq.n	8002070 <HAL_SMBUS_EV_IRQHandler+0x7c>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002042:	2232      	movs	r2, #50	; 0x32
 8002044:	4013      	ands	r3, r2
 8002046:	2b32      	cmp	r3, #50	; 0x32
 8002048:	d106      	bne.n	8002058 <HAL_SMBUS_EV_IRQHandler+0x64>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	0011      	movs	r1, r2
 8002050:	0018      	movs	r0, r3
 8002052:	f000 fa5f 	bl	8002514 <SMBUS_Slave_ISR>
 8002056:	e00b      	b.n	8002070 <HAL_SMBUS_EV_IRQHandler+0x7c>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_TX) == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205c:	2212      	movs	r2, #18
 800205e:	4013      	ands	r3, r2
 8002060:	2b12      	cmp	r3, #18
 8002062:	d105      	bne.n	8002070 <HAL_SMBUS_EV_IRQHandler+0x7c>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 8002064:	68fa      	ldr	r2, [r7, #12]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	0011      	movs	r1, r2
 800206a:	0018      	movs	r0, r3
 800206c:	f000 f866 	bl	800213c <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Receiver ----------------------------------------------------*/
  if ((SMBUS_CHECK_IT_SOURCE(tmpcr1value, (SMBUS_IT_TCI | SMBUS_IT_STOPI |
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2274      	movs	r2, #116	; 0x74
 8002074:	4013      	ands	r3, r2
 8002076:	2b74      	cmp	r3, #116	; 0x74
 8002078:	d12c      	bne.n	80020d4 <HAL_SMBUS_EV_IRQHandler+0xe0>
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2204      	movs	r2, #4
 800207e:	4013      	ands	r3, r2
                                           SMBUS_IT_NACKI | SMBUS_IT_RXI)) != RESET) &&
 8002080:	d10f      	bne.n	80020a2 <HAL_SMBUS_EV_IRQHandler+0xae>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2280      	movs	r2, #128	; 0x80
 8002086:	4013      	ands	r3, r2
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_RXNE) != RESET) ||
 8002088:	d10b      	bne.n	80020a2 <HAL_SMBUS_EV_IRQHandler+0xae>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2240      	movs	r2, #64	; 0x40
 800208e:	4013      	ands	r3, r2
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TCR) != RESET) ||
 8002090:	d107      	bne.n	80020a2 <HAL_SMBUS_EV_IRQHandler+0xae>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2220      	movs	r2, #32
 8002096:	4013      	ands	r3, r2
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_TC) != RESET) ||
 8002098:	d103      	bne.n	80020a2 <HAL_SMBUS_EV_IRQHandler+0xae>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2210      	movs	r2, #16
 800209e:	4013      	ands	r3, r2
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 80020a0:	d018      	beq.n	80020d4 <HAL_SMBUS_EV_IRQHandler+0xe0>
  {
    /* Slave mode selected */
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a6:	2242      	movs	r2, #66	; 0x42
 80020a8:	4013      	ands	r3, r2
 80020aa:	2b42      	cmp	r3, #66	; 0x42
 80020ac:	d106      	bne.n	80020bc <HAL_SMBUS_EV_IRQHandler+0xc8>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	0011      	movs	r1, r2
 80020b4:	0018      	movs	r0, r3
 80020b6:	f000 fa2d 	bl	8002514 <SMBUS_Slave_ISR>
 80020ba:	e00b      	b.n	80020d4 <HAL_SMBUS_EV_IRQHandler+0xe0>
    }
    /* Master mode selected */
    else if ((hsmbus->State & HAL_SMBUS_STATE_MASTER_BUSY_RX) == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c0:	2222      	movs	r2, #34	; 0x22
 80020c2:	4013      	ands	r3, r2
 80020c4:	2b22      	cmp	r3, #34	; 0x22
 80020c6:	d105      	bne.n	80020d4 <HAL_SMBUS_EV_IRQHandler+0xe0>
    {
      (void)SMBUS_Master_ISR(hsmbus, tmpisrvalue);
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	0011      	movs	r1, r2
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 f834 	bl	800213c <SMBUS_Master_ISR>
      /* Nothing to do */
    }
  }

  /* SMBUS in mode Listener Only --------------------------------------------------*/
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	2208      	movs	r2, #8
 80020d8:	4013      	ands	r3, r2
 80020da:	d107      	bne.n	80020ec <HAL_SMBUS_EV_IRQHandler+0xf8>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2220      	movs	r2, #32
 80020e0:	4013      	ands	r3, r2
  if (((SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_ADDRI) != RESET) ||
 80020e2:	d103      	bne.n	80020ec <HAL_SMBUS_EV_IRQHandler+0xf8>
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2210      	movs	r2, #16
 80020e8:	4013      	ands	r3, r2
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_STOPI) != RESET) ||
 80020ea:	d017      	beq.n	800211c <HAL_SMBUS_EV_IRQHandler+0x128>
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2208      	movs	r2, #8
 80020f0:	4013      	ands	r3, r2
       (SMBUS_CHECK_IT_SOURCE(tmpcr1value, SMBUS_IT_NACKI) != RESET)) &&
 80020f2:	d107      	bne.n	8002104 <HAL_SMBUS_EV_IRQHandler+0x110>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2220      	movs	r2, #32
 80020f8:	4013      	ands	r3, r2
      ((SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_ADDR) != RESET) ||
 80020fa:	d103      	bne.n	8002104 <HAL_SMBUS_EV_IRQHandler+0x110>
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_AF) != RESET)))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2210      	movs	r2, #16
 8002100:	4013      	ands	r3, r2
       (SMBUS_CHECK_FLAG(tmpisrvalue, SMBUS_FLAG_STOPF) != RESET) ||
 8002102:	d00b      	beq.n	800211c <HAL_SMBUS_EV_IRQHandler+0x128>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002108:	2208      	movs	r2, #8
 800210a:	4013      	ands	r3, r2
 800210c:	2b08      	cmp	r3, #8
 800210e:	d105      	bne.n	800211c <HAL_SMBUS_EV_IRQHandler+0x128>
    {
      (void)SMBUS_Slave_ISR(hsmbus, tmpisrvalue);
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	0011      	movs	r1, r2
 8002116:	0018      	movs	r0, r3
 8002118:	f000 f9fc 	bl	8002514 <SMBUS_Slave_ISR>
    }
  }
}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b004      	add	sp, #16
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_SMBUS_ER_IRQHandler>:
  * @param  hsmbus Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_ER_IRQHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  SMBUS_ITErrorHandler(hsmbus);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	0018      	movs	r0, r3
 8002130:	f000 fc92 	bl	8002a58 <SMBUS_ITErrorHandler>
}
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b002      	add	sp, #8
 800213a:	bd80      	pop	{r7, pc}

0800213c <SMBUS_Master_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Master_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 800213c:	b590      	push	{r4, r7, lr}
 800213e:	b087      	sub	sp, #28
 8002140:	af02      	add	r7, sp, #8
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint16_t DevAddress;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2244      	movs	r2, #68	; 0x44
 800214a:	5c9b      	ldrb	r3, [r3, r2]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <SMBUS_Master_ISR+0x18>
 8002150:	2302      	movs	r3, #2
 8002152:	e1db      	b.n	800250c <SMBUS_Master_ISR+0x3d0>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2244      	movs	r2, #68	; 0x44
 8002158:	2101      	movs	r1, #1
 800215a:	5499      	strb	r1, [r3, r2]

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	2210      	movs	r2, #16
 8002160:	4013      	ands	r3, r2
 8002162:	d016      	beq.n	8002192 <SMBUS_Master_ISR+0x56>
  {
    /* Clear NACK Flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2210      	movs	r2, #16
 800216a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002170:	2204      	movs	r2, #4
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Flush TX register */
    SMBUS_Flush_TXDR(hsmbus);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	0018      	movs	r0, r3
 800217c:	f000 fd1c 	bl	8002bb8 <SMBUS_Flush_TXDR>

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2244      	movs	r2, #68	; 0x44
 8002184:	2100      	movs	r1, #0
 8002186:	5499      	strb	r1, [r3, r2]

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	0018      	movs	r0, r3
 800218c:	f001 fbc0 	bl	8003910 <HAL_SMBUS_ErrorCallback>
 8002190:	e1b7      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2220      	movs	r2, #32
 8002196:	4013      	ands	r3, r2
 8002198:	d100      	bne.n	800219c <SMBUS_Master_ISR+0x60>
 800219a:	e07d      	b.n	8002298 <SMBUS_Master_ISR+0x15c>
  {
    /* Check and treat errors if errors occurs during STOP process */
    SMBUS_ITErrorHandler(hsmbus);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	0018      	movs	r0, r3
 80021a0:	f000 fc5a 	bl	8002a58 <SMBUS_ITErrorHandler>

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a8:	2b12      	cmp	r3, #18
 80021aa:	d12f      	bne.n	800220c <SMBUS_Master_ISR+0xd0>
    {
      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	21f2      	movs	r1, #242	; 0xf2
 80021b0:	0018      	movs	r0, r3
 80021b2:	f000 fbdb 	bl	800296c <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2220      	movs	r2, #32
 80021bc:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	49cc      	ldr	r1, [pc, #816]	; (80024fc <SMBUS_Master_ISR+0x3c0>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	605a      	str	r2, [r3, #4]

      /* Flush remaining data in Fifo register in case of error occurs before TXEmpty */
      /* Disable the selected SMBUS peripheral */
      __HAL_SMBUS_DISABLE(hsmbus);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2101      	movs	r1, #1
 80021da:	438a      	bics	r2, r1
 80021dc:	601a      	str	r2, [r3, #0]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2244      	movs	r2, #68	; 0x44
 80021ee:	2100      	movs	r1, #0
 80021f0:	5499      	strb	r1, [r3, r2]

      /* Re-enable the selected SMBUS peripheral */
      __HAL_SMBUS_ENABLE(hsmbus);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2101      	movs	r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	601a      	str	r2, [r3, #0]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	0018      	movs	r0, r3
 8002206:	f000 fe27 	bl	8002e58 <HAL_SMBUS_MasterTxCpltCallback>
 800220a:	e17a      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
    else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002210:	2b22      	cmp	r3, #34	; 0x22
 8002212:	d000      	beq.n	8002216 <SMBUS_Master_ISR+0xda>
 8002214:	e175      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
    {
      /* Store Last receive data if any */
      if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2204      	movs	r2, #4
 800221a:	4013      	ands	r3, r2
 800221c:	d01c      	beq.n	8002258 <SMBUS_Master_ISR+0x11c>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00c      	beq.n	8002258 <SMBUS_Master_ISR+0x11c>
        {
          hsmbus->XferSize--;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002242:	3b01      	subs	r3, #1
 8002244:	b29a      	uxth	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	21d4      	movs	r1, #212	; 0xd4
 800225c:	0018      	movs	r0, r3
 800225e:	f000 fb85 	bl	800296c <SMBUS_Disable_IRQ>

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2220      	movs	r2, #32
 8002268:	61da      	str	r2, [r3, #28]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	49a1      	ldr	r1, [pc, #644]	; (80024fc <SMBUS_Master_ISR+0x3c0>)
 8002276:	400a      	ands	r2, r1
 8002278:	605a      	str	r2, [r3, #4]

      hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2244      	movs	r2, #68	; 0x44
 800228a:	2100      	movs	r1, #0
 800228c:	5499      	strb	r1, [r3, r2]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->MasterRxCpltCallback(hsmbus);
#else
      HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	0018      	movs	r0, r3
 8002292:	f000 fe6c 	bl	8002f6e <HAL_SMBUS_MasterRxCpltCallback>
 8002296:	e134      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2204      	movs	r2, #4
 800229c:	4013      	ands	r3, r2
 800229e:	d019      	beq.n	80022d4 <SMBUS_Master_ISR+0x198>
  {
    /* Read data from RXDR */
    *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b2:	1c5a      	adds	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	875a      	strh	r2, [r3, #58]	; 0x3a
 80022d2:	e116      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2202      	movs	r2, #2
 80022d8:	4013      	ands	r3, r2
 80022da:	d018      	beq.n	800230e <SMBUS_Master_ISR+0x1d2>
  {
    /* Write data to TXDR */
    hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hsmbus->pBuffPtr++;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Increment Size counter */
    hsmbus->XferSize--;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	871a      	strh	r2, [r3, #56]	; 0x38
    hsmbus->XferCount--;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	875a      	strh	r2, [r3, #58]	; 0x3a
 800230c:	e0f9      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2280      	movs	r2, #128	; 0x80
 8002312:	4013      	ands	r3, r2
 8002314:	d100      	bne.n	8002318 <SMBUS_Master_ISR+0x1dc>
 8002316:	e09d      	b.n	8002454 <SMBUS_Master_ISR+0x318>
  {
    if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800231c:	b29b      	uxth	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d04f      	beq.n	80023c2 <SMBUS_Master_ISR+0x286>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002326:	2b00      	cmp	r3, #0
 8002328:	d14b      	bne.n	80023c2 <SMBUS_Master_ISR+0x286>
    {
      DevAddress = (uint16_t)(hsmbus->Instance->CR2 & I2C_CR2_SADD);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	b29a      	uxth	r2, r3
 8002332:	210e      	movs	r1, #14
 8002334:	187b      	adds	r3, r7, r1
 8002336:	0592      	lsls	r2, r2, #22
 8002338:	0d92      	lsrs	r2, r2, #22
 800233a:	801a      	strh	r2, [r3, #0]

      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002340:	b29b      	uxth	r3, r3
 8002342:	2bff      	cmp	r3, #255	; 0xff
 8002344:	d914      	bls.n	8002370 <SMBUS_Master_ISR+0x234>
      {
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
                             (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	04db      	lsls	r3, r3, #19
 800234e:	4013      	ands	r3, r2
        SMBUS_TransferConfig(hsmbus, DevAddress, MAX_NBYTE_SIZE,
 8002350:	2280      	movs	r2, #128	; 0x80
 8002352:	0452      	lsls	r2, r2, #17
 8002354:	431a      	orrs	r2, r3
 8002356:	187b      	adds	r3, r7, r1
 8002358:	8819      	ldrh	r1, [r3, #0]
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	2300      	movs	r3, #0
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	0013      	movs	r3, r2
 8002362:	22ff      	movs	r2, #255	; 0xff
 8002364:	f000 fc4a 	bl	8002bfc <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        hsmbus->XferSize = MAX_NBYTE_SIZE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	22ff      	movs	r2, #255	; 0xff
 800236c:	871a      	strh	r2, [r3, #56]	; 0x38
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 800236e:	e0c7      	b.n	8002500 <SMBUS_Master_ISR+0x3c4>
      }
      else
      {
        hsmbus->XferSize = hsmbus->XferCount;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002374:	b29a      	uxth	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	871a      	strh	r2, [r3, #56]	; 0x38
        SMBUS_TransferConfig(hsmbus, DevAddress, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800237e:	b2da      	uxtb	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8002384:	230e      	movs	r3, #14
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	8819      	ldrh	r1, [r3, #0]
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	2300      	movs	r3, #0
 800238e:	9300      	str	r3, [sp, #0]
 8002390:	0023      	movs	r3, r4
 8002392:	f000 fc33 	bl	8002bfc <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);
        /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
        /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
        if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	04db      	lsls	r3, r3, #19
 80023a0:	4013      	ands	r3, r2
 80023a2:	d100      	bne.n	80023a6 <SMBUS_Master_ISR+0x26a>
 80023a4:	e0ac      	b.n	8002500 <SMBUS_Master_ISR+0x3c4>
        {
          hsmbus->XferSize--;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80023aa:	3b01      	subs	r3, #1
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	875a      	strh	r2, [r3, #58]	; 0x3a
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 80023c0:	e09e      	b.n	8002500 <SMBUS_Master_ISR+0x3c4>
        }
      }
    }
    else if ((hsmbus->XferCount == 0U) && (hsmbus->XferSize == 0U))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d000      	beq.n	80023ce <SMBUS_Master_ISR+0x292>
 80023cc:	e099      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d000      	beq.n	80023d8 <SMBUS_Master_ISR+0x29c>
 80023d6:	e094      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	049b      	lsls	r3, r3, #18
 80023e2:	401a      	ands	r2, r3
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	049b      	lsls	r3, r3, #18
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d100      	bne.n	80023ee <SMBUS_Master_ISR+0x2b2>
 80023ec:	e089      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	2b12      	cmp	r3, #18
 80023f4:	d114      	bne.n	8002420 <SMBUS_Master_ISR+0x2e4>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	21f2      	movs	r1, #242	; 0xf2
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 fab6 	bl	800296c <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2244      	movs	r2, #68	; 0x44
 8002412:	2100      	movs	r1, #0
 8002414:	5499      	strb	r1, [r3, r2]

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	0018      	movs	r0, r3
 800241a:	f000 fd1d 	bl	8002e58 <HAL_SMBUS_MasterTxCpltCallback>
 800241e:	e070      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002424:	2b22      	cmp	r3, #34	; 0x22
 8002426:	d000      	beq.n	800242a <SMBUS_Master_ISR+0x2ee>
 8002428:	e06b      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	21d4      	movs	r1, #212	; 0xd4
 800242e:	0018      	movs	r0, r3
 8002430:	f000 fa9c 	bl	800296c <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2244      	movs	r2, #68	; 0x44
 8002446:	2100      	movs	r1, #0
 8002448:	5499      	strb	r1, [r3, r2]

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	0018      	movs	r0, r3
 800244e:	f000 fd8e 	bl	8002f6e <HAL_SMBUS_MasterRxCpltCallback>
 8002452:	e056      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TC) != RESET)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	2240      	movs	r2, #64	; 0x40
 8002458:	4013      	ands	r3, r2
 800245a:	d052      	beq.n	8002502 <SMBUS_Master_ISR+0x3c6>
  {
    if (hsmbus->XferCount == 0U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002460:	b29b      	uxth	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d14d      	bne.n	8002502 <SMBUS_Master_ISR+0x3c6>
    {
      /* Specific use case for Quick command */
      if (hsmbus->pBuffPtr == NULL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <SMBUS_Master_ISR+0x346>
      {
        /* Generate a Stop command */
        hsmbus->Instance->CR2 |= I2C_CR2_STOP;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2180      	movs	r1, #128	; 0x80
 800247a:	01c9      	lsls	r1, r1, #7
 800247c:	430a      	orrs	r2, r1
 800247e:	605a      	str	r2, [r3, #4]
 8002480:	e03f      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
      }
      /* Call TxCpltCallback() if no stop mode is set */
      else if (SMBUS_GET_STOP_MODE(hsmbus) != SMBUS_AUTOEND_MODE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	049b      	lsls	r3, r3, #18
 800248c:	401a      	ands	r2, r3
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	049b      	lsls	r3, r3, #18
 8002492:	429a      	cmp	r2, r3
 8002494:	d035      	beq.n	8002502 <SMBUS_Master_ISR+0x3c6>
      {
        /* No Generate Stop, to permit restart mode */
        /* The stop will be done at the end of transfer, when SMBUS_AUTOEND_MODE enable */

        /* Call the corresponding callback to inform upper layer of End of Transfer */
        if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_TX)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249a:	2b12      	cmp	r3, #18
 800249c:	d114      	bne.n	80024c8 <SMBUS_Master_ISR+0x38c>
        {
          /* Disable Interrupt */
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	21f2      	movs	r1, #242	; 0xf2
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 fa62 	bl	800296c <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2244      	movs	r2, #68	; 0x44
 80024ba:	2100      	movs	r1, #0
 80024bc:	5499      	strb	r1, [r3, r2]

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterTxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterTxCpltCallback(hsmbus);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	0018      	movs	r0, r3
 80024c2:	f000 fcc9 	bl	8002e58 <HAL_SMBUS_MasterTxCpltCallback>
 80024c6:	e01c      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
        }
        else if (hsmbus->State == HAL_SMBUS_STATE_MASTER_BUSY_RX)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024cc:	2b22      	cmp	r3, #34	; 0x22
 80024ce:	d118      	bne.n	8002502 <SMBUS_Master_ISR+0x3c6>
        {
          SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	21d4      	movs	r1, #212	; 0xd4
 80024d4:	0018      	movs	r0, r3
 80024d6:	f000 fa49 	bl	800296c <SMBUS_Disable_IRQ>
          hsmbus->PreviousState = hsmbus->State;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
          hsmbus->State = HAL_SMBUS_STATE_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	649a      	str	r2, [r3, #72]	; 0x48

          /* Process Unlocked */
          __HAL_UNLOCK(hsmbus);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2244      	movs	r2, #68	; 0x44
 80024ec:	2100      	movs	r1, #0
 80024ee:	5499      	strb	r1, [r3, r2]

          /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
          hsmbus->MasterRxCpltCallback(hsmbus);
#else
          HAL_SMBUS_MasterRxCpltCallback(hsmbus);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	0018      	movs	r0, r3
 80024f4:	f000 fd3b 	bl	8002f6e <HAL_SMBUS_MasterRxCpltCallback>
 80024f8:	e003      	b.n	8002502 <SMBUS_Master_ISR+0x3c6>
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	fe00e800 	.word	0xfe00e800
      if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8002500:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2244      	movs	r2, #68	; 0x44
 8002506:	2100      	movs	r1, #0
 8002508:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	0018      	movs	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	b005      	add	sp, #20
 8002512:	bd90      	pop	{r4, r7, pc}

08002514 <SMBUS_Slave_ISR>:
  *                the configuration information for the specified SMBUS.
  * @param  StatusFlags Value of Interrupt Flags.
  * @retval HAL status
  */
static HAL_StatusTypeDef SMBUS_Slave_ISR(SMBUS_HandleTypeDef *hsmbus, uint32_t StatusFlags)
{
 8002514:	b590      	push	{r4, r7, lr}
 8002516:	b087      	sub	sp, #28
 8002518:	af02      	add	r7, sp, #8
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection;
  uint16_t SlaveAddrCode;

  /* Process Locked */
  __HAL_LOCK(hsmbus);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2244      	movs	r2, #68	; 0x44
 8002522:	5c9b      	ldrb	r3, [r3, r2]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <SMBUS_Slave_ISR+0x18>
 8002528:	2302      	movs	r3, #2
 800252a:	e1de      	b.n	80028ea <SMBUS_Slave_ISR+0x3d6>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2244      	movs	r2, #68	; 0x44
 8002530:	2101      	movs	r1, #1
 8002532:	5499      	strb	r1, [r3, r2]

  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_AF) != RESET)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	2210      	movs	r2, #16
 8002538:	4013      	ands	r3, r2
 800253a:	d03f      	beq.n	80025bc <SMBUS_Slave_ISR+0xa8>
  {
    /* Check that SMBUS transfer finished */
    /* if yes, normal usecase, a NACK is sent by the HOST when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hsmbus->XferCount == 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <SMBUS_Slave_ISR+0x4c>
    {
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2210      	movs	r2, #16
 800254c:	61da      	str	r2, [r3, #28]

      /* Flush TX register */
      SMBUS_Flush_TXDR(hsmbus);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	0018      	movs	r0, r3
 8002552:	f000 fb31 	bl	8002bb8 <SMBUS_Flush_TXDR>

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2244      	movs	r2, #68	; 0x44
 800255a:	2100      	movs	r1, #0
 800255c:	5499      	strb	r1, [r3, r2]
 800255e:	e15c      	b.n	800281a <SMBUS_Slave_ISR+0x306>
    }
    else
    {
      /* if no, error usecase, a Non-Acknowledge of last Data is generated by the HOST*/
      /* Clear NACK Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_AF);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2210      	movs	r2, #16
 8002566:	61da      	str	r2, [r3, #28]

      /* Set HAL State to "Idle" State, mean to LISTEN state */
      /* So reset Slave Busy state */
      hsmbus->PreviousState = hsmbus->State;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	2232      	movs	r2, #50	; 0x32
 8002576:	4393      	bics	r3, r2
 8002578:	001a      	movs	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	649a      	str	r2, [r3, #72]	; 0x48
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002582:	2242      	movs	r2, #66	; 0x42
 8002584:	4393      	bics	r3, r2
 8002586:	001a      	movs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	649a      	str	r2, [r3, #72]	; 0x48

      /* Disable RX/TX Interrupts, keep only ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	21f6      	movs	r1, #246	; 0xf6
 8002590:	0018      	movs	r0, r3
 8002592:	f000 f9eb 	bl	800296c <SMBUS_Disable_IRQ>

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ACKF;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	2204      	movs	r2, #4
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Flush TX register */
      SMBUS_Flush_TXDR(hsmbus);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	0018      	movs	r0, r3
 80025a6:	f000 fb07 	bl	8002bb8 <SMBUS_Flush_TXDR>

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2244      	movs	r2, #68	; 0x44
 80025ae:	2100      	movs	r1, #0
 80025b0:	5499      	strb	r1, [r3, r2]

      /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ErrorCallback(hsmbus);
#else
      HAL_SMBUS_ErrorCallback(hsmbus);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	0018      	movs	r0, r3
 80025b6:	f001 f9ab 	bl	8003910 <HAL_SMBUS_ErrorCallback>
 80025ba:	e12e      	b.n	800281a <SMBUS_Slave_ISR+0x306>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_ADDR) != RESET)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2208      	movs	r2, #8
 80025c0:	4013      	ands	r3, r2
 80025c2:	d028      	beq.n	8002616 <SMBUS_Slave_ISR+0x102>
  {
    TransferDirection = (uint8_t)(SMBUS_GET_DIR(hsmbus));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	0c1b      	lsrs	r3, r3, #16
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	200f      	movs	r0, #15
 80025d0:	183b      	adds	r3, r7, r0
 80025d2:	2101      	movs	r1, #1
 80025d4:	400a      	ands	r2, r1
 80025d6:	701a      	strb	r2, [r3, #0]
    SlaveAddrCode = (uint16_t)(SMBUS_GET_ADDR_MATCH(hsmbus));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	0c5b      	lsrs	r3, r3, #17
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	240c      	movs	r4, #12
 80025e4:	193b      	adds	r3, r7, r4
 80025e6:	217f      	movs	r1, #127	; 0x7f
 80025e8:	400a      	ands	r2, r1
 80025ea:	801a      	strh	r2, [r3, #0]

    /* Disable ADDR interrupt to prevent multiple ADDRInterrupt*/
    /* Other ADDRInterrupt will be treat in next Listen usecase */
    __HAL_SMBUS_DISABLE_IT(hsmbus, SMBUS_IT_ADDRI);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2108      	movs	r1, #8
 80025f8:	438a      	bics	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hsmbus);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2244      	movs	r2, #68	; 0x44
 8002600:	2100      	movs	r1, #0
 8002602:	5499      	strb	r1, [r3, r2]

    /* Call Slave Addr callback */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
#else
    HAL_SMBUS_AddrCallback(hsmbus, TransferDirection, SlaveAddrCode);
 8002604:	193b      	adds	r3, r7, r4
 8002606:	881a      	ldrh	r2, [r3, #0]
 8002608:	183b      	adds	r3, r7, r0
 800260a:	7819      	ldrb	r1, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	0018      	movs	r0, r3
 8002610:	f000 fed0 	bl	80033b4 <HAL_SMBUS_AddrCallback>
 8002614:	e101      	b.n	800281a <SMBUS_Slave_ISR+0x306>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2204      	movs	r2, #4
 800261a:	4013      	ands	r3, r2
 800261c:	d104      	bne.n	8002628 <SMBUS_Slave_ISR+0x114>
           (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TCR) != RESET))
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2280      	movs	r2, #128	; 0x80
 8002622:	4013      	ands	r3, r2
  else if ((SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_RXNE) != RESET) ||
 8002624:	d100      	bne.n	8002628 <SMBUS_Slave_ISR+0x114>
 8002626:	e0b8      	b.n	800279a <SMBUS_Slave_ISR+0x286>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262c:	2242      	movs	r2, #66	; 0x42
 800262e:	4013      	ands	r3, r2
 8002630:	2b42      	cmp	r3, #66	; 0x42
 8002632:	d163      	bne.n	80026fc <SMBUS_Slave_ISR+0x1e8>
    {
      /* Read data from RXDR */
      *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002646:	1c5a      	adds	r2, r3, #1
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferSize--;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002650:	3b01      	subs	r3, #1
 8002652:	b29a      	uxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	871a      	strh	r2, [r3, #56]	; 0x38
      hsmbus->XferCount--;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800265c:	b29b      	uxth	r3, r3
 800265e:	3b01      	subs	r3, #1
 8002660:	b29a      	uxth	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	875a      	strh	r2, [r3, #58]	; 0x3a

      if (hsmbus->XferCount == 1U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b01      	cmp	r3, #1
 800266e:	d10f      	bne.n	8002690 <SMBUS_Slave_ISR+0x17c>
      {
        /* Receive last Byte, can be PEC byte in case of PEC BYTE enabled */
        /* or only the last Byte of Transfer */
        /* So reset the RELOAD bit mode */
        hsmbus->XferOptions &= ~SMBUS_RELOAD_MODE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002674:	4a9f      	ldr	r2, [pc, #636]	; (80028f4 <SMBUS_Slave_ISR+0x3e0>)
 8002676:	401a      	ands	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	63da      	str	r2, [r3, #60]	; 0x3c
        SMBUS_TransferConfig(hsmbus, 0, 1, hsmbus->XferOptions, SMBUS_NO_STARTSTOP);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	9200      	str	r2, [sp, #0]
 8002686:	2201      	movs	r2, #1
 8002688:	2100      	movs	r1, #0
 800268a:	f000 fab7 	bl	8002bfc <SMBUS_TransferConfig>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800268e:	e0c3      	b.n	8002818 <SMBUS_Slave_ISR+0x304>
      }
      else if (hsmbus->XferCount == 0U)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <SMBUS_Slave_ISR+0x1b8>
      {
        /* Last Byte is received, disable Interrupt */
        SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	21d4      	movs	r1, #212	; 0xd4
 800269e:	0018      	movs	r0, r3
 80026a0:	f000 f964 	bl	800296c <SMBUS_Disable_IRQ>

        /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_RX, keep only HAL_SMBUS_STATE_LISTEN */
        hsmbus->PreviousState = hsmbus->State;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_RX);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b0:	2242      	movs	r2, #66	; 0x42
 80026b2:	4393      	bics	r3, r2
 80026b4:	001a      	movs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	649a      	str	r2, [r3, #72]	; 0x48

        /* Process Unlocked */
        __HAL_UNLOCK(hsmbus);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2244      	movs	r2, #68	; 0x44
 80026be:	2100      	movs	r1, #0
 80026c0:	5499      	strb	r1, [r3, r2]

        /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
        hsmbus->SlaveRxCpltCallback(hsmbus);
#else
        HAL_SMBUS_SlaveRxCpltCallback(hsmbus);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 fd0f 	bl	80030e8 <HAL_SMBUS_SlaveRxCpltCallback>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80026ca:	e0a5      	b.n	8002818 <SMBUS_Slave_ISR+0x304>
      }
      else
      {
        /* Set Reload for next Bytes */
        SMBUS_TransferConfig(hsmbus, 0, 1,
                             SMBUS_RELOAD_MODE  | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE),
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026d0:	2380      	movs	r3, #128	; 0x80
 80026d2:	04db      	lsls	r3, r3, #19
 80026d4:	4013      	ands	r3, r2
        SMBUS_TransferConfig(hsmbus, 0, 1,
 80026d6:	2280      	movs	r2, #128	; 0x80
 80026d8:	0452      	lsls	r2, r2, #17
 80026da:	4313      	orrs	r3, r2
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	9200      	str	r2, [sp, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	2100      	movs	r1, #0
 80026e6:	f000 fa89 	bl	8002bfc <SMBUS_TransferConfig>
                             SMBUS_NO_STARTSTOP);

        /* Ack last Byte Read */
        hsmbus->Instance->CR2 &= ~I2C_CR2_NACK;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4980      	ldr	r1, [pc, #512]	; (80028f8 <SMBUS_Slave_ISR+0x3e4>)
 80026f6:	400a      	ands	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 80026fa:	e08d      	b.n	8002818 <SMBUS_Slave_ISR+0x304>
      }
    }
    else if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002700:	2232      	movs	r2, #50	; 0x32
 8002702:	4013      	ands	r3, r2
 8002704:	2b32      	cmp	r3, #50	; 0x32
 8002706:	d000      	beq.n	800270a <SMBUS_Slave_ISR+0x1f6>
 8002708:	e086      	b.n	8002818 <SMBUS_Slave_ISR+0x304>
    {
      if ((hsmbus->XferCount != 0U) && (hsmbus->XferSize == 0U))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800270e:	b29b      	uxth	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d100      	bne.n	8002716 <SMBUS_Slave_ISR+0x202>
 8002714:	e080      	b.n	8002818 <SMBUS_Slave_ISR+0x304>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800271a:	2b00      	cmp	r3, #0
 800271c:	d000      	beq.n	8002720 <SMBUS_Slave_ISR+0x20c>
 800271e:	e07b      	b.n	8002818 <SMBUS_Slave_ISR+0x304>
      {
        if (hsmbus->XferCount > MAX_NBYTE_SIZE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002724:	b29b      	uxth	r3, r3
 8002726:	2bff      	cmp	r3, #255	; 0xff
 8002728:	d912      	bls.n	8002750 <SMBUS_Slave_ISR+0x23c>
        {
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
                               (SMBUS_RELOAD_MODE | (hsmbus->XferOptions & SMBUS_SENDPEC_MODE)),
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800272e:	2380      	movs	r3, #128	; 0x80
 8002730:	04db      	lsls	r3, r3, #19
 8002732:	4013      	ands	r3, r2
          SMBUS_TransferConfig(hsmbus, 0, MAX_NBYTE_SIZE,
 8002734:	2280      	movs	r2, #128	; 0x80
 8002736:	0452      	lsls	r2, r2, #17
 8002738:	4313      	orrs	r3, r2
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	9200      	str	r2, [sp, #0]
 8002740:	22ff      	movs	r2, #255	; 0xff
 8002742:	2100      	movs	r1, #0
 8002744:	f000 fa5a 	bl	8002bfc <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          hsmbus->XferSize = MAX_NBYTE_SIZE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	22ff      	movs	r2, #255	; 0xff
 800274c:	871a      	strh	r2, [r3, #56]	; 0x38
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 800274e:	e063      	b.n	8002818 <SMBUS_Slave_ISR+0x304>
        }
        else
        {
          hsmbus->XferSize = hsmbus->XferCount;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	871a      	strh	r2, [r3, #56]	; 0x38
          SMBUS_TransferConfig(hsmbus, 0, (uint8_t)hsmbus->XferSize, hsmbus->XferOptions,
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800275e:	b2da      	uxtb	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	2100      	movs	r1, #0
 8002768:	9100      	str	r1, [sp, #0]
 800276a:	2100      	movs	r1, #0
 800276c:	f000 fa46 	bl	8002bfc <SMBUS_TransferConfig>
                               SMBUS_NO_STARTSTOP);
          /* If PEC mode is enable, size to transmit should be Size-1 byte, corresponding to PEC byte */
          /* PEC byte is automatically sent by HW block, no need to manage it in Transmit process */
          if (SMBUS_GET_PEC_MODE(hsmbus) != 0UL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	04db      	lsls	r3, r3, #19
 800277a:	4013      	ands	r3, r2
 800277c:	d04c      	beq.n	8002818 <SMBUS_Slave_ISR+0x304>
          {
            hsmbus->XferSize--;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	871a      	strh	r2, [r3, #56]	; 0x38
            hsmbus->XferCount--;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	875a      	strh	r2, [r3, #58]	; 0x3a
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8002798:	e03e      	b.n	8002818 <SMBUS_Slave_ISR+0x304>
    else
    {
      /* Nothing to do */
    }
  }
  else if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_TXIS) != RESET)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2202      	movs	r2, #2
 800279e:	4013      	ands	r3, r2
 80027a0:	d03b      	beq.n	800281a <SMBUS_Slave_ISR+0x306>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hsmbus->XferCount > 0U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d017      	beq.n	80027dc <SMBUS_Slave_ISR+0x2c8>
    {
      /* Write data to TXDR */
      hsmbus->Instance->TXDR = *hsmbus->pBuffPtr;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027b0:	781a      	ldrb	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hsmbus->pBuffPtr++;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	635a      	str	r2, [r3, #52]	; 0x34

      hsmbus->XferCount--;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	875a      	strh	r2, [r3, #58]	; 0x3a
      hsmbus->XferSize--;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	871a      	strh	r2, [r3, #56]	; 0x38
    }

    if (hsmbus->XferCount == 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d119      	bne.n	800281a <SMBUS_Slave_ISR+0x306>
    {
      /* Last Byte is Transmitted */
      /* Remove HAL_SMBUS_STATE_SLAVE_BUSY_TX, keep only HAL_SMBUS_STATE_LISTEN */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_TX);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	21f2      	movs	r1, #242	; 0xf2
 80027ea:	0018      	movs	r0, r3
 80027ec:	f000 f8be 	bl	800296c <SMBUS_Disable_IRQ>
      hsmbus->PreviousState = hsmbus->State;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State &= ~((uint32_t)HAL_SMBUS_STATE_SLAVE_BUSY_TX);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027fc:	2232      	movs	r2, #50	; 0x32
 80027fe:	4393      	bics	r3, r2
 8002800:	001a      	movs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2244      	movs	r2, #68	; 0x44
 800280a:	2100      	movs	r1, #0
 800280c:	5499      	strb	r1, [r3, r2]

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->SlaveTxCpltCallback(hsmbus);
#else
      HAL_SMBUS_SlaveTxCpltCallback(hsmbus);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	0018      	movs	r0, r3
 8002812:	f000 fc3f 	bl	8003094 <HAL_SMBUS_SlaveTxCpltCallback>
 8002816:	e000      	b.n	800281a <SMBUS_Slave_ISR+0x306>
    if ((hsmbus->State & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX)
 8002818:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Check if STOPF is set */
  if (SMBUS_CHECK_FLAG(StatusFlags, SMBUS_FLAG_STOPF) != RESET)
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2220      	movs	r2, #32
 800281e:	4013      	ands	r3, r2
 8002820:	d05e      	beq.n	80028e0 <SMBUS_Slave_ISR+0x3cc>
  {
    if ((hsmbus->State & HAL_SMBUS_STATE_LISTEN) == HAL_SMBUS_STATE_LISTEN)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002826:	2208      	movs	r2, #8
 8002828:	4013      	ands	r3, r2
 800282a:	2b08      	cmp	r3, #8
 800282c:	d158      	bne.n	80028e0 <SMBUS_Slave_ISR+0x3cc>
    {
      /* Store Last receive data if any */
      if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_RXNE) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	2204      	movs	r2, #4
 8002836:	4013      	ands	r3, r2
 8002838:	2b04      	cmp	r3, #4
 800283a:	d11c      	bne.n	8002876 <SMBUS_Slave_ISR+0x362>
      {
        /* Read data from RXDR */
        *hsmbus->pBuffPtr = (uint8_t)(hsmbus->Instance->RXDR);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hsmbus->pBuffPtr++;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	635a      	str	r2, [r3, #52]	; 0x34

        if ((hsmbus->XferSize > 0U))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00c      	beq.n	8002876 <SMBUS_Slave_ISR+0x362>
        {
          hsmbus->XferSize--;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	871a      	strh	r2, [r3, #56]	; 0x38
          hsmbus->XferCount--;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	875a      	strh	r2, [r3, #58]	; 0x3a
        }
      }

      /* Disable RX and TX Interrupts */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_RX | SMBUS_IT_TX);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	21f6      	movs	r1, #246	; 0xf6
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f876 	bl	800296c <SMBUS_Disable_IRQ>

      /* Disable ADDR Interrupt */
      SMBUS_Disable_IRQ(hsmbus, SMBUS_IT_ADDR);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2138      	movs	r1, #56	; 0x38
 8002884:	0018      	movs	r0, r3
 8002886:	f000 f871 	bl	800296c <SMBUS_Disable_IRQ>

      /* Disable Address Acknowledge */
      hsmbus->Instance->CR2 |= I2C_CR2_NACK;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	0209      	lsls	r1, r1, #8
 8002898:	430a      	orrs	r2, r1
 800289a:	605a      	str	r2, [r3, #4]

      /* Clear Configuration Register 2 */
      SMBUS_RESET_CR2(hsmbus);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4915      	ldr	r1, [pc, #84]	; (80028fc <SMBUS_Slave_ISR+0x3e8>)
 80028a8:	400a      	ands	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]

      /* Clear STOP Flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_STOPF);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2220      	movs	r2, #32
 80028b2:	61da      	str	r2, [r3, #28]

      /* Clear ADDR flag */
      __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ADDR);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2208      	movs	r2, #8
 80028ba:	61da      	str	r2, [r3, #28]

      hsmbus->XferOptions = 0;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2200      	movs	r2, #0
 80028c0:	63da      	str	r2, [r3, #60]	; 0x3c
      hsmbus->PreviousState = hsmbus->State;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	641a      	str	r2, [r3, #64]	; 0x40
      hsmbus->State = HAL_SMBUS_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	649a      	str	r2, [r3, #72]	; 0x48

      /* Process Unlocked */
      __HAL_UNLOCK(hsmbus);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2244      	movs	r2, #68	; 0x44
 80028d4:	2100      	movs	r1, #0
 80028d6:	5499      	strb	r1, [r3, r2]

      /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
      hsmbus->ListenCpltCallback(hsmbus);
#else
      HAL_SMBUS_ListenCpltCallback(hsmbus);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 ffa6 	bl	800382c <HAL_SMBUS_ListenCpltCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsmbus);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2244      	movs	r2, #68	; 0x44
 80028e4:	2100      	movs	r1, #0
 80028e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	0018      	movs	r0, r3
 80028ec:	46bd      	mov	sp, r7
 80028ee:	b005      	add	sp, #20
 80028f0:	bd90      	pop	{r4, r7, pc}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	feffffff 	.word	0xfeffffff
 80028f8:	ffff7fff 	.word	0xffff7fff
 80028fc:	fe00e800 	.word	0xfe00e800

08002900 <SMBUS_Enable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Enable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2280      	movs	r2, #128	; 0x80
 8002912:	4013      	ands	r3, r2
 8002914:	d003      	beq.n	800291e <SMBUS_Enable_IRQ+0x1e>
  {
    /* Enable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2280      	movs	r2, #128	; 0x80
 800291a:	4313      	orrs	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2238      	movs	r2, #56	; 0x38
 8002922:	4013      	ands	r3, r2
 8002924:	2b38      	cmp	r3, #56	; 0x38
 8002926:	d103      	bne.n	8002930 <SMBUS_Enable_IRQ+0x30>
  {
    /* Enable ADDR, STOP interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_ERRI;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	22b8      	movs	r2, #184	; 0xb8
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	22f2      	movs	r2, #242	; 0xf2
 8002934:	4013      	ands	r3, r2
 8002936:	2bf2      	cmp	r3, #242	; 0xf2
 8002938:	d103      	bne.n	8002942 <SMBUS_Enable_IRQ+0x42>
  {
    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_TXI;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	22f2      	movs	r2, #242	; 0xf2
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	22d4      	movs	r2, #212	; 0xd4
 8002946:	4013      	ands	r3, r2
 8002948:	2bd4      	cmp	r3, #212	; 0xd4
 800294a:	d103      	bne.n	8002954 <SMBUS_Enable_IRQ+0x54>
  {
    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    tmpisr |= SMBUS_IT_ERRI | SMBUS_IT_TCI | SMBUS_IT_STOPI | SMBUS_IT_NACKI | SMBUS_IT_RXI;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	22f4      	movs	r2, #244	; 0xf4
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of SMBUS interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_SMBUS_ENABLE_IT(hsmbus, tmpisr);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6819      	ldr	r1, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	430a      	orrs	r2, r1
 8002962:	601a      	str	r2, [r3, #0]
}
 8002964:	46c0      	nop			; (mov r8, r8)
 8002966:	46bd      	mov	sp, r7
 8002968:	b004      	add	sp, #16
 800296a:	bd80      	pop	{r7, pc}

0800296c <SMBUS_Disable_IRQ>:
  *                the configuration information for the specified SMBUS.
  * @param  InterruptRequest Value of @ref SMBUS_Interrupt_configuration_definition.
  * @retval HAL status
  */
static void SMBUS_Disable_IRQ(SMBUS_HandleTypeDef *hsmbus, uint32_t InterruptRequest)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tmpisr = 0UL;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
  uint32_t tmpstate = hsmbus->State;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800297e:	60bb      	str	r3, [r7, #8]

  if ((tmpstate == HAL_SMBUS_STATE_READY) && ((InterruptRequest & SMBUS_IT_ALERT) == SMBUS_IT_ALERT))
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <SMBUS_Disable_IRQ+0x2a>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2280      	movs	r2, #128	; 0x80
 800298a:	4013      	ands	r3, r2
 800298c:	d003      	beq.n	8002996 <SMBUS_Disable_IRQ+0x2a>
  {
    /* Disable ERR interrupt */
    tmpisr |= SMBUS_IT_ERRI;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2280      	movs	r2, #128	; 0x80
 8002992:	4313      	orrs	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & SMBUS_IT_TX) == SMBUS_IT_TX)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	22f2      	movs	r2, #242	; 0xf2
 800299a:	4013      	ands	r3, r2
 800299c:	2bf2      	cmp	r3, #242	; 0xf2
 800299e:	d11a      	bne.n	80029d6 <SMBUS_Disable_IRQ+0x6a>
  {
    /* Disable TC, STOP, NACK and TXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_TXI;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2242      	movs	r2, #66	; 0x42
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	2380      	movs	r3, #128	; 0x80
 80029b0:	03db      	lsls	r3, r3, #15
 80029b2:	4013      	ands	r3, r2
 80029b4:	d107      	bne.n	80029c6 <SMBUS_Disable_IRQ+0x5a>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	2208      	movs	r2, #8
 80029ba:	4013      	ands	r3, r2
 80029bc:	d103      	bne.n	80029c6 <SMBUS_Disable_IRQ+0x5a>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2280      	movs	r2, #128	; 0x80
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2208      	movs	r2, #8
 80029ca:	4013      	ands	r3, r2
 80029cc:	d103      	bne.n	80029d6 <SMBUS_Disable_IRQ+0x6a>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2230      	movs	r2, #48	; 0x30
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_RX) == SMBUS_IT_RX)
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	22d4      	movs	r2, #212	; 0xd4
 80029da:	4013      	ands	r3, r2
 80029dc:	2bd4      	cmp	r3, #212	; 0xd4
 80029de:	d11a      	bne.n	8002a16 <SMBUS_Disable_IRQ+0xaa>
  {
    /* Disable TC, STOP, NACK and RXI interrupt */
    tmpisr |= SMBUS_IT_TCI | SMBUS_IT_RXI;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2244      	movs	r2, #68	; 0x44
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

    if ((SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	2380      	movs	r3, #128	; 0x80
 80029f0:	03db      	lsls	r3, r3, #15
 80029f2:	4013      	ands	r3, r2
 80029f4:	d107      	bne.n	8002a06 <SMBUS_Disable_IRQ+0x9a>
        && ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN))
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2208      	movs	r2, #8
 80029fa:	4013      	ands	r3, r2
 80029fc:	d103      	bne.n	8002a06 <SMBUS_Disable_IRQ+0x9a>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2280      	movs	r2, #128	; 0x80
 8002a02:	4313      	orrs	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
    }

    if ((tmpstate & HAL_SMBUS_STATE_LISTEN) != HAL_SMBUS_STATE_LISTEN)
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2208      	movs	r2, #8
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d103      	bne.n	8002a16 <SMBUS_Disable_IRQ+0xaa>
    {
      /* Disable STOP and NACK interrupt */
      tmpisr |= SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2230      	movs	r2, #48	; 0x30
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & SMBUS_IT_ADDR) == SMBUS_IT_ADDR)
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2238      	movs	r2, #56	; 0x38
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b38      	cmp	r3, #56	; 0x38
 8002a1e:	d10e      	bne.n	8002a3e <SMBUS_Disable_IRQ+0xd2>
  {
    /* Disable ADDR, STOP and NACK interrupt */
    tmpisr |= SMBUS_IT_ADDRI | SMBUS_IT_STOPI | SMBUS_IT_NACKI;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2238      	movs	r2, #56	; 0x38
 8002a24:	4313      	orrs	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]

    if (SMBUS_GET_ALERT_ENABLED(hsmbus) == 0UL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	03db      	lsls	r3, r3, #15
 8002a32:	4013      	ands	r3, r2
 8002a34:	d103      	bne.n	8002a3e <SMBUS_Disable_IRQ+0xd2>
    {
      /* Disable ERR interrupt */
      tmpisr |= SMBUS_IT_ERRI;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2280      	movs	r2, #128	; 0x80
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_SMBUS_DISABLE_IT(hsmbus, tmpisr);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
}
 8002a50:	46c0      	nop			; (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b004      	add	sp, #16
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <SMBUS_ITErrorHandler>:
  * @brief  SMBUS interrupts error handler.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_ITErrorHandler(SMBUS_HandleTypeDef *hsmbus)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hsmbus->Instance->ISR);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	699b      	ldr	r3, [r3, #24]
 8002a66:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hsmbus->Instance->CR1);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpstate;
  uint32_t tmperror;

  /* SMBUS Bus error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	2380      	movs	r3, #128	; 0x80
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	4013      	ands	r3, r2
 8002a78:	d00e      	beq.n	8002a98 <SMBUS_ITErrorHandler+0x40>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2280      	movs	r2, #128	; 0x80
 8002a7e:	4013      	ands	r3, r2
  if (((itflags & SMBUS_FLAG_BERR) == SMBUS_FLAG_BERR) && \
 8002a80:	d00a      	beq.n	8002a98 <SMBUS_ITErrorHandler+0x40>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BERR;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a86:	2201      	movs	r2, #1
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear BERR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_BERR);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2280      	movs	r2, #128	; 0x80
 8002a94:	0052      	lsls	r2, r2, #1
 8002a96:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d00e      	beq.n	8002ac0 <SMBUS_ITErrorHandler+0x68>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	2280      	movs	r2, #128	; 0x80
 8002aa6:	4013      	ands	r3, r2
  if (((itflags & SMBUS_FLAG_OVR) == SMBUS_FLAG_OVR) && \
 8002aa8:	d00a      	beq.n	8002ac0 <SMBUS_ITErrorHandler+0x68>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_OVR;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	2208      	movs	r2, #8
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear OVR flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_OVR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	00d2      	lsls	r2, r2, #3
 8002abe:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Arbitration Loss error interrupt occurred ------------------------------------*/
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	2380      	movs	r3, #128	; 0x80
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d00e      	beq.n	8002ae8 <SMBUS_ITErrorHandler+0x90>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	2280      	movs	r2, #128	; 0x80
 8002ace:	4013      	ands	r3, r2
  if (((itflags & SMBUS_FLAG_ARLO) == SMBUS_FLAG_ARLO) && \
 8002ad0:	d00a      	beq.n	8002ae8 <SMBUS_ITErrorHandler+0x90>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ARLO;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ARLO flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ARLO);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2280      	movs	r2, #128	; 0x80
 8002ae4:	0092      	lsls	r2, r2, #2
 8002ae6:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Timeout error interrupt occurred ---------------------------------------------*/
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	015b      	lsls	r3, r3, #5
 8002aee:	4013      	ands	r3, r2
 8002af0:	d00e      	beq.n	8002b10 <SMBUS_ITErrorHandler+0xb8>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	2280      	movs	r2, #128	; 0x80
 8002af6:	4013      	ands	r3, r2
  if (((itflags & SMBUS_FLAG_TIMEOUT) == SMBUS_FLAG_TIMEOUT) && \
 8002af8:	d00a      	beq.n	8002b10 <SMBUS_ITErrorHandler+0xb8>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_BUSTIMEOUT;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	2220      	movs	r2, #32
 8002b00:	431a      	orrs	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear TIMEOUT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TIMEOUT);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	0152      	lsls	r2, r2, #5
 8002b0e:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Alert error interrupt occurred -----------------------------------------------*/
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	2380      	movs	r3, #128	; 0x80
 8002b14:	019b      	lsls	r3, r3, #6
 8002b16:	4013      	ands	r3, r2
 8002b18:	d00e      	beq.n	8002b38 <SMBUS_ITErrorHandler+0xe0>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	2280      	movs	r2, #128	; 0x80
 8002b1e:	4013      	ands	r3, r2
  if (((itflags & SMBUS_FLAG_ALERT) == SMBUS_FLAG_ALERT) && \
 8002b20:	d00a      	beq.n	8002b38 <SMBUS_ITErrorHandler+0xe0>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_ALERT;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b26:	2240      	movs	r2, #64	; 0x40
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear ALERT flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_ALERT);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	0192      	lsls	r2, r2, #6
 8002b36:	61da      	str	r2, [r3, #28]
  }

  /* SMBUS Packet Error Check error interrupt occurred ----------------------------------*/
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	4013      	ands	r3, r2
 8002b40:	d00e      	beq.n	8002b60 <SMBUS_ITErrorHandler+0x108>
      ((itsources & SMBUS_IT_ERRI) == SMBUS_IT_ERRI))
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2280      	movs	r2, #128	; 0x80
 8002b46:	4013      	ands	r3, r2
  if (((itflags & SMBUS_FLAG_PECERR) == SMBUS_FLAG_PECERR) && \
 8002b48:	d00a      	beq.n	8002b60 <SMBUS_ITErrorHandler+0x108>
  {
    hsmbus->ErrorCode |= HAL_SMBUS_ERROR_PECERR;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Clear PEC error flag */
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_PECERR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2280      	movs	r2, #128	; 0x80
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	61da      	str	r2, [r3, #28]
  }

  /* Flush TX register */
  SMBUS_Flush_TXDR(hsmbus);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 f828 	bl	8002bb8 <SMBUS_Flush_TXDR>

  /* Store current volatile hsmbus->ErrorCode, misra rule */
  tmperror = hsmbus->ErrorCode;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror != HAL_SMBUS_ERROR_NONE) && (tmperror != HAL_SMBUS_ERROR_ACKF))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d01d      	beq.n	8002bb0 <SMBUS_ITErrorHandler+0x158>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d01a      	beq.n	8002bb0 <SMBUS_ITErrorHandler+0x158>
  {
    /* Do not Reset the HAL state in case of ALERT error */
    if ((tmperror & HAL_SMBUS_ERROR_ALERT) != HAL_SMBUS_ERROR_ALERT)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d112      	bne.n	8002ba8 <SMBUS_ITErrorHandler+0x150>
    {
      /* Store current volatile hsmbus->State, misra rule */
      tmpstate = hsmbus->State;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b86:	60bb      	str	r3, [r7, #8]

      if (((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_TX) == HAL_SMBUS_STATE_SLAVE_BUSY_TX)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2232      	movs	r2, #50	; 0x32
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b32      	cmp	r3, #50	; 0x32
 8002b90:	d004      	beq.n	8002b9c <SMBUS_ITErrorHandler+0x144>
          || ((tmpstate & HAL_SMBUS_STATE_SLAVE_BUSY_RX) == HAL_SMBUS_STATE_SLAVE_BUSY_RX))
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	2242      	movs	r2, #66	; 0x42
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b42      	cmp	r3, #66	; 0x42
 8002b9a:	d105      	bne.n	8002ba8 <SMBUS_ITErrorHandler+0x150>
      {
        /* Reset only HAL_SMBUS_STATE_SLAVE_BUSY_XX */
        /* keep HAL_SMBUS_STATE_LISTEN if set */
        hsmbus->PreviousState = HAL_SMBUS_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40
        hsmbus->State = HAL_SMBUS_STATE_LISTEN;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2208      	movs	r2, #8
 8002ba6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Call the Error callback to inform upper layer */
#if (USE_HAL_SMBUS_REGISTER_CALLBACKS == 1)
    hsmbus->ErrorCallback(hsmbus);
#else
    HAL_SMBUS_ErrorCallback(hsmbus);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 feb0 	bl	8003910 <HAL_SMBUS_ErrorCallback>
#endif /* USE_HAL_SMBUS_REGISTER_CALLBACKS */
  }
}
 8002bb0:	46c0      	nop			; (mov r8, r8)
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b006      	add	sp, #24
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <SMBUS_Flush_TXDR>:
  * @brief  SMBUS Tx data register flush process.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_Flush_TXDR(SMBUS_HandleTypeDef *hsmbus)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TXIS) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d103      	bne.n	8002bd6 <SMBUS_Flush_TXDR+0x1e>
  {
    hsmbus->Instance->TXDR = 0x00U;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_SMBUS_GET_FLAG(hsmbus, SMBUS_FLAG_TXE) == RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d007      	beq.n	8002bf4 <SMBUS_Flush_TXDR+0x3c>
  {
    __HAL_SMBUS_CLEAR_FLAG(hsmbus, SMBUS_FLAG_TXE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2101      	movs	r1, #1
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	619a      	str	r2, [r3, #24]
  }
}
 8002bf4:	46c0      	nop			; (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b002      	add	sp, #8
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <SMBUS_TransferConfig>:
  *     @arg @ref SMBUS_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void SMBUS_TransferConfig(SMBUS_HandleTypeDef *hsmbus,  uint16_t DevAddress, uint8_t Size,
                                 uint32_t Mode, uint32_t Request)
{
 8002bfc:	b590      	push	{r4, r7, lr}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	0008      	movs	r0, r1
 8002c06:	0011      	movs	r1, r2
 8002c08:	607b      	str	r3, [r7, #4]
 8002c0a:	240a      	movs	r4, #10
 8002c0c:	193b      	adds	r3, r7, r4
 8002c0e:	1c02      	adds	r2, r0, #0
 8002c10:	801a      	strh	r2, [r3, #0]
 8002c12:	2009      	movs	r0, #9
 8002c14:	183b      	adds	r3, r7, r0
 8002c16:	1c0a      	adds	r2, r1, #0
 8002c18:	701a      	strb	r2, [r3, #0]
  assert_param(IS_SMBUS_ALL_INSTANCE(hsmbus->Instance));
  assert_param(IS_SMBUS_TRANSFER_MODE(Mode));
  assert_param(IS_SMBUS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hsmbus->Instance->CR2,
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	6a3a      	ldr	r2, [r7, #32]
 8002c22:	0d51      	lsrs	r1, r2, #21
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	00d2      	lsls	r2, r2, #3
 8002c28:	400a      	ands	r2, r1
 8002c2a:	490e      	ldr	r1, [pc, #56]	; (8002c64 <SMBUS_TransferConfig+0x68>)
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	43d2      	mvns	r2, r2
 8002c30:	401a      	ands	r2, r3
 8002c32:	0011      	movs	r1, r2
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	881b      	ldrh	r3, [r3, #0]
 8002c38:	059b      	lsls	r3, r3, #22
 8002c3a:	0d9a      	lsrs	r2, r3, #22
 8002c3c:	183b      	adds	r3, r7, r0
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	0418      	lsls	r0, r3, #16
 8002c42:	23ff      	movs	r3, #255	; 0xff
 8002c44:	041b      	lsls	r3, r3, #16
 8002c46:	4003      	ands	r3, r0
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31UL - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP | I2C_CR2_PECBYTE)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b005      	add	sp, #20
 8002c60:	bd90      	pop	{r4, r7, pc}
 8002c62:	46c0      	nop			; (mov r8, r8)
 8002c64:	07ff63ff 	.word	0x07ff63ff

08002c68 <SMBUS_ConvertOtherXferOptions>:
  * @brief  Convert SMBUSx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hsmbus SMBUS handle.
  * @retval None
  */
static void SMBUS_ConvertOtherXferOptions(SMBUS_HandleTypeDef *hsmbus)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to SMBUS_OTHER_FRAME_NO_PEC   */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to SMBUS_FIRST_FRAME                  */
  if (hsmbus->XferOptions == SMBUS_OTHER_FRAME_NO_PEC)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	2baa      	cmp	r3, #170	; 0xaa
 8002c76:	d103      	bne.n	8002c80 <SMBUS_ConvertOtherXferOptions+0x18>
  {
    hsmbus->XferOptions = SMBUS_FIRST_FRAME;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c7e:	e01f      	b.n	8002cc0 <SMBUS_ConvertOtherXferOptions+0x58>
  else if (hsmbus->XferOptions == SMBUS_OTHER_FRAME_WITH_PEC)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c84:	23aa      	movs	r3, #170	; 0xaa
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d104      	bne.n	8002c96 <SMBUS_ConvertOtherXferOptions+0x2e>
    hsmbus->XferOptions = SMBUS_FIRST_FRAME | SMBUS_SENDPEC_MODE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	04d2      	lsls	r2, r2, #19
 8002c92:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002c94:	e014      	b.n	8002cc0 <SMBUS_ConvertOtherXferOptions+0x58>
  else if (hsmbus->XferOptions == SMBUS_OTHER_AND_LAST_FRAME_NO_PEC)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c9a:	23aa      	movs	r3, #170	; 0xaa
 8002c9c:	041b      	lsls	r3, r3, #16
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d104      	bne.n	8002cac <SMBUS_ConvertOtherXferOptions+0x44>
    hsmbus->XferOptions = SMBUS_FIRST_AND_LAST_FRAME_NO_PEC;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	0492      	lsls	r2, r2, #18
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002caa:	e009      	b.n	8002cc0 <SMBUS_ConvertOtherXferOptions+0x58>
  else if (hsmbus->XferOptions == SMBUS_OTHER_AND_LAST_FRAME_WITH_PEC)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb0:	23aa      	movs	r3, #170	; 0xaa
 8002cb2:	061b      	lsls	r3, r3, #24
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d103      	bne.n	8002cc0 <SMBUS_ConvertOtherXferOptions+0x58>
    hsmbus->XferOptions = SMBUS_FIRST_AND_LAST_FRAME_WITH_PEC;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	22c0      	movs	r2, #192	; 0xc0
 8002cbc:	04d2      	lsls	r2, r2, #19
 8002cbe:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <STACK_SMBUS_LocateCommand>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void STACK_SMBUS_LocateCommand( SMBUS_StackHandleTypeDef *pStackContext )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b086      	sub	sp, #24
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint8_t       commandCode = pStackContext->Buffer[0];
 8002cd0:	200f      	movs	r0, #15
 8002cd2:	183b      	adds	r3, r7, r0
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	2123      	movs	r1, #35	; 0x23
 8002cd8:	5c52      	ldrb	r2, [r2, r1]
 8002cda:	701a      	strb	r2, [r3, #0]
    STACK_SMBUS_LocateCommandARP( pStackContext, commandCode );
  }
  else
#endif /* ARP treatment */

    if (commandCode == PMBC_PMBUS_COMMAND_EXT)
 8002cdc:	183b      	adds	r3, r7, r0
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2bff      	cmp	r3, #255	; 0xff
 8002ce2:	d103      	bne.n	8002cec <STACK_SMBUS_LocateCommand+0x24>
    {
      /*
        May not be exactly read byte, but the stack cannot know for sure
       */
      pStackContext->CurrentCommand = (st_command_t *)&EXTENDED_READ_BYTE;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a1f      	ldr	r2, [pc, #124]	; (8002d64 <STACK_SMBUS_LocateCommand+0x9c>)
 8002ce8:	60da      	str	r2, [r3, #12]
 8002cea:	e037      	b.n	8002d5c <STACK_SMBUS_LocateCommand+0x94>
#ifdef DENSE_CMD_TBL

      /*
        initializing the command code search - the table must have all commands sorted, but there may be gaps
       */
      low = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
      top = pStackContext->CMD_tableSize - 1U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	613b      	str	r3, [r7, #16]
      pStackContext->CurrentCommand = NULL;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]

      while ( top >= low )
 8002cfe:	e029      	b.n	8002d54 <STACK_SMBUS_LocateCommand+0x8c>
      {
        /*
          Pick interval half
         */
        current = ( low + top ) >> 1U;
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	18d3      	adds	r3, r2, r3
 8002d06:	085b      	lsrs	r3, r3, #1
 8002d08:	60bb      	str	r3, [r7, #8]
        if (pStackContext->CMD_table[current].cmnd_code == commandCode)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	691a      	ldr	r2, [r3, #16]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	18d3      	adds	r3, r2, r3
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	220f      	movs	r2, #15
 8002d18:	18ba      	adds	r2, r7, r2
 8002d1a:	7812      	ldrb	r2, [r2, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d107      	bne.n	8002d30 <STACK_SMBUS_LocateCommand+0x68>
        {
          /*
            we have found our command
           */
          pStackContext->CurrentCommand = &(pStackContext->CMD_table[current]);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	18d2      	adds	r2, r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	60da      	str	r2, [r3, #12]
          return;
 8002d2e:	e015      	b.n	8002d5c <STACK_SMBUS_LocateCommand+0x94>
        }
        else if (pStackContext->CMD_table[current].cmnd_code < commandCode)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	18d3      	adds	r3, r2, r3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	220f      	movs	r2, #15
 8002d3e:	18ba      	adds	r2, r7, r2
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d903      	bls.n	8002d4e <STACK_SMBUS_LocateCommand+0x86>
        {
          /*
            Look at upper half
          */
          low = current + 1U;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	e002      	b.n	8002d54 <STACK_SMBUS_LocateCommand+0x8c>
        }
        else
        {
          top = current - 1U;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	613b      	str	r3, [r7, #16]
      while ( top >= low )
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d2d1      	bcs.n	8002d00 <STACK_SMBUS_LocateCommand+0x38>
      {
        pStackContext->CurrentCommand = NULL;
      }
#endif /* DENSE_CMD_TBL */
    }
}
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b006      	add	sp, #24
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	08003fd8 	.word	0x08003fd8

08002d68 <STACK_PMBUS_MasterZoneReadStatusCont>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the context information for the specified SMBUS stack.
  * @retval HAL_StatusTypeDef response code. STACK_OK if success, any other value means problem
  */
HAL_StatusTypeDef STACK_PMBUS_MasterZoneReadStatusCont(SMBUS_StackHandleTypeDef *pStackContext)
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef     result = STACK_ERROR;
 8002d70:	210f      	movs	r1, #15
 8002d72:	187b      	adds	r3, r7, r1
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]

  result = HAL_SMBUS_Master_Receive_IT( pStackContext->Device, SMBUS_ADDR_ZONE_READ, pStackContext->Buffer, 2U,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6858      	ldr	r0, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3323      	adds	r3, #35	; 0x23
 8002d80:	001a      	movs	r2, r3
 8002d82:	000d      	movs	r5, r1
 8002d84:	187c      	adds	r4, r7, r1
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <STACK_PMBUS_MasterZoneReadStatusCont+0x54>)
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	2150      	movs	r1, #80	; 0x50
 8002d8e:	f7fe feb7 	bl	8001b00 <HAL_SMBUS_Master_Receive_IT>
 8002d92:	0003      	movs	r3, r0
 8002d94:	7023      	strb	r3, [r4, #0]
                                        SMBUS_OTHER_FRAME );
  if (result != HAL_OK )
 8002d96:	197b      	adds	r3, r7, r5
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d006      	beq.n	8002dac <STACK_PMBUS_MasterZoneReadStatusCont+0x44>
  {
    pStackContext->StateMachine |= SMBUS_SMS_ERROR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	0092      	lsls	r2, r2, #2
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	601a      	str	r2, [r3, #0]
  }
  return result;
 8002dac:	230f      	movs	r3, #15
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	781b      	ldrb	r3, [r3, #0]
}
 8002db2:	0018      	movs	r0, r3
 8002db4:	46bd      	mov	sp, r7
 8002db6:	b004      	add	sp, #16
 8002db8:	bdb0      	pop	{r4, r5, r7, pc}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	12341234 	.word	0x12341234

08002dc0 <STACK_PMBUS_ZoneReadCallback>:
  *                the context information for the specified SMBUS stack.
  * @param  number : Indicates if this command header, or read request
  * @retval HAL_StatusTypeDef response code. STACK_OK if success, any other value means problem
  */
__weak HAL_StatusTypeDef STACK_PMBUS_ZoneReadCallback( SMBUS_StackHandleTypeDef *pStackContext, uint8_t number )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	000a      	movs	r2, r1
 8002dca:	1cfb      	adds	r3, r7, #3
 8002dcc:	701a      	strb	r2, [r3, #0]
  uint8_t ccc, mask;

  if ( number == 1U )
 8002dce:	1cfb      	adds	r3, r7, #3
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d10c      	bne.n	8002df0 <STACK_PMBUS_ZoneReadCallback+0x30>
  {
    /* Command just received, here the device should read COMMAND CONTROL CODE and Mask*/
    ccc = pStackContext->Buffer[0];
 8002dd6:	230f      	movs	r3, #15
 8002dd8:	18fb      	adds	r3, r7, r3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	2123      	movs	r1, #35	; 0x23
 8002dde:	5c52      	ldrb	r2, [r2, r1]
 8002de0:	701a      	strb	r2, [r3, #0]
    mask =  pStackContext->Buffer[1];
 8002de2:	230e      	movs	r3, #14
 8002de4:	18fb      	adds	r3, r7, r3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	2124      	movs	r1, #36	; 0x24
 8002dea:	5c52      	ldrb	r2, [r2, r1]
 8002dec:	701a      	strb	r2, [r3, #0]
 8002dee:	e009      	b.n	8002e04 <STACK_PMBUS_ZoneReadCallback+0x44>
    NOT_USED(mask);
  }
  else
  {
    /* Read phase of the Zone read - arbitarry number returned by example*/
    pStackContext->Buffer[1] = 0xA5U;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2224      	movs	r2, #36	; 0x24
 8002df4:	21a5      	movs	r1, #165	; 0xa5
 8002df6:	5499      	strb	r1, [r3, r2]
    pStackContext->Buffer[2] = pStackContext->OwnAddress;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	5c99      	ldrb	r1, [r3, r2]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2225      	movs	r2, #37	; 0x25
 8002e02:	5499      	strb	r1, [r3, r2]
  }

  /*
    Returning zero means no problem with execution, if reply is expected, then it must be placed to the IO buffer
   */
  return STACK_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	0018      	movs	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	b004      	add	sp, #16
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <STACK_SMBUS_ResolveContext>:
  * @param  hsmbus : Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval Pointer to relevant stack instance.
  */
SMBUS_StackHandleTypeDef *STACK_SMBUS_ResolveContext( SMBUS_HandleTypeDef *hsmbus )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  SMBUS_StackHandleTypeDef *pSelected = NULL;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60fb      	str	r3, [r7, #12]
  uint32_t index = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60bb      	str	r3, [r7, #8]
  {
    /*
      The loop is searching for the first stack context instance initialized to
      use the actual HAL Driver handle
     */
    pSelected = SMBUSInstancesList[index];
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <STACK_SMBUS_ResolveContext+0x44>)
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	0092      	lsls	r2, r2, #2
 8002e26:	58d3      	ldr	r3, [r2, r3]
 8002e28:	60fb      	str	r3, [r7, #12]
    if  ( pSelected->Device != hsmbus )
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d001      	beq.n	8002e38 <STACK_SMBUS_ResolveContext+0x28>
    {
      pSelected = NULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
    }
    index++;
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	60bb      	str	r3, [r7, #8]
  } while ((index < SMBUS_INSTANCES_COUNT ) && ( pSelected == NULL ));
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d802      	bhi.n	8002e4a <STACK_SMBUS_ResolveContext+0x3a>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0ea      	beq.n	8002e20 <STACK_SMBUS_ResolveContext+0x10>

  /*
    Error - no identified stack instance
   */
  return pSelected;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
}
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	b004      	add	sp, #16
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000088 	.word	0x20000088

08002e58 <HAL_SMBUS_MasterTxCpltCallback>:
  * @param  hsmbus : Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_MasterTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	6078      	str	r0, [r7, #4]
  uint16_t              size;

  /*
    Resolve which stack serves the port that initiated callback
   */
  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f7ff ffd4 	bl	8002e10 <STACK_SMBUS_ResolveContext>
 8002e68:	0003      	movs	r3, r0
 8002e6a:	60bb      	str	r3, [r7, #8]

  /* Transmission phase is completed */
  pStackContext->StateMachine &= ~SMBUS_SMS_TRANSMIT;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2202      	movs	r2, #2
 8002e72:	4393      	bics	r3, r2
 8002e74:	001a      	movs	r2, r3
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	601a      	str	r2, [r3, #0]
  */

#ifdef PMBUS13
  /* If this is a READ_ZONE, then it gets special treatment.
    Only simple status read is supported in this example */
  if ( pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	8bdb      	ldrh	r3, [r3, #30]
 8002e7e:	2b50      	cmp	r3, #80	; 0x50
 8002e80:	d104      	bne.n	8002e8c <HAL_SMBUS_MasterTxCpltCallback+0x34>
  {
    /* Requesting next response */
    STACK_PMBUS_MasterZoneReadStatusCont(pStackContext);
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f7ff ff6f 	bl	8002d68 <STACK_PMBUS_MasterZoneReadStatusCont>
    return;
 8002e8a:	e06d      	b.n	8002f68 <HAL_SMBUS_MasterTxCpltCallback+0x110>
  /*
   Is there data to receive after transfer?
   check if the command includes reading phase and if application that invoked
   the command cared for receiving data from the slave
  */
  if ( pStackContext->CurrentCommand != 0U )
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d065      	beq.n	8002f60 <HAL_SMBUS_MasterTxCpltCallback+0x108>
  {
    if (
      ( ( pStackContext->CurrentCommand->cmnd_query & BLOCK ) == BLOCK ) && \
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	785b      	ldrb	r3, [r3, #1]
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	4013      	ands	r3, r2
    if (
 8002ea0:	d01f      	beq.n	8002ee2 <HAL_SMBUS_MasterTxCpltCallback+0x8a>
      (
        ( ( pStackContext->CurrentCommand->cmnd_query & PROCESS_CALL ) == PROCESS_CALL ) || \
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	785b      	ldrb	r3, [r3, #1]
 8002ea8:	b25b      	sxtb	r3, r3
      ( ( pStackContext->CurrentCommand->cmnd_query & BLOCK ) == BLOCK ) && \
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	db06      	blt.n	8002ebc <HAL_SMBUS_MasterTxCpltCallback+0x64>
        ( ( pStackContext->OpMode & READ ) == READ )
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2221      	movs	r2, #33	; 0x21
 8002eb2:	5c9b      	ldrb	r3, [r3, r2]
 8002eb4:	001a      	movs	r2, r3
 8002eb6:	2320      	movs	r3, #32
 8002eb8:	4013      	ands	r3, r2
        ( ( pStackContext->CurrentCommand->cmnd_query & PROCESS_CALL ) == PROCESS_CALL ) || \
 8002eba:	d012      	beq.n	8002ee2 <HAL_SMBUS_MasterTxCpltCallback+0x8a>
    )
    {
      /*
        the amount of data to be read is yet to be sent by the slave - reading the byte count now:
      */
      pStackContext->StateMachine |= SMBUS_SMS_RECEIVE | SMBUS_SMS_PROCESSING;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	220c      	movs	r2, #12
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	601a      	str	r2, [r3, #0]
      HAL_SMBUS_Master_Receive_IT( hsmbus, pStackContext->SlaveAddress, &(pStackContext->Buffer[1]), 1U, SMBUS_NEXT_FRAME );
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	8bd9      	ldrh	r1, [r3, #30]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	3324      	adds	r3, #36	; 0x24
 8002ed0:	001a      	movs	r2, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	2380      	movs	r3, #128	; 0x80
 8002ed6:	045b      	lsls	r3, r3, #17
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	2301      	movs	r3, #1
 8002edc:	f7fe fe10 	bl	8001b00 <HAL_SMBUS_Master_Receive_IT>
 8002ee0:	e042      	b.n	8002f68 <HAL_SMBUS_MasterTxCpltCallback+0x110>
    }
    else if ((pStackContext->CurrentCommand->cmnd_master_Rx_size > 0U ) && (( pStackContext->OpMode & WRITE ) == 0U ))
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	78db      	ldrb	r3, [r3, #3]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d034      	beq.n	8002f56 <HAL_SMBUS_MasterTxCpltCallback+0xfe>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2221      	movs	r2, #33	; 0x21
 8002ef0:	5c9b      	ldrb	r3, [r3, r2]
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	2340      	movs	r3, #64	; 0x40
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d12d      	bne.n	8002f56 <HAL_SMBUS_MasterTxCpltCallback+0xfe>
    {
      /*
        the amount of data to be read is known and determined by the command code
      */
      pStackContext->StateMachine |= SMBUS_SMS_RECEIVE;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2204      	movs	r2, #4
 8002f00:	431a      	orrs	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	601a      	str	r2, [r3, #0]
      size = pStackContext->CurrentCommand->cmnd_master_Rx_size;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	78da      	ldrb	r2, [r3, #3]
 8002f0c:	210e      	movs	r1, #14
 8002f0e:	187b      	adds	r3, r7, r1
 8002f10:	801a      	strh	r2, [r3, #0]
      if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	04db      	lsls	r3, r3, #19
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d004      	beq.n	8002f28 <HAL_SMBUS_MasterTxCpltCallback+0xd0>
      {
        size += 1U;
 8002f1e:	187b      	adds	r3, r7, r1
 8002f20:	187a      	adds	r2, r7, r1
 8002f22:	8812      	ldrh	r2, [r2, #0]
 8002f24:	3201      	adds	r2, #1
 8002f26:	801a      	strh	r2, [r3, #0]
      }
      HAL_SMBUS_Master_Receive_IT( hsmbus, pStackContext->SlaveAddress, &(pStackContext->Buffer[1]), size,
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	8bd9      	ldrh	r1, [r3, #30]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	3324      	adds	r3, #36	; 0x24
 8002f30:	001c      	movs	r4, r3
                                   SMBUS_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ));
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	04db      	lsls	r3, r3, #19
 8002f3a:	4013      	ands	r3, r2
      HAL_SMBUS_Master_Receive_IT( hsmbus, pStackContext->SlaveAddress, &(pStackContext->Buffer[1]), size,
 8002f3c:	2280      	movs	r2, #128	; 0x80
 8002f3e:	0492      	lsls	r2, r2, #18
 8002f40:	4313      	orrs	r3, r2
 8002f42:	220e      	movs	r2, #14
 8002f44:	18ba      	adds	r2, r7, r2
 8002f46:	8812      	ldrh	r2, [r2, #0]
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	0013      	movs	r3, r2
 8002f4e:	0022      	movs	r2, r4
 8002f50:	f7fe fdd6 	bl	8001b00 <HAL_SMBUS_Master_Receive_IT>
 8002f54:	e008      	b.n	8002f68 <HAL_SMBUS_MasterTxCpltCallback+0x110>
    else
    {
      /*
        There was an alert during command that we could not treat before
       */
      STACK_SMBUS_ReadyIfNoAlert( pStackContext );
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	0018      	movs	r0, r3
 8002f5a:	f000 fe63 	bl	8003c24 <STACK_SMBUS_ReadyIfNoAlert>
 8002f5e:	e003      	b.n	8002f68 <HAL_SMBUS_MasterTxCpltCallback+0x110>
  else
  {
    /*
      There was an alert during command that we could not treat before
     */
    STACK_SMBUS_ReadyIfNoAlert( pStackContext );
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 fe5e 	bl	8003c24 <STACK_SMBUS_ReadyIfNoAlert>
  }
}
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	b005      	add	sp, #20
 8002f6c:	bd90      	pop	{r4, r7, pc}

08002f6e <HAL_SMBUS_MasterRxCpltCallback>:
  * @param  hsmbus : Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_MasterRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8002f6e:	b5b0      	push	{r4, r5, r7, lr}
 8002f70:	b086      	sub	sp, #24
 8002f72:	af02      	add	r7, sp, #8
 8002f74:	6078      	str	r0, [r7, #4]
  uint8_t            size;

  /*
    Resolve which stack serves the port that initiated callback
   */
  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f7ff ff49 	bl	8002e10 <STACK_SMBUS_ResolveContext>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	60bb      	str	r3, [r7, #8]

#ifdef PMBUS13
  /* If this is a READ_ZONE, then it gets special treatment.
    Only simple status read is supported in this example */
  if ( pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	8bdb      	ldrh	r3, [r3, #30]
 8002f86:	2b50      	cmp	r3, #80	; 0x50
 8002f88:	d112      	bne.n	8002fb0 <HAL_SMBUS_MasterRxCpltCallback+0x42>
  {
    /* Fail-safe stopping the Zone Read on empty answer */
    if ( pStackContext->Buffer[0] != 0xFFU )
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2223      	movs	r2, #35	; 0x23
 8002f8e:	5c9b      	ldrb	r3, [r3, r2]
 8002f90:	2bff      	cmp	r3, #255	; 0xff
 8002f92:	d008      	beq.n	8002fa6 <HAL_SMBUS_MasterRxCpltCallback+0x38>
    {
      pStackContext->Device->PreviousState = HAL_SMBUS_STATE_MASTER_BUSY_TX;
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2212      	movs	r2, #18
 8002f9a:	641a      	str	r2, [r3, #64]	; 0x40
      STACK_PMBUS_MasterZoneReadStatusCont(pStackContext);
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f7ff fee2 	bl	8002d68 <STACK_PMBUS_MasterZoneReadStatusCont>
      /*
        There could be an alert during command that we could not treat before
      */
      STACK_SMBUS_ReadyIfNoAlert( pStackContext );
    }
    return;
 8002fa4:	e072      	b.n	800308c <HAL_SMBUS_MasterRxCpltCallback+0x11e>
      STACK_SMBUS_ReadyIfNoAlert( pStackContext );
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0018      	movs	r0, r3
 8002faa:	f000 fe3b 	bl	8003c24 <STACK_SMBUS_ReadyIfNoAlert>
    return;
 8002fae:	e06d      	b.n	800308c <HAL_SMBUS_MasterRxCpltCallback+0x11e>
  }
#endif

  if (( pStackContext->StateMachine & SMBUS_SMS_RECEIVE ) == SMBUS_SMS_RECEIVE )
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d061      	beq.n	800307e <HAL_SMBUS_MasterRxCpltCallback+0x110>
  {
    /*
      Reception completed
     */
    pStackContext->StateMachine &= ~SMBUS_SMS_RECEIVE;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	601a      	str	r2, [r3, #0]

    /*
      A case of block transfer follow-up follows
     */
    if (
      (( pStackContext->CurrentCommand->cmnd_query & BLOCK ) == BLOCK ) &&
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	785b      	ldrb	r3, [r3, #1]
 8002fce:	001a      	movs	r2, r3
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	4013      	ands	r3, r2
    if (
 8002fd4:	d04e      	beq.n	8003074 <HAL_SMBUS_MasterRxCpltCallback+0x106>
      (( pStackContext->StateMachine & SMBUS_SMS_PROCESSING ) == SMBUS_SMS_PROCESSING)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2208      	movs	r2, #8
 8002fdc:	4013      	ands	r3, r2
      (( pStackContext->CurrentCommand->cmnd_query & BLOCK ) == BLOCK ) &&
 8002fde:	d049      	beq.n	8003074 <HAL_SMBUS_MasterRxCpltCallback+0x106>
    {
      /*
        the amount of data to be read was sent by the slave - it is on position 1 of the IO buffer
        is limited to STACK_NBYTE_SIZE
      */
      if ( pStackContext->Buffer[1] > STACK_NBYTE_SIZE )
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2224      	movs	r2, #36	; 0x24
 8002fe4:	5c9b      	ldrb	r3, [r3, r2]
 8002fe6:	2b28      	cmp	r3, #40	; 0x28
 8002fe8:	d903      	bls.n	8002ff2 <HAL_SMBUS_MasterRxCpltCallback+0x84>
      {
        pStackContext->Buffer[1] = STACK_NBYTE_SIZE;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2224      	movs	r2, #36	; 0x24
 8002fee:	2128      	movs	r1, #40	; 0x28
 8002ff0:	5499      	strb	r1, [r3, r2]
      }

      if (  pStackContext->Buffer[1] == 0U )
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2224      	movs	r2, #36	; 0x24
 8002ff6:	5c9b      	ldrb	r3, [r3, r2]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d104      	bne.n	8003006 <HAL_SMBUS_MasterRxCpltCallback+0x98>
      {
        /*
        special case - slave indicates it has no further data to send
        We generate stop and close the frame
        */
        STACK_SMBUS_ReadyIfNoAlert( pStackContext );
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 fe10 	bl	8003c24 <STACK_SMBUS_ReadyIfNoAlert>
      if (  pStackContext->Buffer[1] == 0U )
 8003004:	e042      	b.n	800308c <HAL_SMBUS_MasterRxCpltCallback+0x11e>
      else
      {
        /*
          This will conclude the block processing, we clear the flag
         */
        pStackContext->StateMachine &= ~SMBUS_SMS_PROCESSING;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2208      	movs	r2, #8
 800300c:	4393      	bics	r3, r2
 800300e:	001a      	movs	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	601a      	str	r2, [r3, #0]

        /*
          Reception next
          Usually there is something left to be read, we continue on position 2 of the IO buffer
         */
        pStackContext->StateMachine |= SMBUS_SMS_RECEIVE;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2204      	movs	r2, #4
 800301a:	431a      	orrs	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	601a      	str	r2, [r3, #0]
        size = pStackContext->Buffer[1];
 8003020:	200f      	movs	r0, #15
 8003022:	183b      	adds	r3, r7, r0
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	2124      	movs	r1, #36	; 0x24
 8003028:	5c52      	ldrb	r2, [r2, r1]
 800302a:	701a      	strb	r2, [r3, #0]
        /* Applying upper limit on read size */
        if ( size > pStackContext->CurrentCommand->cmnd_master_Rx_size )
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	78db      	ldrb	r3, [r3, #3]
 8003032:	183a      	adds	r2, r7, r0
 8003034:	7812      	ldrb	r2, [r2, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d904      	bls.n	8003044 <HAL_SMBUS_MasterRxCpltCallback+0xd6>
        {
          size = pStackContext->CurrentCommand->cmnd_master_Rx_size;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	183b      	adds	r3, r7, r0
 8003040:	78d2      	ldrb	r2, [r2, #3]
 8003042:	701a      	strb	r2, [r3, #0]
        }
        HAL_SMBUS_Master_Receive_IT( hsmbus, pStackContext->SlaveAddress, &(pStackContext->Buffer[2]), (uint16_t)size,
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	8bd9      	ldrh	r1, [r3, #30]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	3325      	adds	r3, #37	; 0x25
 800304c:	001c      	movs	r4, r3
 800304e:	230f      	movs	r3, #15
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	b29d      	uxth	r5, r3
                                     SMBUS_LAST_FRAME_NO_PEC  | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ));
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	04db      	lsls	r3, r3, #19
 800305e:	4013      	ands	r3, r2
        HAL_SMBUS_Master_Receive_IT( hsmbus, pStackContext->SlaveAddress, &(pStackContext->Buffer[2]), (uint16_t)size,
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	0492      	lsls	r2, r2, #18
 8003064:	4313      	orrs	r3, r2
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	002b      	movs	r3, r5
 800306c:	0022      	movs	r2, r4
 800306e:	f7fe fd47 	bl	8001b00 <HAL_SMBUS_Master_Receive_IT>
      if (  pStackContext->Buffer[1] == 0U )
 8003072:	e00b      	b.n	800308c <HAL_SMBUS_MasterRxCpltCallback+0x11e>
    else
    {
      /*
        There could be an alert during command that we could not treat before
      */
      STACK_SMBUS_ReadyIfNoAlert( pStackContext );
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	0018      	movs	r0, r3
 8003078:	f000 fdd4 	bl	8003c24 <STACK_SMBUS_ReadyIfNoAlert>
 800307c:	e006      	b.n	800308c <HAL_SMBUS_MasterRxCpltCallback+0x11e>
    }
  }
  else
  {
    pStackContext->StateMachine |= SMBUS_SMS_ERROR;
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2280      	movs	r2, #128	; 0x80
 8003084:	0092      	lsls	r2, r2, #2
 8003086:	431a      	orrs	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	601a      	str	r2, [r3, #0]
  }
  /* Program should not reach this statement */
}
 800308c:	46bd      	mov	sp, r7
 800308e:	b004      	add	sp, #16
 8003090:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003094 <HAL_SMBUS_SlaveTxCpltCallback>:
  * @param  hsmbus: Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_SlaveTxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  SMBUS_StackHandleTypeDef *pStackContext;

  /*
    Resolve which stack serves the port that initiated callback
   */
  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0018      	movs	r0, r3
 80030a0:	f7ff feb6 	bl	8002e10 <STACK_SMBUS_ResolveContext>
 80030a4:	0003      	movs	r3, r0
 80030a6:	60fb      	str	r3, [r7, #12]

  /*
    Completed transmission means this was not a quick command read but actual read.
    We need to record this by clearing the flag.
   */
  pStackContext->StateMachine &= ~SMBUS_SMS_TRANSMIT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2202      	movs	r2, #2
 80030ae:	4393      	bics	r3, r2
 80030b0:	001a      	movs	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	601a      	str	r2, [r3, #0]

#ifdef  PMBUS13
  /*
    A case of Zone read - this slave devide has transmitted its data, will ignore further reads
   */
  if (pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8bdb      	ldrh	r3, [r3, #30]
 80030ba:	2b50      	cmp	r3, #80	; 0x50
 80030bc:	d10e      	bne.n	80030dc <HAL_SMBUS_SlaveTxCpltCallback+0x48>
  {
    __SMBUS_ZONE_DISABLE(hsmbus);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68da      	ldr	r2, [r3, #12]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4906      	ldr	r1, [pc, #24]	; (80030e4 <HAL_SMBUS_SlaveTxCpltCallback+0x50>)
 80030ca:	400a      	ands	r2, r1
 80030cc:	60da      	str	r2, [r3, #12]
    pStackContext->StateMachine |= SMBUS_SMS_ZONE_READ;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2280      	movs	r2, #128	; 0x80
 80030d4:	0052      	lsls	r2, r2, #1
 80030d6:	431a      	orrs	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	601a      	str	r2, [r3, #0]
  }
#endif
}
 80030dc:	46c0      	nop			; (mov r8, r8)
 80030de:	46bd      	mov	sp, r7
 80030e0:	b004      	add	sp, #16
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	ffff7fff 	.word	0xffff7fff

080030e8 <HAL_SMBUS_SlaveRxCpltCallback>:
  * @param  hsmbus : Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_SlaveRxCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  SMBUS_StackHandleTypeDef *pStackContext;
  uint32_t       size;
  uint32_t       xFerOptions = SMBUS_NEXT_FRAME;
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	045b      	lsls	r3, r3, #17
 80030f4:	613b      	str	r3, [r7, #16]

  /*
    Resolve which stack serves the port that initiated callback
   */
  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	0018      	movs	r0, r3
 80030fa:	f7ff fe89 	bl	8002e10 <STACK_SMBUS_ResolveContext>
 80030fe:	0003      	movs	r3, r0
 8003100:	60fb      	str	r3, [r7, #12]

  if (( pStackContext->StateMachine & SMBUS_SMS_IGNORED ) == SMBUS_SMS_IGNORED )
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2220      	movs	r2, #32
 8003108:	4013      	ands	r3, r2
 800310a:	d01a      	beq.n	8003142 <HAL_SMBUS_SlaveRxCpltCallback+0x5a>
  {
    __HAL_SMBUS_GENERATE_NACK( hsmbus );
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2180      	movs	r1, #128	; 0x80
 8003118:	0209      	lsls	r1, r1, #8
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]
    /* TCR may still stretch the SCL */
    if (( hsmbus->Instance->ISR & I2C_ISR_TCR ) == I2C_ISR_TCR )
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2280      	movs	r2, #128	; 0x80
 8003126:	4013      	ands	r3, r2
 8003128:	2b80      	cmp	r3, #128	; 0x80
 800312a:	d000      	beq.n	800312e <HAL_SMBUS_SlaveRxCpltCallback+0x46>
 800312c:	e13d      	b.n	80033aa <HAL_SMBUS_SlaveRxCpltCallback+0x2c2>
    {
      hsmbus->Instance->CR2 |= (((uint32_t) 1U << 16U ) & I2C_CR2_NBYTES);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	0249      	lsls	r1, r1, #9
 800313c:	430a      	orrs	r2, r1
 800313e:	605a      	str	r2, [r3, #4]
        pStackContext->StateMachine &= ~SMBUS_SMS_RECEIVE;

      }
    }
  }
}
 8003140:	e133      	b.n	80033aa <HAL_SMBUS_SlaveRxCpltCallback+0x2c2>
    if ( pStackContext->CurrentCommand == NULL )
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d000      	beq.n	800314c <HAL_SMBUS_SlaveRxCpltCallback+0x64>
 800314a:	e0c1      	b.n	80032d0 <HAL_SMBUS_SlaveRxCpltCallback+0x1e8>
      pStackContext->StateMachine &= ~SMBUS_SMS_RECEIVE;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2204      	movs	r2, #4
 8003152:	4393      	bics	r3, r2
 8003154:	001a      	movs	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	601a      	str	r2, [r3, #0]
      if (pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8bdb      	ldrh	r3, [r3, #30]
 800315e:	2b50      	cmp	r3, #80	; 0x50
 8003160:	d113      	bne.n	800318a <HAL_SMBUS_SlaveRxCpltCallback+0xa2>
        if ( pStackContext->TheZone.readZone == pStackContext->TheZone.activeReadZone )
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	7e1a      	ldrb	r2, [r3, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	7e9b      	ldrb	r3, [r3, #26]
 800316a:	429a      	cmp	r2, r3
 800316c:	d011      	beq.n	8003192 <HAL_SMBUS_SlaveRxCpltCallback+0xaa>
          pStackContext->StateMachine |= SMBUS_SMS_IGNORED;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2220      	movs	r2, #32
 8003174:	431a      	orrs	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	601a      	str	r2, [r3, #0]
          pStackContext->StateMachine |= SMBUS_SMS_ZONE_READ;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2280      	movs	r2, #128	; 0x80
 8003180:	0052      	lsls	r2, r2, #1
 8003182:	431a      	orrs	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e003      	b.n	8003192 <HAL_SMBUS_SlaveRxCpltCallback+0xaa>
        STACK_SMBUS_LocateCommand( pStackContext );
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	0018      	movs	r0, r3
 800318e:	f7ff fd9b 	bl	8002cc8 <STACK_SMBUS_LocateCommand>
      if ( pStackContext->CurrentCommand == NULL )
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	68db      	ldr	r3, [r3, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d120      	bne.n	80031dc <HAL_SMBUS_SlaveRxCpltCallback+0xf4>
        pStackContext->StateMachine |= SMBUS_SMS_IGNORED;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2220      	movs	r2, #32
 80031a0:	431a      	orrs	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	601a      	str	r2, [r3, #0]
        __HAL_SMBUS_GENERATE_NACK( hsmbus );
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2180      	movs	r1, #128	; 0x80
 80031b2:	0209      	lsls	r1, r1, #8
 80031b4:	430a      	orrs	r2, r1
 80031b6:	605a      	str	r2, [r3, #4]
        if (( hsmbus->Instance->ISR & I2C_ISR_TCR ) == I2C_ISR_TCR )
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2280      	movs	r2, #128	; 0x80
 80031c0:	4013      	ands	r3, r2
 80031c2:	2b80      	cmp	r3, #128	; 0x80
 80031c4:	d000      	beq.n	80031c8 <HAL_SMBUS_SlaveRxCpltCallback+0xe0>
 80031c6:	e0f0      	b.n	80033aa <HAL_SMBUS_SlaveRxCpltCallback+0x2c2>
          hsmbus->Instance->CR2 |= (((uint32_t) 1 << 16 ) & I2C_CR2_NBYTES);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2180      	movs	r1, #128	; 0x80
 80031d4:	0249      	lsls	r1, r1, #9
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
}
 80031da:	e0e6      	b.n	80033aa <HAL_SMBUS_SlaveRxCpltCallback+0x2c2>
          (( pStackContext->CurrentCommand->cmnd_query & BLOCK_WRITE ) == BLOCK_WRITE ) ||
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	785b      	ldrb	r3, [r3, #1]
 80031e2:	001a      	movs	r2, r3
 80031e4:	2350      	movs	r3, #80	; 0x50
 80031e6:	4013      	ands	r3, r2
        if (
 80031e8:	2b50      	cmp	r3, #80	; 0x50
 80031ea:	d004      	beq.n	80031f6 <HAL_SMBUS_SlaveRxCpltCallback+0x10e>
          ( pStackContext->CurrentCommand->cmnd_query == BLK_PRC_CALL )
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	785b      	ldrb	r3, [r3, #1]
          (( pStackContext->CurrentCommand->cmnd_query & BLOCK_WRITE ) == BLOCK_WRITE ) ||
 80031f2:	2b90      	cmp	r3, #144	; 0x90
 80031f4:	d114      	bne.n	8003220 <HAL_SMBUS_SlaveRxCpltCallback+0x138>
          pStackContext->Byte_count++;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8b9b      	ldrh	r3, [r3, #28]
 80031fa:	3301      	adds	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	839a      	strh	r2, [r3, #28]
          pStackContext->StateMachine |= SMBUS_SMS_RECEIVE | SMBUS_SMS_PROCESSING;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	220c      	movs	r2, #12
 8003208:	431a      	orrs	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	601a      	str	r2, [r3, #0]
          HAL_SMBUS_Slave_Receive_IT( hsmbus, &(pStackContext->Buffer[1]), 1U, xFerOptions );
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3324      	adds	r3, #36	; 0x24
 8003212:	0019      	movs	r1, r3
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f7fe fe31 	bl	8001e80 <HAL_SMBUS_Slave_Receive_IT>
}
 800321e:	e0c4      	b.n	80033aa <HAL_SMBUS_SlaveRxCpltCallback+0x2c2>
          if (( pStackContext->CurrentCommand->cmnd_query & WRITE ) == WRITE )
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	785b      	ldrb	r3, [r3, #1]
 8003226:	001a      	movs	r2, r3
 8003228:	2340      	movs	r3, #64	; 0x40
 800322a:	4013      	ands	r3, r2
 800322c:	d016      	beq.n	800325c <HAL_SMBUS_SlaveRxCpltCallback+0x174>
            size = pStackContext->CurrentCommand->cmnd_master_Tx_size;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	789b      	ldrb	r3, [r3, #2]
 8003234:	617b      	str	r3, [r7, #20]
            if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	2380      	movs	r3, #128	; 0x80
 800323c:	04db      	lsls	r3, r3, #19
 800323e:	4013      	ands	r3, r2
 8003240:	d002      	beq.n	8003248 <HAL_SMBUS_SlaveRxCpltCallback+0x160>
              size += PEC_SIZE;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	3301      	adds	r3, #1
 8003246:	617b      	str	r3, [r7, #20]
            xFerOptions = SMBUS_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE );
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	04db      	lsls	r3, r3, #19
 8003250:	4013      	ands	r3, r2
 8003252:	2280      	movs	r2, #128	; 0x80
 8003254:	0492      	lsls	r2, r2, #18
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
 800325a:	e003      	b.n	8003264 <HAL_SMBUS_SlaveRxCpltCallback+0x17c>
            size = pStackContext->CurrentCommand->cmnd_master_Tx_size;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	789b      	ldrb	r3, [r3, #2]
 8003262:	617b      	str	r3, [r7, #20]
            (pStackContext->CurrentCommand->cmnd_code == SMBUS_COMMAND_EXT ) ||
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	781b      	ldrb	r3, [r3, #0]
          if (
 800326a:	2bff      	cmp	r3, #255	; 0xff
 800326c:	d003      	beq.n	8003276 <HAL_SMBUS_SlaveRxCpltCallback+0x18e>
            (pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8bdb      	ldrh	r3, [r3, #30]
            (pStackContext->CurrentCommand->cmnd_code == SMBUS_COMMAND_EXT ) ||
 8003272:	2b50      	cmp	r3, #80	; 0x50
 8003274:	d101      	bne.n	800327a <HAL_SMBUS_SlaveRxCpltCallback+0x192>
            xFerOptions = 0U;
 8003276:	2300      	movs	r3, #0
 8003278:	613b      	str	r3, [r7, #16]
          if ( size > 1U )
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d91b      	bls.n	80032b8 <HAL_SMBUS_SlaveRxCpltCallback+0x1d0>
            pStackContext->Byte_count += (uint16_t)size - 1U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8b9a      	ldrh	r2, [r3, #28]
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	b29b      	uxth	r3, r3
 8003288:	18d3      	adds	r3, r2, r3
 800328a:	b29b      	uxth	r3, r3
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	839a      	strh	r2, [r3, #28]
            pStackContext->StateMachine |= SMBUS_SMS_RECEIVE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2204      	movs	r2, #4
 800329a:	431a      	orrs	r2, r3
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	601a      	str	r2, [r3, #0]
            HAL_SMBUS_Slave_Receive_IT( hsmbus, &(pStackContext->Buffer[1]), (uint16_t)size - 1U, xFerOptions );
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	3324      	adds	r3, #36	; 0x24
 80032a4:	0019      	movs	r1, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7fe fde5 	bl	8001e80 <HAL_SMBUS_Slave_Receive_IT>
}
 80032b6:	e078      	b.n	80033aa <HAL_SMBUS_SlaveRxCpltCallback+0x2c2>
            pStackContext->Device->Instance->CR2 |= 0x0001000U;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2180      	movs	r1, #128	; 0x80
 80032c8:	0149      	lsls	r1, r1, #5
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
}
 80032ce:	e06c      	b.n	80033aa <HAL_SMBUS_SlaveRxCpltCallback+0x2c2>
      if (( pStackContext->StateMachine & SMBUS_SMS_PROCESSING) == SMBUS_SMS_PROCESSING)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2208      	movs	r2, #8
 80032d6:	4013      	ands	r3, r2
 80032d8:	d04f      	beq.n	800337a <HAL_SMBUS_SlaveRxCpltCallback+0x292>
          size = pStackContext->Buffer[1];
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2224      	movs	r2, #36	; 0x24
 80032de:	5c9b      	ldrb	r3, [r3, r2]
 80032e0:	617b      	str	r3, [r7, #20]
          if ( size > STACK_NBYTE_SIZE )
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b28      	cmp	r3, #40	; 0x28
 80032e6:	d901      	bls.n	80032ec <HAL_SMBUS_SlaveRxCpltCallback+0x204>
            size = STACK_NBYTE_SIZE;
 80032e8:	2328      	movs	r3, #40	; 0x28
 80032ea:	617b      	str	r3, [r7, #20]
          if ( size != 0U )
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d03b      	beq.n	800336a <HAL_SMBUS_SlaveRxCpltCallback+0x282>
              ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE) &&
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	2380      	movs	r3, #128	; 0x80
 80032f8:	04db      	lsls	r3, r3, #19
 80032fa:	4013      	ands	r3, r2
            if (
 80032fc:	d023      	beq.n	8003346 <HAL_SMBUS_SlaveRxCpltCallback+0x25e>
              ((pStackContext->CurrentCommand->cmnd_query & PROCESS_CALL) == 0U )
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	785b      	ldrb	r3, [r3, #1]
 8003304:	b25b      	sxtb	r3, r3
              ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE) &&
 8003306:	2b00      	cmp	r3, #0
 8003308:	db1d      	blt.n	8003346 <HAL_SMBUS_SlaveRxCpltCallback+0x25e>
              size += PEC_SIZE;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	3301      	adds	r3, #1
 800330e:	617b      	str	r3, [r7, #20]
              pStackContext->Byte_count += (uint16_t)size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8b9a      	ldrh	r2, [r3, #28]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	b29b      	uxth	r3, r3
 8003318:	18d3      	adds	r3, r2, r3
 800331a:	b29a      	uxth	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	839a      	strh	r2, [r3, #28]
              HAL_SMBUS_Slave_Receive_IT( hsmbus, &(pStackContext->Buffer[2]), (uint16_t)size,
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	3325      	adds	r3, #37	; 0x25
 8003324:	0019      	movs	r1, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	b29c      	uxth	r4, r3
                                          SMBUS_LAST_FRAME_NO_PEC + (pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) );
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	04db      	lsls	r3, r3, #19
 8003332:	4013      	ands	r3, r2
              HAL_SMBUS_Slave_Receive_IT( hsmbus, &(pStackContext->Buffer[2]), (uint16_t)size,
 8003334:	2280      	movs	r2, #128	; 0x80
 8003336:	0492      	lsls	r2, r2, #18
 8003338:	4694      	mov	ip, r2
 800333a:	4463      	add	r3, ip
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	0022      	movs	r2, r4
 8003340:	f7fe fd9e 	bl	8001e80 <HAL_SMBUS_Slave_Receive_IT>
 8003344:	e011      	b.n	800336a <HAL_SMBUS_SlaveRxCpltCallback+0x282>
              pStackContext->Byte_count += (uint16_t)size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	8b9a      	ldrh	r2, [r3, #28]
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	b29b      	uxth	r3, r3
 800334e:	18d3      	adds	r3, r2, r3
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	839a      	strh	r2, [r3, #28]
              HAL_SMBUS_Slave_Receive_IT( hsmbus, &(pStackContext->Buffer[2]), (uint16_t)size,
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	3325      	adds	r3, #37	; 0x25
 800335a:	0019      	movs	r1, r3
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	b29a      	uxth	r2, r3
 8003360:	2380      	movs	r3, #128	; 0x80
 8003362:	049b      	lsls	r3, r3, #18
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7fe fd8b 	bl	8001e80 <HAL_SMBUS_Slave_Receive_IT>
          pStackContext->StateMachine &= ~(SMBUS_SMS_RECEIVE | SMBUS_SMS_PROCESSING);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	220c      	movs	r2, #12
 8003370:	4393      	bics	r3, r2
 8003372:	001a      	movs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	601a      	str	r2, [r3, #0]
}
 8003378:	e017      	b.n	80033aa <HAL_SMBUS_SlaveRxCpltCallback+0x2c2>
      else if (pStackContext->CurrentCommand->cmnd_code == SMBUS_COMMAND_EXT )
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2bff      	cmp	r3, #255	; 0xff
 8003382:	d10b      	bne.n	800339c <HAL_SMBUS_SlaveRxCpltCallback+0x2b4>
        pStackContext->StateMachine &= ~SMBUS_SMS_RECEIVE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2204      	movs	r2, #4
 800338a:	4393      	bics	r3, r2
 800338c:	001a      	movs	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	601a      	str	r2, [r3, #0]
        STACK_SMBUS_ExtendCommand( pStackContext );
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	0018      	movs	r0, r3
 8003396:	f000 fd4c 	bl	8003e32 <STACK_SMBUS_ExtendCommand>
}
 800339a:	e006      	b.n	80033aa <HAL_SMBUS_SlaveRxCpltCallback+0x2c2>
        pStackContext->StateMachine &= ~SMBUS_SMS_RECEIVE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2204      	movs	r2, #4
 80033a2:	4393      	bics	r3, r2
 80033a4:	001a      	movs	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	601a      	str	r2, [r3, #0]
}
 80033aa:	46c0      	nop			; (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b007      	add	sp, #28
 80033b0:	bd90      	pop	{r4, r7, pc}
	...

080033b4 <HAL_SMBUS_AddrCallback>:
  * @param  TransferDirection: Master request Transfer Direction (Write/Read)
  * @param  AddrMatchCode: Address Match Code
  * @retval None
  */
void HAL_SMBUS_AddrCallback(SMBUS_HandleTypeDef *hsmbus, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033b4:	b590      	push	{r4, r7, lr}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	0008      	movs	r0, r1
 80033be:	0011      	movs	r1, r2
 80033c0:	1cfb      	adds	r3, r7, #3
 80033c2:	1c02      	adds	r2, r0, #0
 80033c4:	701a      	strb	r2, [r3, #0]
 80033c6:	003b      	movs	r3, r7
 80033c8:	1c0a      	adds	r2, r1, #0
 80033ca:	801a      	strh	r2, [r3, #0]
  SMBUS_StackHandleTypeDef *pStackContext;
  uint16_t           size;
  uint8_t            response;
  uint32_t           result = STACK_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	613b      	str	r3, [r7, #16]

  /*
    Resolve which stack serves the port that initiated callback
   */
  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7ff fd1c 	bl	8002e10 <STACK_SMBUS_ResolveContext>
 80033d8:	0003      	movs	r3, r0
 80033da:	60fb      	str	r3, [r7, #12]

  /*
     Clear the history of command records - if flag was not cleared yet, the application probably doesn't need it
   */
  pStackContext->StateMachine &= ~( SMBUS_SMS_QUICK_CMD_W | SMBUS_SMS_QUICK_CMD_R );
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4ac6      	ldr	r2, [pc, #792]	; (80036fc <HAL_SMBUS_AddrCallback+0x348>)
 80033e2:	401a      	ands	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	601a      	str	r2, [r3, #0]

  /*
    First normalize address - bit-shift it
   */
  AddrMatchCode = AddrMatchCode << 1U;
 80033e8:	003a      	movs	r2, r7
 80033ea:	003b      	movs	r3, r7
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	18db      	adds	r3, r3, r3
 80033f0:	8013      	strh	r3, [r2, #0]

  /*
    Check for host notify protocol ( we are host and being addressed )
   */
  if (
    (( pStackContext->Device->Instance->CR1 & SMBUS_PERIPHERAL_MODE_SMBUS_HOST ) == SMBUS_PERIPHERAL_MODE_SMBUS_HOST) &&
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	035b      	lsls	r3, r3, #13
 80033fe:	401a      	ands	r2, r3
  if (
 8003400:	2380      	movs	r3, #128	; 0x80
 8003402:	035b      	lsls	r3, r3, #13
 8003404:	429a      	cmp	r2, r3
 8003406:	d11e      	bne.n	8003446 <HAL_SMBUS_AddrCallback+0x92>
    (( pStackContext->Device->Instance->CR1 & SMBUS_PERIPHERAL_MODE_SMBUS_HOST ) == SMBUS_PERIPHERAL_MODE_SMBUS_HOST) &&
 8003408:	003b      	movs	r3, r7
 800340a:	881b      	ldrh	r3, [r3, #0]
 800340c:	2b10      	cmp	r3, #16
 800340e:	d11a      	bne.n	8003446 <HAL_SMBUS_AddrCallback+0x92>
    ( AddrMatchCode == SMBUS_ADDR_HOST ) &&
 8003410:	1cfb      	adds	r3, r7, #3
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d116      	bne.n	8003446 <HAL_SMBUS_AddrCallback+0x92>
  )
  {
    /*
      In this case we know exactly the frame is 3B long, we are taking a short-cut.
     */
    pStackContext->StateMachine &= ~SMBUS_SMS_READY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2201      	movs	r2, #1
 800341e:	4393      	bics	r3, r2
 8003420:	001a      	movs	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	601a      	str	r2, [r3, #0]
    pStackContext->Byte_count = 3U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2203      	movs	r2, #3
 800342a:	839a      	strh	r2, [r3, #28]
    HAL_SMBUS_Slave_Receive_IT( hsmbus, pStackContext->Buffer, 3U, SMBUS_FIRST_AND_LAST_FRAME_NO_PEC );
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	3323      	adds	r3, #35	; 0x23
 8003430:	0019      	movs	r1, r3
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	049b      	lsls	r3, r3, #18
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	2203      	movs	r2, #3
 800343a:	f7fe fd21 	bl	8001e80 <HAL_SMBUS_Slave_Receive_IT>
    pStackContext->CurrentCommand = &HOST_NOTIFY_PROTOCOL;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4aaf      	ldr	r2, [pc, #700]	; (8003700 <HAL_SMBUS_AddrCallback+0x34c>)
 8003442:	60da      	str	r2, [r3, #12]
 8003444:	e1ee      	b.n	8003824 <HAL_SMBUS_AddrCallback+0x470>
  }

  /*
    Try match for ARA - alert response is checked, but only in case it is us, who issued the signal ( I2C_CR1_ALERTEN )
   */
  else if ( ( AddrMatchCode == SMBUS_ADDR_ARA ) && (TransferDirection != 0U)
 8003446:	003b      	movs	r3, r7
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	2b18      	cmp	r3, #24
 800344c:	d138      	bne.n	80034c0 <HAL_SMBUS_AddrCallback+0x10c>
 800344e:	1cfb      	adds	r3, r7, #3
 8003450:	781b      	ldrb	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d034      	beq.n	80034c0 <HAL_SMBUS_AddrCallback+0x10c>
            && (((pStackContext->Device->Instance->CR1) & I2C_CR1_ALERTEN ) == I2C_CR1_ALERTEN ) )
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	2380      	movs	r3, #128	; 0x80
 8003460:	03db      	lsls	r3, r3, #15
 8003462:	401a      	ands	r2, r3
 8003464:	2380      	movs	r3, #128	; 0x80
 8003466:	03db      	lsls	r3, r3, #15
 8003468:	429a      	cmp	r2, r3
 800346a:	d129      	bne.n	80034c0 <HAL_SMBUS_AddrCallback+0x10c>
  {
    /*
      The ready (listen) state is over, transition to transmission of alert address
     */
    pStackContext->StateMachine &= ~SMBUS_SMS_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2201      	movs	r2, #1
 8003472:	4393      	bics	r3, r2
 8003474:	001a      	movs	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	601a      	str	r2, [r3, #0]
    pStackContext->StateMachine |= SMBUS_SMS_TRANSMIT;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2202      	movs	r2, #2
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	601a      	str	r2, [r3, #0]
    pStackContext->Byte_count = 1U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	839a      	strh	r2, [r3, #28]
    HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(pStackContext->OwnAddress), 1U,
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3320      	adds	r3, #32
 8003490:	0019      	movs	r1, r3
                                 SMBUS_FIRST_AND_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ));
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	04db      	lsls	r3, r3, #19
 800349a:	4013      	ands	r3, r2
    HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(pStackContext->OwnAddress), 1U,
 800349c:	2280      	movs	r2, #128	; 0x80
 800349e:	0492      	lsls	r2, r2, #18
 80034a0:	4313      	orrs	r3, r2
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	2201      	movs	r2, #1
 80034a6:	f7fe fc3b 	bl	8001d20 <HAL_SMBUS_Slave_Transmit_IT>

    /*
      Turn off the alert signal
     */
    pStackContext->Device->Instance->CR1 &= ~I2C_CR1_ALERTEN;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4992      	ldr	r1, [pc, #584]	; (8003704 <HAL_SMBUS_AddrCallback+0x350>)
 80034ba:	400a      	ands	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	e1b1      	b.n	8003824 <HAL_SMBUS_AddrCallback+0x470>
  else
  {
    /*
      Address may not be precisely the same - callback to accept the address
    */
    if ( STACK_SMBUS_AddrAccpt( pStackContext, AddrMatchCode) != SUCCESS )
 80034c0:	003b      	movs	r3, r7
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	0011      	movs	r1, r2
 80034c8:	0018      	movs	r0, r3
 80034ca:	f000 fb5f 	bl	8003b8c <STACK_SMBUS_AddrAccpt>
 80034ce:	1e03      	subs	r3, r0, #0
 80034d0:	d015      	beq.n	80034fe <HAL_SMBUS_AddrCallback+0x14a>
    {
      /* This is the best way not to block the line */
      __HAL_SMBUS_GENERATE_NACK( hsmbus );
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2180      	movs	r1, #128	; 0x80
 80034de:	0209      	lsls	r1, r1, #8
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
      hsmbus->Instance->ICR |= I2C_ICR_ADDRCF;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2108      	movs	r1, #8
 80034f0:	430a      	orrs	r2, r1
 80034f2:	61da      	str	r2, [r3, #28]
      HAL_SMBUS_EnableListen_IT( hsmbus );
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	0018      	movs	r0, r3
 80034f8:	f7fe fd54 	bl	8001fa4 <HAL_SMBUS_EnableListen_IT>
          HAL_SMBUS_Slave_Receive_IT( hsmbus, pStackContext->Buffer, 1U, SMBUS_NEXT_FRAME);
        }
      }
    }
  }
}
 80034fc:	e192      	b.n	8003824 <HAL_SMBUS_AddrCallback+0x470>
      pStackContext->SlaveAddress = AddrMatchCode;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	003a      	movs	r2, r7
 8003502:	8812      	ldrh	r2, [r2, #0]
 8003504:	83da      	strh	r2, [r3, #30]
      if ( TransferDirection != 0U )
 8003506:	1cfb      	adds	r3, r7, #3
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d100      	bne.n	8003510 <HAL_SMBUS_AddrCallback+0x15c>
 800350e:	e160      	b.n	80037d2 <HAL_SMBUS_AddrCallback+0x41e>
        pStackContext->Device->State &= ~HAL_SMBUS_STATE_SLAVE_BUSY_RX;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	2142      	movs	r1, #66	; 0x42
 800351c:	438a      	bics	r2, r1
 800351e:	649a      	str	r2, [r3, #72]	; 0x48
          (( pStackContext->StateMachine & SMBUS_SMS_IGNORED ) == SMBUS_SMS_IGNORED) && \
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2220      	movs	r2, #32
 8003526:	4013      	ands	r3, r2
        if (
 8003528:	d036      	beq.n	8003598 <HAL_SMBUS_AddrCallback+0x1e4>
          (( pStackContext->CurrentCommand->cmnd_query & ( READ | PROCESS_CALL ) ) != 0U )
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	785b      	ldrb	r3, [r3, #1]
 8003530:	001a      	movs	r2, r3
 8003532:	23a0      	movs	r3, #160	; 0xa0
 8003534:	4013      	ands	r3, r2
          (( pStackContext->StateMachine & SMBUS_SMS_IGNORED ) == SMBUS_SMS_IGNORED) && \
 8003536:	d02f      	beq.n	8003598 <HAL_SMBUS_AddrCallback+0x1e4>
          hsmbus->Instance->TXDR = 0xFFU;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	22ff      	movs	r2, #255	; 0xff
 800353e:	629a      	str	r2, [r3, #40]	; 0x28
          if (( hsmbus->Instance->ISR & I2C_ISR_TCR ) == I2C_ISR_TCR )
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2280      	movs	r2, #128	; 0x80
 8003548:	4013      	ands	r3, r2
 800354a:	2b80      	cmp	r3, #128	; 0x80
 800354c:	d108      	bne.n	8003560 <HAL_SMBUS_AddrCallback+0x1ac>
            hsmbus->Instance->CR2 |= (((uint32_t) 1 << 16 ) & I2C_CR2_NBYTES);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	0249      	lsls	r1, r1, #9
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
          __HAL_SMBUS_GENERATE_NACK( hsmbus );
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2180      	movs	r1, #128	; 0x80
 800356c:	0209      	lsls	r1, r1, #8
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
          hsmbus->Instance->ICR |= I2C_ICR_ADDRCF;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2108      	movs	r1, #8
 800357e:	430a      	orrs	r2, r1
 8003580:	61da      	str	r2, [r3, #28]
          pStackContext->StateMachine &= ~(SMBUS_SMS_IGNORED | SMBUS_SMS_ARP_AM);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a60      	ldr	r2, [pc, #384]	; (8003708 <HAL_SMBUS_AddrCallback+0x354>)
 8003588:	401a      	ands	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	601a      	str	r2, [r3, #0]
          HAL_SMBUS_EnableListen_IT( hsmbus );
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	0018      	movs	r0, r3
 8003592:	f7fe fd07 	bl	8001fa4 <HAL_SMBUS_EnableListen_IT>
 8003596:	e145      	b.n	8003824 <HAL_SMBUS_AddrCallback+0x470>
          pStackContext->StateMachine &= ~SMBUS_SMS_IGNORED;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2220      	movs	r2, #32
 800359e:	4393      	bics	r3, r2
 80035a0:	001a      	movs	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	601a      	str	r2, [r3, #0]
          if (( pStackContext->StateMachine & ( SMBUS_SMS_READY | SMBUS_SMS_RESPONSE_READY ) ) == 0U )
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2211      	movs	r2, #17
 80035ac:	4013      	ands	r3, r2
 80035ae:	d127      	bne.n	8003600 <HAL_SMBUS_AddrCallback+0x24c>
            if (( (pStackContext->StateMachine) & SMBUS_SMS_ARP_AM ) == SMBUS_SMS_ARP_AM )
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	2380      	movs	r3, #128	; 0x80
 80035b6:	05db      	lsls	r3, r3, #23
 80035b8:	4013      	ands	r3, r2
 80035ba:	d006      	beq.n	80035ca <HAL_SMBUS_AddrCallback+0x216>
              result = STACK_SMBUS_ExecuteCommandARP( pStackContext );
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	0018      	movs	r0, r3
 80035c0:	f000 fb19 	bl	8003bf6 <STACK_SMBUS_ExecuteCommandARP>
 80035c4:	0003      	movs	r3, r0
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	e011      	b.n	80035ee <HAL_SMBUS_AddrCallback+0x23a>
            else if ( pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8bdb      	ldrh	r3, [r3, #30]
 80035ce:	2b50      	cmp	r3, #80	; 0x50
 80035d0:	d107      	bne.n	80035e2 <HAL_SMBUS_AddrCallback+0x22e>
              result = STACK_PMBUS_ZoneReadCallback( pStackContext, 0U );
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2100      	movs	r1, #0
 80035d6:	0018      	movs	r0, r3
 80035d8:	f7ff fbf2 	bl	8002dc0 <STACK_PMBUS_ZoneReadCallback>
 80035dc:	0003      	movs	r3, r0
 80035de:	613b      	str	r3, [r7, #16]
 80035e0:	e005      	b.n	80035ee <HAL_SMBUS_AddrCallback+0x23a>
              result = STACK_SMBUS_ExecuteCommand( pStackContext );
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f7fc ff2f 	bl	8000448 <STACK_SMBUS_ExecuteCommand>
 80035ea:	0003      	movs	r3, r0
 80035ec:	613b      	str	r3, [r7, #16]
            if ( result == STACK_OK )
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d105      	bne.n	8003600 <HAL_SMBUS_AddrCallback+0x24c>
              pStackContext->StateMachine |= SMBUS_SMS_RESPONSE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2210      	movs	r2, #16
 80035fa:	431a      	orrs	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	601a      	str	r2, [r3, #0]
          if ( result != STACK_OK )
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01b      	beq.n	800363e <HAL_SMBUS_AddrCallback+0x28a>
            pStackContext->StateMachine |= SMBUS_SMS_IGNORED;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2220      	movs	r2, #32
 800360c:	431a      	orrs	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	601a      	str	r2, [r3, #0]
            __HAL_SMBUS_GENERATE_NACK( hsmbus );
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2180      	movs	r1, #128	; 0x80
 800361e:	0209      	lsls	r1, r1, #8
 8003620:	430a      	orrs	r2, r1
 8003622:	605a      	str	r2, [r3, #4]
            hsmbus->Instance->ICR |= I2C_ICR_ADDRCF;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	69da      	ldr	r2, [r3, #28]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2108      	movs	r1, #8
 8003630:	430a      	orrs	r2, r1
 8003632:	61da      	str	r2, [r3, #28]
            HAL_SMBUS_EnableListen_IT( hsmbus );
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	0018      	movs	r0, r3
 8003638:	f7fe fcb4 	bl	8001fa4 <HAL_SMBUS_EnableListen_IT>
}
 800363c:	e0f2      	b.n	8003824 <HAL_SMBUS_AddrCallback+0x470>
            if (( pStackContext->StateMachine & SMBUS_SMS_RESPONSE_READY ) == SMBUS_SMS_RESPONSE_READY )
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2210      	movs	r2, #16
 8003644:	4013      	ands	r3, r2
 8003646:	d061      	beq.n	800370c <HAL_SMBUS_AddrCallback+0x358>
              pStackContext->StateMachine |= SMBUS_SMS_TRANSMIT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2202      	movs	r2, #2
 800364e:	431a      	orrs	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]
              if  ( ( pStackContext->CurrentCommand->cmnd_query & BLOCK ) == BLOCK )
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	785b      	ldrb	r3, [r3, #1]
 800365a:	001a      	movs	r2, r3
 800365c:	2310      	movs	r3, #16
 800365e:	4013      	ands	r3, r2
 8003660:	d01f      	beq.n	80036a2 <HAL_SMBUS_AddrCallback+0x2ee>
                if ( pStackContext->Buffer[1] > STACK_NBYTE_SIZE )
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2224      	movs	r2, #36	; 0x24
 8003666:	5c9b      	ldrb	r3, [r3, r2]
 8003668:	2b28      	cmp	r3, #40	; 0x28
 800366a:	d903      	bls.n	8003674 <HAL_SMBUS_AddrCallback+0x2c0>
                  pStackContext->Buffer[1] = STACK_NBYTE_SIZE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2224      	movs	r2, #36	; 0x24
 8003670:	2128      	movs	r1, #40	; 0x28
 8003672:	5499      	strb	r1, [r3, r2]
                size = (uint16_t)(1U + (pStackContext->Buffer[1])); /* count + actual data */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2224      	movs	r2, #36	; 0x24
 8003678:	5c9b      	ldrb	r3, [r3, r2]
 800367a:	b29a      	uxth	r2, r3
 800367c:	2116      	movs	r1, #22
 800367e:	187b      	adds	r3, r7, r1
 8003680:	3201      	adds	r2, #1
 8003682:	801a      	strh	r2, [r3, #0]
                if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	2380      	movs	r3, #128	; 0x80
 800368a:	04db      	lsls	r3, r3, #19
 800368c:	4013      	ands	r3, r2
 800368e:	d004      	beq.n	800369a <HAL_SMBUS_AddrCallback+0x2e6>
                  size += 1U; /* PEC byte */
 8003690:	187b      	adds	r3, r7, r1
 8003692:	187a      	adds	r2, r7, r1
 8003694:	8812      	ldrh	r2, [r2, #0]
 8003696:	3201      	adds	r2, #1
 8003698:	801a      	strh	r2, [r3, #0]
                pStackContext->CurrentCommand = NULL;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	60da      	str	r2, [r3, #12]
 80036a0:	e014      	b.n	80036cc <HAL_SMBUS_AddrCallback+0x318>
                if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	2380      	movs	r3, #128	; 0x80
 80036a8:	04db      	lsls	r3, r3, #19
 80036aa:	4013      	ands	r3, r2
 80036ac:	d008      	beq.n	80036c0 <HAL_SMBUS_AddrCallback+0x30c>
                  size = (uint16_t)(pStackContext->CurrentCommand->cmnd_master_Rx_size + 1U); /* PEC byte */
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	78db      	ldrb	r3, [r3, #3]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	2316      	movs	r3, #22
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	3201      	adds	r2, #1
 80036bc:	801a      	strh	r2, [r3, #0]
 80036be:	e005      	b.n	80036cc <HAL_SMBUS_AddrCallback+0x318>
                  size = pStackContext->CurrentCommand->cmnd_master_Rx_size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	78da      	ldrb	r2, [r3, #3]
 80036c6:	2316      	movs	r3, #22
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	801a      	strh	r2, [r3, #0]
              pStackContext->Byte_count = size;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2016      	movs	r0, #22
 80036d0:	183a      	adds	r2, r7, r0
 80036d2:	8812      	ldrh	r2, [r2, #0]
 80036d4:	839a      	strh	r2, [r3, #28]
              HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(pStackContext->Buffer[1]), size, \
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	3324      	adds	r3, #36	; 0x24
 80036da:	0019      	movs	r1, r3
                                           SMBUS_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) );
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	04db      	lsls	r3, r3, #19
 80036e4:	4013      	ands	r3, r2
              HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(pStackContext->Buffer[1]), size, \
 80036e6:	2280      	movs	r2, #128	; 0x80
 80036e8:	0492      	lsls	r2, r2, #18
 80036ea:	431a      	orrs	r2, r3
 80036ec:	0014      	movs	r4, r2
 80036ee:	183b      	adds	r3, r7, r0
 80036f0:	881a      	ldrh	r2, [r3, #0]
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	0023      	movs	r3, r4
 80036f6:	f7fe fb13 	bl	8001d20 <HAL_SMBUS_Slave_Transmit_IT>
}
 80036fa:	e093      	b.n	8003824 <HAL_SMBUS_AddrCallback+0x470>
 80036fc:	ffffcfff 	.word	0xffffcfff
 8003700:	20000010 	.word	0x20000010
 8003704:	ffbfffff 	.word	0xffbfffff
 8003708:	bfffffdf 	.word	0xbfffffdf
            else if (( (pStackContext->StateMachine) & SMBUS_SMS_READY ) == SMBUS_SMS_READY )
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2201      	movs	r2, #1
 8003712:	4013      	ands	r3, r2
 8003714:	d100      	bne.n	8003718 <HAL_SMBUS_AddrCallback+0x364>
 8003716:	e085      	b.n	8003824 <HAL_SMBUS_AddrCallback+0x470>
              if (( pStackContext->StateMachine & SMBUS_SMS_RCV_BYTE_OFF ) == 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	045b      	lsls	r3, r3, #17
 8003720:	4013      	ands	r3, r2
 8003722:	d000      	beq.n	8003726 <HAL_SMBUS_AddrCallback+0x372>
 8003724:	e07e      	b.n	8003824 <HAL_SMBUS_AddrCallback+0x470>
                size = 1U;
 8003726:	2116      	movs	r1, #22
 8003728:	187b      	adds	r3, r7, r1
 800372a:	2201      	movs	r2, #1
 800372c:	801a      	strh	r2, [r3, #0]
                if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	04db      	lsls	r3, r3, #19
 8003736:	4013      	ands	r3, r2
 8003738:	d004      	beq.n	8003744 <HAL_SMBUS_AddrCallback+0x390>
                  size += 1U;
 800373a:	187b      	adds	r3, r7, r1
 800373c:	187a      	adds	r2, r7, r1
 800373e:	8812      	ldrh	r2, [r2, #0]
 8003740:	3201      	adds	r2, #1
 8003742:	801a      	strh	r2, [r3, #0]
                pStackContext->StateMachine &= ~SMBUS_SMS_RESPONSE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2210      	movs	r2, #16
 800374a:	4393      	bics	r3, r2
 800374c:	001a      	movs	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	601a      	str	r2, [r3, #0]
                pStackContext->StateMachine |= SMBUS_SMS_TRANSMIT;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2202      	movs	r2, #2
 8003758:	431a      	orrs	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	601a      	str	r2, [r3, #0]
                pStackContext->Byte_count = size;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2116      	movs	r1, #22
 8003762:	187a      	adds	r2, r7, r1
 8003764:	8812      	ldrh	r2, [r2, #0]
 8003766:	839a      	strh	r2, [r3, #28]
                if (( pStackContext->StateMachine & SMBUS_SMS_RCV_BYTE_LMT ) == SMBUS_SMS_RCV_BYTE_LMT)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	2380      	movs	r3, #128	; 0x80
 800376e:	049b      	lsls	r3, r3, #18
 8003770:	4013      	ands	r3, r2
 8003772:	d01a      	beq.n	80037aa <HAL_SMBUS_AddrCallback+0x3f6>
                  response = pStackContext->SRByte | 0x80U;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2222      	movs	r2, #34	; 0x22
 8003778:	5c9b      	ldrb	r3, [r3, r2]
 800377a:	2280      	movs	r2, #128	; 0x80
 800377c:	4252      	negs	r2, r2
 800377e:	4313      	orrs	r3, r2
 8003780:	b2da      	uxtb	r2, r3
 8003782:	200b      	movs	r0, #11
 8003784:	183b      	adds	r3, r7, r0
 8003786:	701a      	strb	r2, [r3, #0]
                                               SMBUS_FIRST_AND_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ));
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	2380      	movs	r3, #128	; 0x80
 800378e:	04db      	lsls	r3, r3, #19
 8003790:	4013      	ands	r3, r2
                  HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(response), size,
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	0492      	lsls	r2, r2, #18
 8003796:	431a      	orrs	r2, r3
 8003798:	0014      	movs	r4, r2
 800379a:	187b      	adds	r3, r7, r1
 800379c:	881a      	ldrh	r2, [r3, #0]
 800379e:	1839      	adds	r1, r7, r0
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	0023      	movs	r3, r4
 80037a4:	f7fe fabc 	bl	8001d20 <HAL_SMBUS_Slave_Transmit_IT>
}
 80037a8:	e03c      	b.n	8003824 <HAL_SMBUS_AddrCallback+0x470>
                  HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(pStackContext->SRByte), size,
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	3322      	adds	r3, #34	; 0x22
 80037ae:	0019      	movs	r1, r3
                                               SMBUS_FIRST_AND_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ));
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	2380      	movs	r3, #128	; 0x80
 80037b6:	04db      	lsls	r3, r3, #19
 80037b8:	4013      	ands	r3, r2
                  HAL_SMBUS_Slave_Transmit_IT( hsmbus, &(pStackContext->SRByte), size,
 80037ba:	2280      	movs	r2, #128	; 0x80
 80037bc:	0492      	lsls	r2, r2, #18
 80037be:	431a      	orrs	r2, r3
 80037c0:	0014      	movs	r4, r2
 80037c2:	2316      	movs	r3, #22
 80037c4:	18fb      	adds	r3, r7, r3
 80037c6:	881a      	ldrh	r2, [r3, #0]
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	0023      	movs	r3, r4
 80037cc:	f7fe faa8 	bl	8001d20 <HAL_SMBUS_Slave_Transmit_IT>
}
 80037d0:	e028      	b.n	8003824 <HAL_SMBUS_AddrCallback+0x470>
        pStackContext->StateMachine &= ~SMBUS_SMS_IGNORED;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2220      	movs	r2, #32
 80037d8:	4393      	bics	r3, r2
 80037da:	001a      	movs	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	601a      	str	r2, [r3, #0]
        if (( pStackContext->StateMachine & SMBUS_SMS_READY ) == SMBUS_SMS_READY )
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2201      	movs	r2, #1
 80037e6:	4013      	ands	r3, r2
 80037e8:	d01c      	beq.n	8003824 <HAL_SMBUS_AddrCallback+0x470>
          pStackContext->StateMachine &= ~SMBUS_SMS_READY;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2201      	movs	r2, #1
 80037f0:	4393      	bics	r3, r2
 80037f2:	001a      	movs	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	601a      	str	r2, [r3, #0]
          pStackContext->StateMachine |= SMBUS_SMS_RECEIVE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2204      	movs	r2, #4
 80037fe:	431a      	orrs	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	601a      	str	r2, [r3, #0]
          pStackContext->CurrentCommand = NULL;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	60da      	str	r2, [r3, #12]
          pStackContext->Byte_count = 1U;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	839a      	strh	r2, [r3, #28]
          HAL_SMBUS_Slave_Receive_IT( hsmbus, pStackContext->Buffer, 1U, SMBUS_NEXT_FRAME);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	3323      	adds	r3, #35	; 0x23
 8003814:	0019      	movs	r1, r3
 8003816:	2380      	movs	r3, #128	; 0x80
 8003818:	045b      	lsls	r3, r3, #17
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f7fe fb2f 	bl	8001e80 <HAL_SMBUS_Slave_Receive_IT>
}
 8003822:	e7ff      	b.n	8003824 <HAL_SMBUS_AddrCallback+0x470>
 8003824:	46c0      	nop			; (mov r8, r8)
 8003826:	46bd      	mov	sp, r7
 8003828:	b007      	add	sp, #28
 800382a:	bd90      	pop	{r4, r7, pc}

0800382c <HAL_SMBUS_ListenCpltCallback>:
  * @param  hsmbus : Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_ListenCpltCallback(SMBUS_HandleTypeDef *hsmbus)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  SMBUS_StackHandleTypeDef *pStackContext;

  /*
    Resolve which stack serves the port that initiated callback
   */
  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0018      	movs	r0, r3
 8003838:	f7ff faea 	bl	8002e10 <STACK_SMBUS_ResolveContext>
 800383c:	0003      	movs	r3, r0
 800383e:	60fb      	str	r3, [r7, #12]

  /*
    communication over, let's determine what was it
   */
  if ( pStackContext->CurrentCommand == 0U )
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d11a      	bne.n	800387e <HAL_SMBUS_ListenCpltCallback+0x52>
  {
    if ((pStackContext->StateMachine & SMBUS_SMS_RECEIVE) == SMBUS_SMS_RECEIVE )
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2204      	movs	r2, #4
 800384e:	4013      	ands	r3, r2
 8003850:	d00a      	beq.n	8003868 <HAL_SMBUS_ListenCpltCallback+0x3c>
    {
      /*
        a quick command write detected - address was detected with write but no write occurred
      */
      pStackContext->StateMachine |= SMBUS_SMS_QUICK_CMD_W | SMBUS_SMS_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a2c      	ldr	r2, [pc, #176]	; (8003908 <HAL_SMBUS_ListenCpltCallback+0xdc>)
 8003858:	431a      	orrs	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	601a      	str	r2, [r3, #0]
      STACK_SMBUS_ExecuteCommand( pStackContext );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	0018      	movs	r0, r3
 8003862:	f7fc fdf1 	bl	8000448 <STACK_SMBUS_ExecuteCommand>
 8003866:	e01e      	b.n	80038a6 <HAL_SMBUS_ListenCpltCallback+0x7a>
    }
    else if ((pStackContext->StateMachine & SMBUS_SMS_QUICK_CMD_R) == SMBUS_SMS_QUICK_CMD_R )
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	2380      	movs	r3, #128	; 0x80
 800386e:	019b      	lsls	r3, r3, #6
 8003870:	4013      	ands	r3, r2
 8003872:	d018      	beq.n	80038a6 <HAL_SMBUS_ListenCpltCallback+0x7a>
    {
      /*
        a quick command read case - flag was set during OVR error treatment
      */
      STACK_SMBUS_ExecuteCommand( pStackContext );
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	0018      	movs	r0, r3
 8003878:	f7fc fde6 	bl	8000448 <STACK_SMBUS_ExecuteCommand>
 800387c:	e013      	b.n	80038a6 <HAL_SMBUS_ListenCpltCallback+0x7a>
    }
  }
  else if (( pStackContext->StateMachine & SMBUS_SMS_RESPONSE_READY) != SMBUS_SMS_RESPONSE_READY )
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2210      	movs	r2, #16
 8003884:	4013      	ands	r3, r2
 8003886:	d10e      	bne.n	80038a6 <HAL_SMBUS_ListenCpltCallback+0x7a>
  {
    /*
      we received a simple command we need yet to execute
     */
    if (( pStackContext->StateMachine & SMBUS_SMS_ARP_AM ) == SMBUS_SMS_ARP_AM )
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	05db      	lsls	r3, r3, #23
 8003890:	4013      	ands	r3, r2
 8003892:	d004      	beq.n	800389e <HAL_SMBUS_ListenCpltCallback+0x72>
    {
      STACK_SMBUS_ExecuteCommandARP( pStackContext );
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	0018      	movs	r0, r3
 8003898:	f000 f9ad 	bl	8003bf6 <STACK_SMBUS_ExecuteCommandARP>
 800389c:	e003      	b.n	80038a6 <HAL_SMBUS_ListenCpltCallback+0x7a>
    }
    else
    {
      STACK_SMBUS_ExecuteCommand( pStackContext );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	0018      	movs	r0, r3
 80038a2:	f7fc fdd1 	bl	8000448 <STACK_SMBUS_ExecuteCommand>
  }

  /*
    As the communication is concluded we want to reset the stack
   */
  pStackContext->StateMachine |= SMBUS_SMS_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2201      	movs	r2, #1
 80038ac:	431a      	orrs	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	601a      	str	r2, [r3, #0]
  pStackContext->StateMachine &= ~( SMBUS_SMS_RESPONSE_READY | SMBUS_SMS_IGNORED | SMBUS_SMS_ARP_AM | SMBUS_SMS_PROCESSING
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a15      	ldr	r2, [pc, #84]	; (800390c <HAL_SMBUS_ListenCpltCallback+0xe0>)
 80038b8:	401a      	ands	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	601a      	str	r2, [r3, #0]
                                    | SMBUS_SMS_ZONE_READ);
  pStackContext->CurrentCommand = NULL;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	60da      	str	r2, [r3, #12]

  /* sometimes there is a PEC byte left in RXDR due to command type confusion (READ or WRITE command) */
  if (( hsmbus->Instance->ISR & I2C_ISR_RXNE ) == I2C_ISR_RXNE )
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2204      	movs	r2, #4
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d109      	bne.n	80038e6 <HAL_SMBUS_ListenCpltCallback+0xba>
  {
    (*hsmbus->pBuffPtr++) = (uint8_t)(hsmbus->Instance->RXDR);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038dc:	1c59      	adds	r1, r3, #1
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6351      	str	r1, [r2, #52]	; 0x34
 80038e2:	b2c2      	uxtb	r2, r0
 80038e4:	701a      	strb	r2, [r3, #0]
  }

  /*
    ...and return to listen mode
   */
  HAL_SMBUS_EnableListen_IT( hsmbus );
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	0018      	movs	r0, r3
 80038ea:	f7fe fb5b 	bl	8001fa4 <HAL_SMBUS_EnableListen_IT>

#ifdef PMBUS13
  __SMBUS_ZONE_ENABLE(hsmbus);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68da      	ldr	r2, [r3, #12]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2180      	movs	r1, #128	; 0x80
 80038fa:	0209      	lsls	r1, r1, #8
 80038fc:	430a      	orrs	r2, r1
 80038fe:	60da      	str	r2, [r3, #12]
#endif /* PMBUS13 */
}
 8003900:	46c0      	nop			; (mov r8, r8)
 8003902:	46bd      	mov	sp, r7
 8003904:	b004      	add	sp, #16
 8003906:	bd80      	pop	{r7, pc}
 8003908:	00001001 	.word	0x00001001
 800390c:	bffffec7 	.word	0xbffffec7

08003910 <HAL_SMBUS_ErrorCallback>:
  * @param  hsmbus : Pointer to a SMBUS_HandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void HAL_SMBUS_ErrorCallback(SMBUS_HandleTypeDef *hsmbus)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  SMBUS_StackHandleTypeDef *pStackContext;
  uint32_t  error = hsmbus->ErrorCode;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391c:	60fb      	str	r3, [r7, #12]

  pStackContext = STACK_SMBUS_ResolveContext( hsmbus );
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	0018      	movs	r0, r3
 8003922:	f7ff fa75 	bl	8002e10 <STACK_SMBUS_ResolveContext>
 8003926:	0003      	movs	r3, r0
 8003928:	60bb      	str	r3, [r7, #8]

  if ( (error & HAL_SMBUS_ERROR_ALERT) == HAL_SMBUS_ERROR_ALERT )
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2240      	movs	r2, #64	; 0x40
 800392e:	4013      	ands	r3, r2
 8003930:	d01a      	beq.n	8003968 <HAL_SMBUS_ErrorCallback+0x58>
  {
    if ( (pStackContext->StateMachine & SMBUS_SMS_ACTIVE_MASK) == 0U )
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	225e      	movs	r2, #94	; 0x5e
 8003938:	4013      	ands	r3, r2
 800393a:	d10a      	bne.n	8003952 <HAL_SMBUS_ErrorCallback+0x42>
    {
      /*
        The stack is not busy - we can react immediately
       */
      pStackContext->CurrentCommand = &ALERT_RESPONSE;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	4a90      	ldr	r2, [pc, #576]	; (8003b80 <HAL_SMBUS_ErrorCallback+0x270>)
 8003940:	60da      	str	r2, [r3, #12]
      STACK_SMBUS_HostRead( pStackContext, (uint8_t *) & (pStackContext->OwnAddress), SMBUS_ADDR_ARA);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	3320      	adds	r3, #32
 8003946:	0019      	movs	r1, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2218      	movs	r2, #24
 800394c:	0018      	movs	r0, r3
 800394e:	f000 fa07 	bl	8003d60 <STACK_SMBUS_HostRead>
    }
    /*
      Alert signal detected, update state
     */
    pStackContext->StateMachine |= SMBUS_SMS_ALERT_PENDING;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2240      	movs	r2, #64	; 0x40
 8003958:	431a      	orrs	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	601a      	str	r2, [r3, #0]

    /*
     the alert has been treated, clear the flag
     */
    error &= ~HAL_SMBUS_ERROR_ALERT;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2240      	movs	r2, #64	; 0x40
 8003962:	4393      	bics	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	e0fc      	b.n	8003b62 <HAL_SMBUS_ErrorCallback+0x252>
  }
  else if (( error & (HAL_SMBUS_ERROR_BERR | HAL_SMBUS_ERROR_BUSTIMEOUT | HAL_SMBUS_ERROR_HALTIMEOUT )) != 0U )
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2231      	movs	r2, #49	; 0x31
 800396c:	4013      	ands	r3, r2
 800396e:	d041      	beq.n	80039f4 <HAL_SMBUS_ErrorCallback+0xe4>
  {
    /*
      Critical error plagued the command - reset the stack
     */
    if ( STACK_SMBUS_IsBusy(pStackContext))
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	224e      	movs	r2, #78	; 0x4e
 8003976:	4013      	ands	r3, r2
 8003978:	d02b      	beq.n	80039d2 <HAL_SMBUS_ErrorCallback+0xc2>
    {
      __HAL_SMBUS_DISABLE( hsmbus );
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2101      	movs	r1, #1
 8003986:	438a      	bics	r2, r1
 8003988:	601a      	str	r2, [r3, #0]
      while (( hsmbus->Instance->CR1 & I2C_CR1_PE ) == I2C_CR1_PE )
 800398a:	46c0      	nop			; (mov r8, r8)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2201      	movs	r2, #1
 8003994:	4013      	ands	r3, r2
 8003996:	2b01      	cmp	r3, #1
 8003998:	d0f8      	beq.n	800398c <HAL_SMBUS_ErrorCallback+0x7c>
      {}
      __HAL_SMBUS_ENABLE( hsmbus );
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2101      	movs	r1, #1
 80039a6:	430a      	orrs	r2, r1
 80039a8:	601a      	str	r2, [r3, #0]
      if ( pStackContext->Device->State != HAL_SMBUS_STATE_READY )
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d00e      	beq.n	80039d2 <HAL_SMBUS_ErrorCallback+0xc2>
      {
        HAL_SMBUS_DeInit( pStackContext->Device );
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	0018      	movs	r0, r3
 80039ba:	f7fe f877 	bl	8001aac <HAL_SMBUS_DeInit>
        HAL_SMBUS_Init( pStackContext->Device );
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7fd ffb0 	bl	8001928 <HAL_SMBUS_Init>
        HAL_SMBUS_EnableListen_IT( pStackContext->Device );
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7fe fae9 	bl	8001fa4 <HAL_SMBUS_EnableListen_IT>
      }
    }
    pStackContext->StateMachine |= SMBUS_SMS_READY;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2201      	movs	r2, #1
 80039d8:	431a      	orrs	r2, r3
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	601a      	str	r2, [r3, #0]
    pStackContext->CurrentCommand = NULL;
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2200      	movs	r2, #0
 80039e2:	60da      	str	r2, [r3, #12]
    pStackContext->StateMachine &= ~SMBUS_SMS_ACTIVE_MASK;
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	225e      	movs	r2, #94	; 0x5e
 80039ea:	4393      	bics	r3, r2
 80039ec:	001a      	movs	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e0b6      	b.n	8003b62 <HAL_SMBUS_ErrorCallback+0x252>

  }
  else if (( error & HAL_SMBUS_ERROR_OVR) == HAL_SMBUS_ERROR_OVR )
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2208      	movs	r2, #8
 80039f8:	4013      	ands	r3, r2
 80039fa:	d010      	beq.n	8003a1e <HAL_SMBUS_ErrorCallback+0x10e>
  {
    /*
      A case of quick command read probably, setting the flag
     */
    pStackContext->StateMachine |= SMBUS_SMS_QUICK_CMD_R | SMBUS_SMS_READY;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a60      	ldr	r2, [pc, #384]	; (8003b84 <HAL_SMBUS_ErrorCallback+0x274>)
 8003a02:	431a      	orrs	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	601a      	str	r2, [r3, #0]
    HAL_SMBUS_Master_Abort_IT( hsmbus, pStackContext->SlaveAddress );
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	8bda      	ldrh	r2, [r3, #30]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	0011      	movs	r1, r2
 8003a10:	0018      	movs	r0, r3
 8003a12:	f7fe f931 	bl	8001c78 <HAL_SMBUS_Master_Abort_IT>
    hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8003a1c:	e0a1      	b.n	8003b62 <HAL_SMBUS_ErrorCallback+0x252>
  }
  else if (( error & HAL_SMBUS_ERROR_ARLO) == HAL_SMBUS_ERROR_ARLO )
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2202      	movs	r2, #2
 8003a22:	4013      	ands	r3, r2
 8003a24:	d060      	beq.n	8003ae8 <HAL_SMBUS_ErrorCallback+0x1d8>
  {
#ifdef PMBUS13
    /* Zone Read arbitration lost - retry */
    if (( pStackContext->SlaveAddress == SMBUS_ADDR_ZONE_READ )
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	8bdb      	ldrh	r3, [r3, #30]
 8003a2a:	2b50      	cmp	r3, #80	; 0x50
 8003a2c:	d115      	bne.n	8003a5a <HAL_SMBUS_ErrorCallback+0x14a>
        && ((pStackContext->StateMachine & SMBUS_SMS_ZONE_READ) != 0U ))
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4013      	ands	r3, r2
 8003a38:	d00f      	beq.n	8003a5a <HAL_SMBUS_ErrorCallback+0x14a>
    {
      pStackContext->StateMachine &= ~SMBUS_SMS_ZONE_READ;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a52      	ldr	r2, [pc, #328]	; (8003b88 <HAL_SMBUS_ErrorCallback+0x278>)
 8003a40:	401a      	ands	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	601a      	str	r2, [r3, #0]
      __SMBUS_ZONE_ENABLE(hsmbus);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2180      	movs	r1, #128	; 0x80
 8003a52:	0209      	lsls	r1, r1, #8
 8003a54:	430a      	orrs	r2, r1
 8003a56:	60da      	str	r2, [r3, #12]
 8003a58:	e083      	b.n	8003b62 <HAL_SMBUS_ErrorCallback+0x252>
    {
#endif /* PMBUS13 */
      /*
        Arbitration lost, giving up
      */
      __HAL_SMBUS_GENERATE_NACK( hsmbus );
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2180      	movs	r1, #128	; 0x80
 8003a66:	0209      	lsls	r1, r1, #8
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	605a      	str	r2, [r3, #4]

      /* TCR may still stretch the SCL */
      if (( hsmbus->Instance->ISR & I2C_ISR_TCR ) == I2C_ISR_TCR )
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	2280      	movs	r2, #128	; 0x80
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b80      	cmp	r3, #128	; 0x80
 8003a78:	d108      	bne.n	8003a8c <HAL_SMBUS_ErrorCallback+0x17c>
      {
        hsmbus->Instance->CR2 |= (((uint32_t) 1 << 16 ) & I2C_CR2_NBYTES);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	2180      	movs	r1, #128	; 0x80
 8003a86:	0249      	lsls	r1, r1, #9
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
      }
      if (( hsmbus->Instance->ISR & I2C_ISR_ADDR ) == I2C_ISR_ADDR )
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2208      	movs	r2, #8
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d107      	bne.n	8003aaa <HAL_SMBUS_ErrorCallback+0x19a>
      {
        hsmbus->Instance->ICR |= I2C_ICR_ADDRCF;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	69da      	ldr	r2, [r3, #28]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2108      	movs	r1, #8
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	61da      	str	r2, [r3, #28]
      }

      /*
      Clearing the rest of the transmission, including the HW buffer of peripheral
      */
      hsmbus->Instance->ISR |= I2C_ISR_TXE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	699a      	ldr	r2, [r3, #24]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	619a      	str	r2, [r3, #24]
      hsmbus->XferCount = 0U;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	875a      	strh	r2, [r3, #58]	; 0x3a
      hsmbus->XferSize = 0U;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	871a      	strh	r2, [r3, #56]	; 0x38
      hsmbus->XferOptions = 0U;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	63da      	str	r2, [r3, #60]	; 0x3c

      /*
        Putting the stack back to original state.
      */
      pStackContext->StateMachine &= ~SMBUS_SMS_TRANSMIT | SMBUS_SMS_RESPONSE_READY | SMBUS_SMS_PROCESSING;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	4393      	bics	r3, r2
 8003ad4:	001a      	movs	r2, r3
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	601a      	str	r2, [r3, #0]
      pStackContext->StateMachine |= SMBUS_SMS_IGNORED | SMBUS_SMS_READY;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2221      	movs	r2, #33	; 0x21
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e03c      	b.n	8003b62 <HAL_SMBUS_ErrorCallback+0x252>
#ifdef PMBUS13
    }
#endif  /* PMBUS13 */
  }
  else if (( error & HAL_SMBUS_ERROR_PECERR ) == HAL_SMBUS_ERROR_PECERR )
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2280      	movs	r2, #128	; 0x80
 8003aec:	4013      	ands	r3, r2
 8003aee:	d01b      	beq.n	8003b28 <HAL_SMBUS_ErrorCallback+0x218>
  {
    /* just ignore the error if there is no current transaction */
    if ( hsmbus->State == HAL_SMBUS_STATE_RESET )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10f      	bne.n	8003b18 <HAL_SMBUS_ErrorCallback+0x208>
    {
      HAL_SMBUS_DeInit( pStackContext->Device );
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f7fd ffd5 	bl	8001aac <HAL_SMBUS_DeInit>
      HAL_SMBUS_Init( pStackContext->Device );
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	0018      	movs	r0, r3
 8003b08:	f7fd ff0e 	bl	8001928 <HAL_SMBUS_Init>
      HAL_SMBUS_EnableListen_IT( pStackContext->Device );
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	0018      	movs	r0, r3
 8003b12:	f7fe fa47 	bl	8001fa4 <HAL_SMBUS_EnableListen_IT>
 8003b16:	e024      	b.n	8003b62 <HAL_SMBUS_ErrorCallback+0x252>
    }
    else
    {
      /* otherwise book it in the stack */
      pStackContext->StateMachine |= SMBUS_SMS_ERR_PECERR;
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	0412      	lsls	r2, r2, #16
 8003b20:	431a      	orrs	r2, r3
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e01c      	b.n	8003b62 <HAL_SMBUS_ErrorCallback+0x252>
    }
  }
  else if (( error & HAL_SMBUS_ERROR_ACKF ) == HAL_SMBUS_ERROR_ACKF )
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2204      	movs	r2, #4
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d018      	beq.n	8003b62 <HAL_SMBUS_ErrorCallback+0x252>
  {
    pStackContext->Device->PreviousState = hsmbus->State;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
    pStackContext->Device->State = HAL_SMBUS_STATE_READY;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	649a      	str	r2, [r3, #72]	; 0x48

    /* Process Unlocked */
    __HAL_UNLOCK(pStackContext->Device);
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2244      	movs	r2, #68	; 0x44
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

    /* Cease the transmit/receive effort */
    pStackContext->StateMachine &= ~(SMBUS_SMS_TRANSMIT | SMBUS_SMS_RECEIVE);
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2206      	movs	r2, #6
 8003b52:	4393      	bics	r3, r2
 8003b54:	001a      	movs	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	601a      	str	r2, [r3, #0]
    STACK_SMBUS_ReadyIfNoAlert(pStackContext);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f000 f861 	bl	8003c24 <STACK_SMBUS_ReadyIfNoAlert>
  }

  /*
    keep any other error marked in the state machine
   */
  pStackContext->StateMachine |= error << 16;
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	041b      	lsls	r3, r3, #16
 8003b6a:	431a      	orrs	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	601a      	str	r2, [r3, #0]

  /*
    and clear the record of error in the hal driver
   */
  hsmbus->ErrorCode = HAL_SMBUS_ERROR_NONE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	b004      	add	sp, #16
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	2000000c 	.word	0x2000000c
 8003b84:	00002001 	.word	0x00002001
 8003b88:	fffffeff 	.word	0xfffffeff

08003b8c <STACK_SMBUS_AddrAccpt>:
  *                the configuration information for the specified SMBUS.
  * @param  AddrMatchCode: Address Match Code
  * @retval ErrorStatus ERROR if address is not recognized as own.
  */
__weak ErrorStatus STACK_SMBUS_AddrAccpt( SMBUS_StackHandleTypeDef *pStackContext, uint16_t AddrMatchCode)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	000a      	movs	r2, r1
 8003b96:	1cbb      	adds	r3, r7, #2
 8003b98:	801a      	strh	r2, [r3, #0]
  ErrorStatus retvalue = ERROR;
 8003b9a:	230f      	movs	r3, #15
 8003b9c:	18fb      	adds	r3, r7, r3
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
#endif /*ARP supported*/

#ifdef PMBUS13

  /* Zone command address */
  if ( (AddrMatchCode == SMBUS_ADDR_ZONE_READ ) || (AddrMatchCode == SMBUS_ADDR_ZONE_WRITE ))
 8003ba2:	1cbb      	adds	r3, r7, #2
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	2b50      	cmp	r3, #80	; 0x50
 8003ba8:	d003      	beq.n	8003bb2 <STACK_SMBUS_AddrAccpt+0x26>
 8003baa:	1cbb      	adds	r3, r7, #2
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	2b6e      	cmp	r3, #110	; 0x6e
 8003bb0:	d10e      	bne.n	8003bd0 <STACK_SMBUS_AddrAccpt+0x44>
  {

    if (( pStackContext->StateMachine & SMBUS_SMS_ZONE_READ ) == SMBUS_SMS_ZONE_READ )
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d004      	beq.n	8003bc8 <STACK_SMBUS_AddrAccpt+0x3c>
    {
      retvalue = ERROR;
 8003bbe:	230f      	movs	r3, #15
 8003bc0:	18fb      	adds	r3, r7, r3
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	e003      	b.n	8003bd0 <STACK_SMBUS_AddrAccpt+0x44>
    }
    else
    {
      retvalue = SUCCESS;
 8003bc8:	230f      	movs	r3, #15
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	2200      	movs	r2, #0
 8003bce:	701a      	strb	r2, [r3, #0]
    }
  }
#endif /* PMBUS13 */

  /* Own address match */
  if (AddrMatchCode == pStackContext->OwnAddress )
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	5c9b      	ldrb	r3, [r3, r2]
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	1cba      	adds	r2, r7, #2
 8003bda:	8812      	ldrh	r2, [r2, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d103      	bne.n	8003be8 <STACK_SMBUS_AddrAccpt+0x5c>
  {
    retvalue = SUCCESS;
 8003be0:	230f      	movs	r3, #15
 8003be2:	18fb      	adds	r3, r7, r3
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
  }

  /* NOTE : This function Should not be modified, when the callback is needed,
           the STACK_SMBUS_AddrAccpt could be implemented in the user file
  */
  return retvalue;
 8003be8:	230f      	movs	r3, #15
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	781b      	ldrb	r3, [r3, #0]
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <STACK_SMBUS_ExecuteCommandARP>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the context information for the specified SMBUS stack.
  * @retval HAL_StatusTypeDef response code. Equal STACK_OK if success.
  */
__weak HAL_StatusTypeDef STACK_SMBUS_ExecuteCommandARP( SMBUS_StackHandleTypeDef *pStackContext )
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef result = STACK_OK;
 8003bfe:	210f      	movs	r1, #15
 8003c00:	187b      	adds	r3, r7, r1
 8003c02:	2200      	movs	r2, #0
 8003c04:	701a      	strb	r2, [r3, #0]
#endif /*ARP*/

  /*
    Returning zero means no problem with execution, if reply is expected, then it is correctly placed in the IO buffer
   */
  return result;
 8003c06:	187b      	adds	r3, r7, r1
 8003c08:	781b      	ldrb	r3, [r3, #0]
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b004      	add	sp, #16
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <STACK_SMBUS_AlertClbk>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
__weak void STACK_SMBUS_AlertClbk( SMBUS_StackHandleTypeDef *pStackContext )
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b082      	sub	sp, #8
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /*
   Do not modify this function directly, replace it with own version in your code
   */
  return;
 8003c1a:	46c0      	nop			; (mov r8, r8)
}
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b002      	add	sp, #8
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <STACK_SMBUS_ReadyIfNoAlert>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval None
  */
void STACK_SMBUS_ReadyIfNoAlert( SMBUS_StackHandleTypeDef *pStackContext )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]

  if ((pStackContext->StateMachine & SMBUS_SMS_ALERT_PENDING) == SMBUS_SMS_ALERT_PENDING )
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2240      	movs	r2, #64	; 0x40
 8003c32:	4013      	ands	r3, r2
 8003c34:	d028      	beq.n	8003c88 <STACK_SMBUS_ReadyIfNoAlert+0x64>
  {
    /*
      During a command processing, a device signalled an alert
     */
    if (pStackContext->CurrentCommand != &ALERT_RESPONSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	4b1c      	ldr	r3, [pc, #112]	; (8003cac <STACK_SMBUS_ReadyIfNoAlert+0x88>)
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d011      	beq.n	8003c64 <STACK_SMBUS_ReadyIfNoAlert+0x40>
    {
      /*
       Last command was not an alert response - we send alert response
       */
      pStackContext->CurrentCommand = &ALERT_RESPONSE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a1a      	ldr	r2, [pc, #104]	; (8003cac <STACK_SMBUS_ReadyIfNoAlert+0x88>)
 8003c44:	60da      	str	r2, [r3, #12]
      pStackContext->StateMachine |= SMBUS_SMS_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	601a      	str	r2, [r3, #0]
      STACK_SMBUS_HostRead( pStackContext, &(pStackContext->OwnAddress), SMBUS_ADDR_ARA);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3320      	adds	r3, #32
 8003c56:	0019      	movs	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2218      	movs	r2, #24
 8003c5c:	0018      	movs	r0, r3
 8003c5e:	f000 f87f 	bl	8003d60 <STACK_SMBUS_HostRead>
    /*
      ...and return to listen mode
    */
    HAL_SMBUS_EnableListen_IT( pStackContext->Device );
  }
}
 8003c62:	e01f      	b.n	8003ca4 <STACK_SMBUS_ReadyIfNoAlert+0x80>
      pStackContext->StateMachine |= SMBUS_SMS_READY | SMBUS_SMS_ALERT_ADDRESS;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2281      	movs	r2, #129	; 0x81
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	601a      	str	r2, [r3, #0]
      pStackContext->StateMachine &= ~SMBUS_SMS_ALERT_PENDING;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2240      	movs	r2, #64	; 0x40
 8003c76:	4393      	bics	r3, r2
 8003c78:	001a      	movs	r2, r3
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	601a      	str	r2, [r3, #0]
      STACK_SMBUS_AlertClbk( pStackContext );
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	0018      	movs	r0, r3
 8003c82:	f7ff ffc6 	bl	8003c12 <STACK_SMBUS_AlertClbk>
}
 8003c86:	e00d      	b.n	8003ca4 <STACK_SMBUS_ReadyIfNoAlert+0x80>
    pStackContext->StateMachine |= SMBUS_SMS_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	601a      	str	r2, [r3, #0]
    pStackContext->CurrentCommand = NULL;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	60da      	str	r2, [r3, #12]
    HAL_SMBUS_EnableListen_IT( pStackContext->Device );
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7fe f980 	bl	8001fa4 <HAL_SMBUS_EnableListen_IT>
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b002      	add	sp, #8
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	2000000c 	.word	0x2000000c

08003cb0 <STACK_SMBUS_Init>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval SMBus stack return code
  */
HAL_StatusTypeDef STACK_SMBUS_Init( SMBUS_StackHandleTypeDef *pStackContext )
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t              index = 0U;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef     result = STACK_OK;
 8003cbc:	230b      	movs	r3, #11
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]

  while ( SMBUSInstancesList[index] != NULL )
 8003cc4:	e002      	b.n	8003ccc <STACK_SMBUS_Init+0x1c>
  {
    index++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	60fb      	str	r3, [r7, #12]
  while ( SMBUSInstancesList[index] != NULL )
 8003ccc:	4b16      	ldr	r3, [pc, #88]	; (8003d28 <STACK_SMBUS_Init+0x78>)
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	0092      	lsls	r2, r2, #2
 8003cd2:	58d3      	ldr	r3, [r2, r3]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f6      	bne.n	8003cc6 <STACK_SMBUS_Init+0x16>
  }

  pStackContext->SlaveAddress = 0U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	83da      	strh	r2, [r3, #30]

  SMBUSInstancesList[index] = pStackContext;
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <STACK_SMBUS_Init+0x78>)
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	0092      	lsls	r2, r2, #2
 8003ce4:	6879      	ldr	r1, [r7, #4]
 8003ce6:	50d1      	str	r1, [r2, r3]

  /*
   No mode, nothing going on
   */
  pStackContext->StateMachine |= SMBUS_SMS_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2201      	movs	r2, #1
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	601a      	str	r2, [r3, #0]
  pStackContext->OpMode = 0U;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2221      	movs	r2, #33	; 0x21
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	5499      	strb	r1, [r3, r2]

#ifdef PMBUS13
  /* initializing the Zone settings */
  pStackContext->TheZone = ZERO_ZONE;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	619a      	str	r2, [r3, #24]
#endif /* ALERT */

  /*
    the device listens for common commands, the host for notify protocol
   */
  if ( result == STACK_OK )
 8003d02:	230b      	movs	r3, #11
 8003d04:	18fb      	adds	r3, r7, r3
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <STACK_SMBUS_Init+0x6a>
  {
    return HAL_SMBUS_EnableListen_IT( pStackContext->Device );
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	0018      	movs	r0, r3
 8003d12:	f7fe f947 	bl	8001fa4 <HAL_SMBUS_EnableListen_IT>
 8003d16:	0003      	movs	r3, r0
 8003d18:	e002      	b.n	8003d20 <STACK_SMBUS_Init+0x70>
  }
  else
  {
    return result;
 8003d1a:	230b      	movs	r3, #11
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8003d20:	0018      	movs	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	b004      	add	sp, #16
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000088 	.word	0x20000088

08003d2c <STACK_SMBUS_GetBuffer>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the configuration information for the specified SMBUS.
  * @retval I/O buffer
  */
uint8_t *STACK_SMBUS_GetBuffer( SMBUS_StackHandleTypeDef *pStackContext )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  uint8_t *pResult;
  /*
    return NULL if the driver is busy
   */
  if (
    ( pStackContext->Device->State != HAL_SMBUS_STATE_READY ) &&
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  if (
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d008      	beq.n	8003d50 <STACK_SMBUS_GetBuffer+0x24>
    (( pStackContext->Device->State & HAL_SMBUS_STATE_LISTEN ) == 0U )
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d44:	2208      	movs	r2, #8
 8003d46:	4013      	ands	r3, r2
    ( pStackContext->Device->State != HAL_SMBUS_STATE_READY ) &&
 8003d48:	d102      	bne.n	8003d50 <STACK_SMBUS_GetBuffer+0x24>
  )
  {
    pResult = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
 8003d4e:	e002      	b.n	8003d56 <STACK_SMBUS_GetBuffer+0x2a>
  else
  {
    /*
      starts at second position, first is reserved for the command code
     */
    pResult = &(pStackContext->Buffer[1]);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	3324      	adds	r3, #36	; 0x24
 8003d54:	60fb      	str	r3, [r7, #12]
  }
  return pResult;
 8003d56:	68fb      	ldr	r3, [r7, #12]
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b004      	add	sp, #16
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <STACK_SMBUS_HostRead>:
  * @param  pData  : pointer to the variable where response should be stored
  * @param  address : slave address to be used in the transmission
  * @retval HAL_StatusTypeDef SMBus stack return code
  */
HAL_StatusTypeDef STACK_SMBUS_HostRead(SMBUS_StackHandleTypeDef *pStackContext, uint8_t *pData, uint16_t address)
{
 8003d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d62:	b089      	sub	sp, #36	; 0x24
 8003d64:	af02      	add	r7, sp, #8
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	1dbb      	adds	r3, r7, #6
 8003d6c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef     result = STACK_BUSY;
 8003d6e:	2317      	movs	r3, #23
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	2202      	movs	r2, #2
 8003d74:	701a      	strb	r2, [r3, #0]
  uint32_t              xFerOptions;

  /*
    First check state of the SMBUS
   */
  if ( ( pStackContext->StateMachine & SMBUS_SMS_READY ) == SMBUS_SMS_READY )
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	d051      	beq.n	8003e24 <STACK_SMBUS_HostRead+0xc4>
  {

    /*
    becoming master, not listening any more
    */
    HAL_SMBUS_DisableListen_IT( pStackContext->Device );
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7fe f91e 	bl	8001fc6 <HAL_SMBUS_DisableListen_IT>

    /*
      State transition from Ready to Reception
    */
    pStackContext->StateMachine &= ~SMBUS_SMS_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	4393      	bics	r3, r2
 8003d92:	001a      	movs	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]
    pStackContext->StateMachine |= SMBUS_SMS_RECEIVE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	601a      	str	r2, [r3, #0]

    /*
      May be a receive byte ( then we need pointer to store reply ) or quick command read
    */
    if ( pData == NULL )
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d107      	bne.n	8003dba <STACK_SMBUS_HostRead+0x5a>
    {
      size = 0U;
 8003daa:	2316      	movs	r3, #22
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
      xFerOptions = SMBUS_FIRST_AND_LAST_FRAME_NO_PEC;
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	049b      	lsls	r3, r3, #18
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	e017      	b.n	8003dea <STACK_SMBUS_HostRead+0x8a>
    }
    else
    {
      size = 1U;
 8003dba:	2116      	movs	r1, #22
 8003dbc:	187b      	adds	r3, r7, r1
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
      if ((pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE ) == SMBUS_SMS_PEC_ACTIVE )
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	04db      	lsls	r3, r3, #19
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d004      	beq.n	8003dd8 <STACK_SMBUS_HostRead+0x78>
      {
        size += PEC_SIZE;
 8003dce:	187b      	adds	r3, r7, r1
 8003dd0:	187a      	adds	r2, r7, r1
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	3201      	adds	r2, #1
 8003dd6:	701a      	strb	r2, [r3, #0]
      }
      xFerOptions = SMBUS_FIRST_AND_LAST_FRAME_NO_PEC | ( pStackContext->StateMachine & SMBUS_SMS_PEC_ACTIVE );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	2380      	movs	r3, #128	; 0x80
 8003dde:	04db      	lsls	r3, r3, #19
 8003de0:	4013      	ands	r3, r2
 8003de2:	2280      	movs	r2, #128	; 0x80
 8003de4:	0492      	lsls	r2, r2, #18
 8003de6:	4313      	orrs	r3, r2
 8003de8:	613b      	str	r3, [r7, #16]
    }

    /*
      Ordering the HAL to do single frame read operation, checking the result
    */
    result = HAL_SMBUS_Master_Receive_IT( pStackContext->Device, address, pData, (uint16_t)size, xFerOptions );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6858      	ldr	r0, [r3, #4]
 8003dee:	2316      	movs	r3, #22
 8003df0:	18fb      	adds	r3, r7, r3
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	b29d      	uxth	r5, r3
 8003df6:	2617      	movs	r6, #23
 8003df8:	19bc      	adds	r4, r7, r6
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	1dbb      	adds	r3, r7, #6
 8003dfe:	8819      	ldrh	r1, [r3, #0]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	9300      	str	r3, [sp, #0]
 8003e04:	002b      	movs	r3, r5
 8003e06:	f7fd fe7b 	bl	8001b00 <HAL_SMBUS_Master_Receive_IT>
 8003e0a:	0003      	movs	r3, r0
 8003e0c:	7023      	strb	r3, [r4, #0]
    if (result != HAL_OK )
 8003e0e:	19bb      	adds	r3, r7, r6
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d006      	beq.n	8003e24 <STACK_SMBUS_HostRead+0xc4>
    {
      pStackContext->StateMachine |= SMBUS_SMS_ERROR;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2280      	movs	r2, #128	; 0x80
 8003e1c:	0092      	lsls	r2, r2, #2
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	601a      	str	r2, [r3, #0]
    }
  }

  return result;
 8003e24:	2317      	movs	r3, #23
 8003e26:	18fb      	adds	r3, r7, r3
 8003e28:	781b      	ldrb	r3, [r3, #0]
}
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	b007      	add	sp, #28
 8003e30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e32 <STACK_SMBUS_ExtendCommand>:
  * @param  pStackContext : Pointer to a SMBUS_StackHandleTypeDef structure that contains
  *                the context information for the specified SMBUS stack.
  * @retval HAL_StatusTypeDef response code. STACK_OK if success, any other value means problem
  */
__weak HAL_StatusTypeDef STACK_SMBUS_ExtendCommand( SMBUS_StackHandleTypeDef *pStackContext )
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
   */

  /*
    Returning zero means no problem with execution, if reply is expected, then it is correctly placed in the IO buffer
   */
  return STACK_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b002      	add	sp, #8
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <MX_STACK_SMBUS_Init>:
#define SMBUS_HANDLE_instance hsmbus1
extern SMBUS_HandleTypeDef SMBUS_HANDLE_instance;

/* stack init function */
void MX_STACK_SMBUS_Init(void)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SMBUS_Init 0 */

  /* USER CODE END SMBUS_Init 0 */

  /* USER CODE BEGIN SMBUS_Init 1 */
	  context.CMD_table = (st_command_t *) & PMBUS_COMMANDS_TEST[0];
 8003e4a:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <MX_STACK_SMBUS_Init+0x90>)
 8003e4c:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <MX_STACK_SMBUS_Init+0x94>)
 8003e4e:	611a      	str	r2, [r3, #16]
	  context.CMD_tableSize = PMBUS_CMD_TBL_SIZE;
 8003e50:	4b20      	ldr	r3, [pc, #128]	; (8003ed4 <MX_STACK_SMBUS_Init+0x90>)
 8003e52:	2215      	movs	r2, #21
 8003e54:	615a      	str	r2, [r3, #20]
  /* USER CODE END SMBUS_Init 1 */
  context.Device = &SMBUS_HANDLE_instance;
 8003e56:	4b1f      	ldr	r3, [pc, #124]	; (8003ed4 <MX_STACK_SMBUS_Init+0x90>)
 8003e58:	4a20      	ldr	r2, [pc, #128]	; (8003edc <MX_STACK_SMBUS_Init+0x98>)
 8003e5a:	605a      	str	r2, [r3, #4]
  context.SRByte = 0x55U;
 8003e5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ed4 <MX_STACK_SMBUS_Init+0x90>)
 8003e5e:	2222      	movs	r2, #34	; 0x22
 8003e60:	2155      	movs	r1, #85	; 0x55
 8003e62:	5499      	strb	r1, [r3, r2]
  context.CurrentCommand = NULL;
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <MX_STACK_SMBUS_Init+0x90>)
 8003e66:	2200      	movs	r2, #0
 8003e68:	60da      	str	r2, [r3, #12]

  /* In SMBUS 10-bit addressing is reserved for future use */
  assert_param(SMBUS_HANDLE_instance.Init.AddressingMode == SMBUS_ADDRESSINGMODE_7BIT);
  context.OwnAddress = SMBUS_HANDLE_instance.Init.OwnAddress1;
 8003e6a:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <MX_STACK_SMBUS_Init+0x98>)
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	b2d9      	uxtb	r1, r3
 8003e70:	4b18      	ldr	r3, [pc, #96]	; (8003ed4 <MX_STACK_SMBUS_Init+0x90>)
 8003e72:	2220      	movs	r2, #32
 8003e74:	5499      	strb	r1, [r3, r2]
  /* Address resolved state */
  context.StateMachine = SMBUS_SMS_ARP_AR;
 8003e76:	4b17      	ldr	r3, [pc, #92]	; (8003ed4 <MX_STACK_SMBUS_Init+0x90>)
 8003e78:	2280      	movs	r2, #128	; 0x80
 8003e7a:	0592      	lsls	r2, r2, #22
 8003e7c:	601a      	str	r2, [r3, #0]
  /* checking the HAL slave setting */
  assert_param(SMBUS_HANDLE_instance.Init.PeripheralMode != SMBUS_PERIPHERAL_MODE_SMBUS_HOST);
  /* checking the HAL is in accord */
  assert_param(SMBUS_HANDLE_instance.Init.PacketErrorCheckMode == SMBUS_PEC_DISABLE);
  pcontext = &context;
 8003e7e:	4b18      	ldr	r3, [pc, #96]	; (8003ee0 <MX_STACK_SMBUS_Init+0x9c>)
 8003e80:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <MX_STACK_SMBUS_Init+0x90>)
 8003e82:	601a      	str	r2, [r3, #0]

  if (STACK_SMBUS_Init( pcontext ) != HAL_OK)
 8003e84:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <MX_STACK_SMBUS_Init+0x9c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7ff ff11 	bl	8003cb0 <STACK_SMBUS_Init>
 8003e8e:	1e03      	subs	r3, r0, #0
 8003e90:	d001      	beq.n	8003e96 <MX_STACK_SMBUS_Init+0x52>
  {
    Error_Handler();
 8003e92:	f7fc fb21 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN SMBUS_Init 2 */
  uint32_t      index;
  uint8_t*      piobuf;
  
  piobuf = STACK_SMBUS_GetBuffer( pcontext );
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <MX_STACK_SMBUS_Init+0x9c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f7ff ff46 	bl	8003d2c <STACK_SMBUS_GetBuffer>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	603b      	str	r3, [r7, #0]

  /* initializing the IO buffer */
  /* this part is optional */
  if (piobuf != NULL )
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d010      	beq.n	8003ecc <MX_STACK_SMBUS_Init+0x88>
  {
    for (index = 20U; index < STACK_NBYTE_SIZE; index++)
 8003eaa:	2314      	movs	r3, #20
 8003eac:	607b      	str	r3, [r7, #4]
 8003eae:	e00a      	b.n	8003ec6 <MX_STACK_SMBUS_Init+0x82>
    {
      piobuf[index] = (uint8_t)index + 20U;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	6839      	ldr	r1, [r7, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	18cb      	adds	r3, r1, r3
 8003eba:	3214      	adds	r2, #20
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]
    for (index = 20U; index < STACK_NBYTE_SIZE; index++)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	607b      	str	r3, [r7, #4]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b27      	cmp	r3, #39	; 0x27
 8003eca:	d9f1      	bls.n	8003eb0 <MX_STACK_SMBUS_Init+0x6c>
    }
  }
  /* USER CODE END SMBUS_Init 2 */

}
 8003ecc:	46c0      	nop			; (mov r8, r8)
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	b002      	add	sp, #8
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	20000090 	.word	0x20000090
 8003ed8:	08003f84 	.word	0x08003f84
 8003edc:	20000030 	.word	0x20000030
 8003ee0:	200000e0 	.word	0x200000e0

08003ee4 <memset>:
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	1882      	adds	r2, r0, r2
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d100      	bne.n	8003eee <memset+0xa>
 8003eec:	4770      	bx	lr
 8003eee:	7019      	strb	r1, [r3, #0]
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	e7f9      	b.n	8003ee8 <memset+0x4>

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	2600      	movs	r6, #0
 8003ef8:	4c0c      	ldr	r4, [pc, #48]	; (8003f2c <__libc_init_array+0x38>)
 8003efa:	4d0d      	ldr	r5, [pc, #52]	; (8003f30 <__libc_init_array+0x3c>)
 8003efc:	1b64      	subs	r4, r4, r5
 8003efe:	10a4      	asrs	r4, r4, #2
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	2600      	movs	r6, #0
 8003f06:	f000 f819 	bl	8003f3c <_init>
 8003f0a:	4c0a      	ldr	r4, [pc, #40]	; (8003f34 <__libc_init_array+0x40>)
 8003f0c:	4d0a      	ldr	r5, [pc, #40]	; (8003f38 <__libc_init_array+0x44>)
 8003f0e:	1b64      	subs	r4, r4, r5
 8003f10:	10a4      	asrs	r4, r4, #2
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	00b3      	lsls	r3, r6, #2
 8003f1a:	58eb      	ldr	r3, [r5, r3]
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	00b3      	lsls	r3, r6, #2
 8003f24:	58eb      	ldr	r3, [r5, r3]
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	08003fdc 	.word	0x08003fdc
 8003f30:	08003fdc 	.word	0x08003fdc
 8003f34:	08003fe0 	.word	0x08003fe0
 8003f38:	08003fdc 	.word	0x08003fdc

08003f3c <_init>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f42:	bc08      	pop	{r3}
 8003f44:	469e      	mov	lr, r3
 8003f46:	4770      	bx	lr

08003f48 <_fini>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	46c0      	nop			; (mov r8, r8)
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr
